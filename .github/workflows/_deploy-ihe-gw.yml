name: Reusable Deploy workflow for the IHE Gateway

on:
  workflow_call:
    inputs:
      deploy_env:
        description: "the environment we're deploying to, either 'staging', 'production', or 'sandbox'"
        required: true
        type: string
      script_name:
        description: "the name of the script under the scripts/ folder to run"
        required: false
        type: string
        default: "deploy-api.sh"
      ECR_REPO_URI:
        description: "The URI of the ECR repository to push the Docker image to"
        required: true
        type: string
      ECS_CLUSTER:
        description: "The ARN of the ECS cluster containing the service to be restarted upon deployment"
        required: true
        type: string
      IHE_INBOUND_ECS_SERVICE:
        description: "The ARN of the ECS service for Inbound requests to be restarted upon deployment"
        required: true
        type: string
      IHE_OUTBOUND_ECS_SERVICE:
        description: "The ARN of the ECS service for Outbound requeststo be restarted upon deployment"
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      IHE_GW_ARTIFACT_URL:
        required: true
        type: string
      IHE_GW_KEYSTORE_NAME:
        required: true
        type: string
      IHE_GW_ZULUKEY:
        required: true
        type: string
      IHE_GW_CONFIG_BUCKET_NAME:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      IHE_GW_KEYSTORE_STOREPASS:
        required: true
      IHE_GW_KEYSTORE_KEYPASS:
        required: true

jobs:
  deploy:
    # prevents 2+ devs/workflows trying to deploy to AWS at the same time
    # https://serverlessfirst.com/emails/how-to-prevent-concurrent-deployments-of-serverless-stacks-in-github-actions/
    # TODO Consider the solution here: https://github.com/tj-actions/aws-cdk/blob/main/action.yml
    concurrency:
      group: ${{ format('{0}-{1}-{2}', github.job, 'deploy-ihe-gw', inputs.deploy_env) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy_env }}
    steps:
      - name: Log Environment
        run: |
          env
          echo "ECR_REPO_URI: ${{ inputs.ECR_REPO_URI }}"
          echo "ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}"
          echo "IHE_INBOUND_ECS_SERVICE: ${{ inputs.IHE_INBOUND_ECS_SERVICE }}"
          echo "IHE_OUTBOUND_ECS_SERVICE: ${{ inputs.IHE_OUTBOUND_ECS_SERVICE }}"
          echo "AWS_REGION: ${{ inputs.AWS_REGION }}"
        shell: bash
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log Git Ref
        run: |
          echo "Git ref: $(git rev-parse HEAD)"
        shell: bash

      - name: Setup AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ inputs.AWS_REGION }}"
        working-directory: "./"

      # Needs buildx so we can build w/ secrets
      - name: Setup Docker
        run: docker buildx create --use
        working-directory: "./"

      - name: Deploy
        run: |
          ./packages/scripts/deploy-ihe-gw.sh
        working-directory: "./"
        env:
          ENV_TYPE: ${{ inputs.deploy_env }}
          ECR_REPO_URI: ${{ inputs.ECR_REPO_URI }}
          ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
          IHE_INBOUND_ECS_SERVICE: ${{ inputs.IHE_INBOUND_ECS_SERVICE }}
          IHE_OUTBOUND_ECS_SERVICE: ${{ inputs.IHE_OUTBOUND_ECS_SERVICE }}
          AWS_REGION: ${{ inputs.AWS_REGION }}
          IHE_GW_ARTIFACT_URL: ${{ inputs.IHE_GW_ARTIFACT_URL }}
          IHE_GW_KEYSTORE_NAME: ${{ inputs.IHE_GW_KEYSTORE_NAME }}
          IHE_GW_ZULUKEY: ${{ inputs.IHE_GW_ZULUKEY }}
          IHE_GW_CONFIG_BUCKET_NAME: ${{ inputs.IHE_GW_CONFIG_BUCKET_NAME }}
          IHE_GW_KEYSTORE_STOREPASS: ${{ secrets.IHE_GW_KEYSTORE_STOREPASS }}
          IHE_GW_KEYSTORE_KEYPASS: ${{ secrets.IHE_GW_KEYSTORE_KEYPASS }}
