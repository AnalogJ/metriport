name: Reusable Build workflow

on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string
        description: "sub-directory where this workflow should execute lint and build "
      treat-as-package:
        required: false
        type: boolean
        default: true
        description: "whether this workflow should 'npm ci' on parent folder, 'input.path' if false (default=true)"
      build_env:
        required: false
        type: string
        description: "the environment we're building to, either 'staging' or 'production'"
        default: "production"
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  lint-build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Log Environment
        run: |
          env
        shell: bash
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "18.14"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 100 # bc of below
      - name: Log Git Ref
        run: |
          echo "Git ref: $(git rev-parse HEAD)"
        shell: bash
      # check commits' messages to make sure they follow Conventional Commits
      - uses: wagoid/commitlint-github-action@v5

      - name: Install on root
        if: ${{ inputs.treat-as-package == true }}
        run: |
          pwd
          npm run install-deps
        working-directory: "./" # from root bc package-lock.json is there
      - name: Install on sub-folder/package
        if: ${{ inputs.treat-as-package == false }}
        run: |
          pwd
          npm ci --ignore-scripts --no-fund
        working-directory: ${{ inputs.path }}

      - name: Run Linter
        run: npm run lint
        working-directory: ${{ inputs.path }}
      # move to an external file so both this and deploy can use this logic

      - name: Build/compile on root
        if: ${{ inputs.treat-as-package == true && inputs.build_env == 'production' }}
        run: |
          pwd
          echo "Git ref: $(inputs.build_env)"
          npm run build:cloud
        # build from root because of dependencies
        working-directory: "./"
      - name: Build/compile on root STAGING
        if: ${{ inputs.treat-as-package == true && inputs.build_env == 'staging' }}
        run: |
          pwd
          echo "Git ref: $(inputs.build_env)"
          npm run build:staging
        working-directory: "./"
      - name: Build/compile on sub-folder/package
        if: ${{ inputs.treat-as-package == false }}
        run: |
          pwd
          npm run build:cloud
        working-directory: ${{ inputs.path }}

      - name: Install playwright
        if: ${{ inputs.path == 'packages/connect-widget'}}
        run: npx playwright install && npx playwright install-deps
        working-directory: ${{ inputs.path }}

      - name: Run Tests
        run: npm run test
        working-directory: ${{ inputs.path }}
