name: Reusable Deploy script

on:
  workflow_call:
    inputs:
      build_env:
        description: "the environment we're building to, either 'staging' or 'production' - only apps that have special build scripts need to set this"
        type: string
        required: false
        default: "production"
      deploy_env:
        required: true
        type: string
        description: "the environment we're deploying to, either 'staging', 'production', or 'sandbox'"
      cdk_stack:
        required: true
        type: string
        description: "the name of the CDK stack we're deploying"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      INFRA_CONFIG:
        required: true
      SENTRY_AUTH_TOKEN:
        required: false
      SENTRY_ORG:
        required: false
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  deploy:
    # prevents 2+ devs/workflows trying to deploy to AWS at the same time
    # https://serverlessfirst.com/emails/how-to-prevent-concurrent-deployments-of-serverless-stacks-in-github-actions/
    # TODO Consider the solution here: https://github.com/tj-actions/aws-cdk/blob/main/action.yml
    concurrency:
      group: ${{ format('{0}-{1}-{2}', github.job, inputs.cdk_stack, inputs.deploy_env) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy_env }}
    steps:
      - name: Log Environment
        run: |
          env
        shell: bash
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "18.14"
      # TODO we should reuse the checked out code from the previous step
      # doing this here might introduce minutes between `build` and `deploy`, which
      # gives opportunity for problems (someone merges between `build` and `deploy`)
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log Git Ref
        run: |
          echo "Git ref: $(git rev-parse HEAD)"
        shell: bash

      # SET CONFIG FILES
      - name: Infra set config file
        run: |
          echo "Env ${{ inputs.deploy_env }}"
          echo "${{ secrets.INFRA_CONFIG }}" | base64 -d > ${{ inputs.deploy_env }}.ts
          ls -la
        working-directory: "infra/config"

      # INSTALL DEPENDENCIES
      - name: Install dependencies
        run: npm ci --ignore-scripts
        working-directory: "./"
      # lambdas are not on the npm workspaces, so need to 'install' individually
      - name: Garmin lambda install dependencies
        run: npm ci --ignore-scripts
        working-directory: "api/lambdas/garmin/"
      - name: Token-auth lambda install dependencies
        run: npm ci --ignore-scripts
        working-directory: "api/lambdas/token-auth/"

      # BUILD
      # api
      - name: API build/compile
        run: npm run build:cloud
        working-directory: "api/app"
      # TODO move to an external file so both this and deploy can use this logic
      - name: Widget build/compile
        if: ${{ inputs.build_env == 'production' }}
        run: npm run build
        working-directory: "connect-widget/app"
      - name: Widget build/compile STAGING
        if: ${{ inputs.build_env == 'staging' }}
        run: npm run build:staging
        working-directory: "connect-widget/app"

      # SENTRY
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
        # TODO: #156 disabled bc its not working, waiting Sentry support
        # https://metriport.slack.com/archives/C04FZ9859FZ/p1680112432771159?thread_ts=1680110062.829999&cid=C04FZ9859FZ
        # if: env.SENTRY_AUTH_TOKEN != null && env.SENTRY_ORG != null
        if: false
        with:
          environment: ${{ inputs.deploy_env }}
          version: ${{ github.sha }}
          ignore_missing: true
          ignore_empty: true
          sourcemaps: api/app/dist connect-widget/app/build
          projects: api-oss connect-widget

      # CDK DIFF
      - name: Diff CDK stack
        uses: metriport/deploy-with-cdk@master
        with:
          cdk_action: "diff"
          cdk_version: "2.49.0"
          cdk_stack: "${{ inputs.cdk_stack }}"
          cdk_env: "${{ inputs.deploy_env }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      # DEPLOY
      - name: Deploy CDK stack
        uses: metriport/deploy-with-cdk@master
        with:
          cdk_action: "deploy --verbose --require-approval never"
          cdk_version: "2.49.0"
          cdk_stack: "${{ inputs.cdk_stack }}"
          cdk_env: "${{ inputs.deploy_env }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          METRIPORT_VERSION: ${{ github.sha }}
