/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const SampledData: core.serialization.ObjectSchema<
    serializers.fhir.SampledData.Raw,
    MetriportApi.fhir.SampledData
> = core.serialization.object({
    id: core.serialization.string().optional(),
    extension: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
        .optional(),
    origin: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Quantity),
    period: core.serialization.lazy(async () => (await import("../../..")).fhir.Decimal).optional(),
    factor: core.serialization.lazy(async () => (await import("../../..")).fhir.Decimal).optional(),
    lowerLimit: core.serialization.lazy(async () => (await import("../../..")).fhir.Decimal).optional(),
    upperLimit: core.serialization.lazy(async () => (await import("../../..")).fhir.Decimal).optional(),
    dimensions: core.serialization.lazy(async () => (await import("../../..")).fhir.PositiveInt).optional(),
    data: core.serialization.string().optional(),
});

export declare namespace SampledData {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        origin: serializers.fhir.Quantity.Raw;
        period?: serializers.fhir.Decimal.Raw | null;
        factor?: serializers.fhir.Decimal.Raw | null;
        lowerLimit?: serializers.fhir.Decimal.Raw | null;
        upperLimit?: serializers.fhir.Decimal.Raw | null;
        dimensions?: serializers.fhir.PositiveInt.Raw | null;
        data?: string | null;
    }
}
