/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const UsageContext: core.serialization.ObjectSchema<
    serializers.fhir.UsageContext.Raw,
    MetriportApi.fhir.UsageContext
> = core.serialization.object({
    id: core.serialization.string().optional(),
    extension: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
        .optional(),
    code: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Coding),
    valueCodeableConcept: core.serialization
        .lazyObject(async () => (await import("../../..")).fhir.CodeableConcept)
        .optional(),
    valueQuantity: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Quantity).optional(),
    valueRange: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Range).optional(),
    valueReference: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Reference).optional(),
});

export declare namespace UsageContext {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        code: serializers.fhir.Coding.Raw;
        valueCodeableConcept?: serializers.fhir.CodeableConcept.Raw | null;
        valueQuantity?: serializers.fhir.Quantity.Raw | null;
        valueRange?: serializers.fhir.Range.Raw | null;
        valueReference?: serializers.fhir.Reference.Raw | null;
    }
}
