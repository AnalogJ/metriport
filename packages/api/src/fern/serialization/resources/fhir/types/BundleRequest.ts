/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const BundleRequest: core.serialization.ObjectSchema<
    serializers.fhir.BundleRequest.Raw,
    MetriportApi.fhir.BundleRequest
> = core.serialization.object({
    id: core.serialization.string().optional(),
    extension: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
        .optional(),
    modifierExtension: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
        .optional(),
    method: core.serialization.lazy(async () => (await import("../../..")).fhir.BundleRequestMethod).optional(),
    url: core.serialization.lazy(async () => (await import("../../..")).fhir.Uri).optional(),
    ifNoneMatch: core.serialization.string().optional(),
    ifModifiedSince: core.serialization.lazy(async () => (await import("../../..")).fhir.Instant).optional(),
    ifMatch: core.serialization.string().optional(),
    ifNoneExist: core.serialization.string().optional(),
});

export declare namespace BundleRequest {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        modifierExtension?: serializers.fhir.Extension.Raw[] | null;
        method?: serializers.fhir.BundleRequestMethod.Raw | null;
        url?: serializers.fhir.Uri.Raw | null;
        ifNoneMatch?: string | null;
        ifModifiedSince?: serializers.fhir.Instant.Raw | null;
        ifMatch?: string | null;
        ifNoneExist?: string | null;
    }
}
