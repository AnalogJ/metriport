/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const DataRequirement: core.serialization.ObjectSchema<
    serializers.fhir.DataRequirement.Raw,
    MetriportApi.fhir.DataRequirement
> = core.serialization.object({
    id: core.serialization.string().optional(),
    extension: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
        .optional(),
    type: core.serialization.lazy(async () => (await import("../../..")).fhir.Code).optional(),
    profile: core.serialization
        .list(core.serialization.lazy(async () => (await import("../../..")).fhir.Canonical))
        .optional(),
    subjectCodeableConcept: core.serialization
        .lazyObject(async () => (await import("../../..")).fhir.CodeableConcept)
        .optional(),
    subjectReference: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Reference).optional(),
    mustSupport: core.serialization.list(core.serialization.string()).optional(),
    codeFilter: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.DataRequirementCodeFilter))
        .optional(),
    dateFilter: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.DataRequirementDateFilter))
        .optional(),
    limit: core.serialization.lazy(async () => (await import("../../..")).fhir.PositiveInt).optional(),
    sort: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.DataRequirementSort))
        .optional(),
});

export declare namespace DataRequirement {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        type?: serializers.fhir.Code.Raw | null;
        profile?: serializers.fhir.Canonical.Raw[] | null;
        subjectCodeableConcept?: serializers.fhir.CodeableConcept.Raw | null;
        subjectReference?: serializers.fhir.Reference.Raw | null;
        mustSupport?: string[] | null;
        codeFilter?: serializers.fhir.DataRequirementCodeFilter.Raw[] | null;
        dateFilter?: serializers.fhir.DataRequirementDateFilter.Raw[] | null;
        limit?: serializers.fhir.PositiveInt.Raw | null;
        sort?: serializers.fhir.DataRequirementSort.Raw[] | null;
    }
}
