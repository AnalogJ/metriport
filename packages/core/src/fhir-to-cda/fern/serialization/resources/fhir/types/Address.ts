/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const Address: core.serialization.ObjectSchema<serializers.fhir.Address.Raw, MetriportApi.fhir.Address> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        extension: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
            .optional(),
        use: core.serialization.lazy(async () => (await import("../../..")).fhir.AddressUse).optional(),
        type: core.serialization.lazy(async () => (await import("../../..")).fhir.AddressType).optional(),
        text: core.serialization.string().optional(),
        line: core.serialization.list(core.serialization.string()).optional(),
        city: core.serialization.string().optional(),
        district: core.serialization.string().optional(),
        state: core.serialization.string().optional(),
        postalCode: core.serialization.string().optional(),
        country: core.serialization.string().optional(),
        period: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Period).optional(),
    });

export declare namespace Address {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        use?: serializers.fhir.AddressUse.Raw | null;
        type?: serializers.fhir.AddressType.Raw | null;
        text?: string | null;
        line?: string[] | null;
        city?: string | null;
        district?: string | null;
        state?: string | null;
        postalCode?: string | null;
        country?: string | null;
        period?: serializers.fhir.Period.Raw | null;
    }
}
