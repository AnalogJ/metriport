/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const Dosage: core.serialization.ObjectSchema<serializers.fhir.Dosage.Raw, MetriportApi.fhir.Dosage> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        extension: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
            .optional(),
        modifierExtension: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
            .optional(),
        sequence: core.serialization.number().optional(),
        text: core.serialization.string().optional(),
        additionalInstruction: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.CodeableConcept))
            .optional(),
        patientInstruction: core.serialization.string().optional(),
        timing: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Timing).optional(),
        asNeededBoolean: core.serialization.boolean().optional(),
        asNeededCodeableConcept: core.serialization
            .lazyObject(async () => (await import("../../..")).fhir.CodeableConcept)
            .optional(),
        site: core.serialization.lazyObject(async () => (await import("../../..")).fhir.CodeableConcept).optional(),
        route: core.serialization.lazyObject(async () => (await import("../../..")).fhir.CodeableConcept).optional(),
        method: core.serialization.lazyObject(async () => (await import("../../..")).fhir.CodeableConcept).optional(),
        doseAndRate: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.DosageDoseAndRate))
            .optional(),
        maxDosePerPeriod: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Ratio).optional(),
        maxDosePerAdministration: core.serialization
            .lazyObject(async () => (await import("../../..")).fhir.Quantity)
            .optional(),
        maxDosePerLifetime: core.serialization
            .lazyObject(async () => (await import("../../..")).fhir.Quantity)
            .optional(),
    });

export declare namespace Dosage {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        modifierExtension?: serializers.fhir.Extension.Raw[] | null;
        sequence?: number | null;
        text?: string | null;
        additionalInstruction?: serializers.fhir.CodeableConcept.Raw[] | null;
        patientInstruction?: string | null;
        timing?: serializers.fhir.Timing.Raw | null;
        asNeededBoolean?: boolean | null;
        asNeededCodeableConcept?: serializers.fhir.CodeableConcept.Raw | null;
        site?: serializers.fhir.CodeableConcept.Raw | null;
        route?: serializers.fhir.CodeableConcept.Raw | null;
        method?: serializers.fhir.CodeableConcept.Raw | null;
        doseAndRate?: serializers.fhir.DosageDoseAndRate.Raw[] | null;
        maxDosePerPeriod?: serializers.fhir.Ratio.Raw | null;
        maxDosePerAdministration?: serializers.fhir.Quantity.Raw | null;
        maxDosePerLifetime?: serializers.fhir.Quantity.Raw | null;
    }
}
