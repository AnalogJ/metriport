/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const ContactPoint: core.serialization.ObjectSchema<
    serializers.fhir.ContactPoint.Raw,
    MetriportApi.fhir.ContactPoint
> = core.serialization.object({
    id: core.serialization.string().optional(),
    extension: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
        .optional(),
    system: core.serialization.lazy(async () => (await import("../../..")).fhir.ContactPointSystem).optional(),
    value: core.serialization.string().optional(),
    use: core.serialization.lazy(async () => (await import("../../..")).fhir.ContactPointUse).optional(),
    rank: core.serialization.lazy(async () => (await import("../../..")).fhir.PositiveInt).optional(),
    period: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Period).optional(),
});

export declare namespace ContactPoint {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        system?: serializers.fhir.ContactPointSystem.Raw | null;
        value?: string | null;
        use?: serializers.fhir.ContactPointUse.Raw | null;
        rank?: serializers.fhir.PositiveInt.Raw | null;
        period?: serializers.fhir.Period.Raw | null;
    }
}
