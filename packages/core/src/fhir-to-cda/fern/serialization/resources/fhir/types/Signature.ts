/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const Signature: core.serialization.ObjectSchema<serializers.fhir.Signature.Raw, MetriportApi.fhir.Signature> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        extension: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
            .optional(),
        type: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../..")).fhir.Coding)
        ),
        when: core.serialization.lazy(async () => (await import("../../..")).fhir.Instant).optional(),
        who: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Reference),
        onBehalfOf: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Reference).optional(),
        targetFormat: core.serialization.lazy(async () => (await import("../../..")).fhir.Code).optional(),
        sigFormat: core.serialization.lazy(async () => (await import("../../..")).fhir.Code).optional(),
        data: core.serialization.lazy(async () => (await import("../../..")).fhir.Base64Binary).optional(),
    });

export declare namespace Signature {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        type: serializers.fhir.Coding.Raw[];
        when?: serializers.fhir.Instant.Raw | null;
        who: serializers.fhir.Reference.Raw;
        onBehalfOf?: serializers.fhir.Reference.Raw | null;
        targetFormat?: serializers.fhir.Code.Raw | null;
        sigFormat?: serializers.fhir.Code.Raw | null;
        data?: serializers.fhir.Base64Binary.Raw | null;
    }
}
