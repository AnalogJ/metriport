/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as MetriportApi from "../../../../api";
import * as core from "../../../../core";

export const TimingRepeat: core.serialization.ObjectSchema<
    serializers.fhir.TimingRepeat.Raw,
    MetriportApi.fhir.TimingRepeat
> = core.serialization.object({
    id: core.serialization.string().optional(),
    extension: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
        .optional(),
    modifierExtension: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../..")).fhir.Extension))
        .optional(),
    boundsDuration: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Duration).optional(),
    boundsRange: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Range).optional(),
    boundsPeriod: core.serialization.lazyObject(async () => (await import("../../..")).fhir.Period).optional(),
    count: core.serialization.lazy(async () => (await import("../../..")).fhir.PositiveInt).optional(),
    countMax: core.serialization.lazy(async () => (await import("../../..")).fhir.PositiveInt).optional(),
    duration: core.serialization.lazy(async () => (await import("../../..")).fhir.Decimal).optional(),
    durationMax: core.serialization.lazy(async () => (await import("../../..")).fhir.Decimal).optional(),
    durationUnit: core.serialization
        .lazy(async () => (await import("../../..")).fhir.TimingRepeatDurationUnit)
        .optional(),
    frequency: core.serialization.lazy(async () => (await import("../../..")).fhir.PositiveInt).optional(),
    frequencyMax: core.serialization.lazy(async () => (await import("../../..")).fhir.PositiveInt).optional(),
    period: core.serialization.lazy(async () => (await import("../../..")).fhir.Decimal).optional(),
    periodMax: core.serialization.lazy(async () => (await import("../../..")).fhir.Decimal).optional(),
    periodUnit: core.serialization.lazy(async () => (await import("../../..")).fhir.TimingRepeatPeriodUnit).optional(),
    dayOfWeek: core.serialization
        .list(core.serialization.lazy(async () => (await import("../../..")).fhir.Code))
        .optional(),
    timeOfDay: core.serialization
        .list(core.serialization.lazy(async () => (await import("../../..")).fhir.Time))
        .optional(),
    when: core.serialization
        .list(core.serialization.lazy(async () => (await import("../../..")).fhir.TimingRepeatWhenItem))
        .optional(),
    offset: core.serialization.lazy(async () => (await import("../../..")).fhir.UnsignedInt).optional(),
});

export declare namespace TimingRepeat {
    interface Raw {
        id?: string | null;
        extension?: serializers.fhir.Extension.Raw[] | null;
        modifierExtension?: serializers.fhir.Extension.Raw[] | null;
        boundsDuration?: serializers.fhir.Duration.Raw | null;
        boundsRange?: serializers.fhir.Range.Raw | null;
        boundsPeriod?: serializers.fhir.Period.Raw | null;
        count?: serializers.fhir.PositiveInt.Raw | null;
        countMax?: serializers.fhir.PositiveInt.Raw | null;
        duration?: serializers.fhir.Decimal.Raw | null;
        durationMax?: serializers.fhir.Decimal.Raw | null;
        durationUnit?: serializers.fhir.TimingRepeatDurationUnit.Raw | null;
        frequency?: serializers.fhir.PositiveInt.Raw | null;
        frequencyMax?: serializers.fhir.PositiveInt.Raw | null;
        period?: serializers.fhir.Decimal.Raw | null;
        periodMax?: serializers.fhir.Decimal.Raw | null;
        periodUnit?: serializers.fhir.TimingRepeatPeriodUnit.Raw | null;
        dayOfWeek?: serializers.fhir.Code.Raw[] | null;
        timeOfDay?: serializers.fhir.Time.Raw[] | null;
        when?: serializers.fhir.TimingRepeatWhenItem.Raw[] | null;
        offset?: serializers.fhir.UnsignedInt.Raw | null;
    }
}
