<serverConfiguration version="4.4.2">
  <date>2023-11-20 16:40:10</date>
  <channelGroups>
    <channelGroup version="4.4.2">
      <id>7a4e6d78-a130-4aa7-9d85-6aa8921c6e65</id>
      <name>CareQuality Document Exchange</name>
      <revision>1</revision>
      <lastModified>
        <time>1700514554944</time>
        <timezone>Etc/UTC</timezone>
      </lastModified>
      <description>CareQuality Query-Based Document Exchange
      </description>
      <channels>
        <channel version="4.4.2">
          <id>f6899f98-6671-44f9-a764-d5f7c1858f02</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>2f3a1187-8950-4a03-bc93-181ff1ecb627</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>3f38affa-7132-4c4d-8597-2679b2651a13</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>574e7271-1b21-4b79-82c3-fead249fc450</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>ed739638-6120-4aee-bcb2-acc661f2b12b</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</id>
          <revision>0</revision>
        </channel>
      </channels>
    </channelGroup>
  </channelGroups>
  <channels>
    <channel version="4.4.2">
      <id>574e7271-1b21-4b79-82c3-fead249fc450</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA DQ Bulk Interface</name>
      <description>XCA ITI-38 Bulk Interface channel&#xd;
 - expects to receive a JSON array containing requests to be transmitted to the XCA ITI-38 Interface channel&#xd;
 - takes individual requests and sends to the XCA ITI-38 Interface channel&#xd;
&#xd;
Comments:&#xd;
 - see example of the request here: https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;

// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Destination is not needed
destinationSet.removeAll();


// Decode and parse incoming JSON request
json = getBase64Content(msg, &apos;json&apos;);


// Validate request
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;
} else {

	// HTTP 202 Accepted - the request is an array of entries and has been accepted for further processing
	if (Array.isArray(json)) {
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
	} else {
		error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
	}
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var	totalCount = 0,
	processedCount = 0;

// Loop through all request entries
if (json) {
	json.forEach(function(entry) {

		totalCount++;
		var errorCount = 0;

		// Check for required parameters
		try {

			if (!entry.hasOwnProperty(&apos;urlXCPD&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDQ&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDR&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			}

		} catch(ex) {errorCount++}

		// Pass to the XCPD Interface channel to process
		if (0 == errorCount) {

			var result = router.routeMessageByChannelId($g(&apos;XCAITI38Interface&apos;), JSON.stringify(entry, null, 2));
// TODO: Verify response and increase processedCount

		} else {
			channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() + &apos; error(s) is/are found in the entries&apos;);
		}
	});
}

// Store for stat
channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());
channelMap.put(&apos;PCOUNT&apos;, processedCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PROCESSED</name>
            <type>STRING</type>
            <mappingName>PCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992134710</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>ed739638-6120-4aee-bcb2-acc661f2b12b</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA DR Bulk Interface</name>
      <description>XCA ITI-39 Bulk Interface channel&#xd;
 - expects to receive a JSON array containing requests to be transmitted to the XCA ITI-39 Interface channel&#xd;
 - takes individual requests and sends to the XCA ITI-39 Interface channel&#xd;
&#xd;
Comments:&#xd;
 - see example of the request here: https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;

// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Destination is not needed
destinationSet.removeAll();


// Decode and parse incoming JSON request
json = getBase64Content(msg, &apos;json&apos;);


// Validate request
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;
} else {

	// HTTP 202 Accepted - the request is an array of entries and has been accepted for further processing
	if (Array.isArray(json)) {
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
	} else {
		error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
	}
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var	totalCount = 0,
	processedCount = 0;

// Loop through all request entries
if (json) {
	json.forEach(function(entry) {

		totalCount++;
		var errorCount = 0;

		// Check for required parameters
		try {

			if (!entry.hasOwnProperty(&apos;urlXCPD&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDQ&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDR&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			}

		} catch(ex) {errorCount++}

		// Pass to the XCPD Interface channel to process
		if (0 == errorCount) {

			var result = router.routeMessageByChannelId($g(&apos;XCAITI39Interface&apos;), JSON.stringify(entry, null, 2));
// TODO: Verify response and increase processedCount

		} else {
			channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() + &apos; error(s) is/are found in the entries&apos;);
		}
	});
}

// Store for stat
channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());
channelMap.put(&apos;PCOUNT&apos;, processedCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PROCESSED</name>
            <type>STRING</type>
            <mappingName>PCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992188709</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA ITI-38 Interface</name>
      <description>XCA ITI-38 Interface channel&#xd;
 - expects to receive a single requests to be transmitted to the XCA ITI-38 [Cross Gateway Query] Processor channel&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Decode and parse incoming JSON request if sent over HTTP
if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
	json = getBase64Content(msg, &apos;json&apos;);
} else try {
	// Parse JSON request if routed from the XCPD Bulk Interface channel
	json = JSON.parse(msg.toString());
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}



// If decoding and parsing the HTTP request fail, it returns an error as a string
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;


} else try {

	// HTTP 202 Accepted - the request is a single entry and has been accepted for further processing
	if (!Array.isArray(json)) {

		// Set HTTP response code and processing statistics
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
		channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
		channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());

	} else {
		error = &apos;ERROR - Incoming feed is an array of entries&apos;;
	}
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD ITI-55 Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>3f38affa-7132-4c4d-8597-2679b2651a13</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Store for the XCPD Bulk Interface
globalMap.put(&apos;XCAITI38Interface&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992511644</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>3f38affa-7132-4c4d-8597-2679b2651a13</id>
      <nextMetaDataId>5</nextMetaDataId>
      <name>XCA ITI-38 Processor</name>
      <description>XCA ITI-38 Processor channel&#xd;
 - Generates ITI-38 &quot;Cross Gateway Query&quot; SOAP message&#xd;
 - Calls XCA endpoint&#xd;
 - Processes responses&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store internal message id
channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());

// Set Responding Gateway endpoint
channelMap.put(&apos;URL&apos;, msg.urlDQ.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var parameterList = new XMLList();

// TODO: Process search parameters</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate SOAP Envelope</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Generate the initial SOAP message
var soap = getSOAPEnvelope(msg.urlDQ.toString(), &apos;urn:ihe:iti:2007:CrossGatewayQuery&apos;);

// Generate AdhocQueryRequest message
var xca = getXCAITI38Request($cfg(&apos;HL7v3.Sender.OID&apos;));

// Add search parameters
msg.appendChild(parameterList);

soap.*::Body.setChildren(xca);
channelMap.put(&apos;SOAP&apos;, soap.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCA Endpoint</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
                <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>false</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
                  <trustedCertificateAliases>
                    <string>emr direct test ca</string>
                    <string>sfd-np.et0121.epichosted.com</string>
                    <string>iheapitest.innovarhealthcare.com</string>
                    <string>emr direct test device subca2</string>
                    <string>maxmd tls rsa eval ca</string>
                    <string>ihe.staging.metriport.com</string>
                  </trustedCertificateAliases>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>aa74a54654aef7ce264451dccfdf60fb31c4e6fd</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI/>
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI/>
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map"/>
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>${URL}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map">
              <entry>
                <string>Content-Type</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
              <entry>
                <string>Accept</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
            </headers>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>true</responseXmlBody>
            <responseParseMultipart>false</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/soap+xml</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${SOAP}</content>
            <contentType>application/soap+xml</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Store the HTTP code only
var http = $(&apos;responseStatusLine&apos;);
http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g, &apos;&apos;);
channelMap.put(&apos;HTTP&apos;, http.toString());


// Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
var xml = null;

var ack= &apos;&apos;,
	queryResponseCode = &apos;&apos;,
	homeCommunityId = null,
	soapFaultCode = null,
	soapReason = null;

try {

	var soap = String(getBase64Body(msg));

	// Store for testing
	channelMap.put(&apos;RESPONSE&apos;, soap.toString());

	// SOAP level error
	if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

		xml = new XML(soap.toString());

		// Case 6: The Initiating Gateway shall accept a SOAP fault representing a transmission error
		soapFaultCode = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Code&apos;].*::[&apos;Value&apos;].toString();
		soapReason = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Reason&apos;].*::[&apos;Text&apos;].toString();

		channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
		channelMap.put(&apos;RESULT&apos;, soapReason);

		return;

	} else {

		// Ignore SOAP header and extract ITI-55 response (the SOAP message may contain extra namespaces)
		xml = soap.substring(soap.indexOf(&apos;Body&apos;), soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) + &apos;PRPA_IN201306UV02&gt;&apos;.length);
		xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);

		// Validate by generating the XML object
		xml = new XML(xml);

		// Acknowledgement code as described in HL7 message processing rules
		// AA - Receiving application successfully processed message
		// AE - Receiving application found error in processing message. Sending error response with additional error detail information
		// AR - Receiving application failed to process message for reason unrelated to content or format
		ack = xml.*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;ACK&apos;, ack.toString());

		// The result status of the query
		// OK - Query reponse data found for 1 or more result sets matching the query request specification
		// NF - No errors, but no data was found matching the query request specification
		// AE - Query or application error
		// QE - Problem with input Parmeters error
		queryResponseCode = xml.*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());

	}

} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 1: One match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching the criteria sent in the query parameters
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned from the patient information source for the patient record found.


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// A globally unique identifier for a community
	if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;) &amp;&amp; xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;)) {
		homeCommunityId = xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();

		// Store for the next channel
		channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
		channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);
	}

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 2: Multiple match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters and the policy allows returning multiple.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned for each patient record found.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters but no matches
// close enough for the necessary assurance level and more attributes might allow the Responding Gateway to return a match.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// No RegistrationEvent is returned in the response, but the Responding Gateway provides a suggestion in terms of demographics that may help identify a match.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 4: No match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to matching the criteria sent in the query parameters.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// NF (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; == queryResponseCode.toString()) try {

	// TODO: Define additional processing logic here

	channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 5: Application error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request.
// This may be because the request came synchronously and an asynchronous request may be feasible, or because the Responding Gateway is overloaded
// with other requests and does not expect to answer for a significant period of time.
// It may also be that the Responding Gateway may need some manual configuration update to authorize responder or another error occurred while
// the Responding Gateway was processing the message payload.
// AE (application error) is returned in Acknowledgement.typeCode (transmission wrapper).
// AE (application error) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.

if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 || [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try {

	var reason = &apos;&apos;;
	for each (var trigger in xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;]) {
		reason += trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString() + &apos; &apos;;
	}

	channelMap.put(&apos;RESULT&apos;, reason.toString().trim());

	// Stop further processing
	return;

} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>Q_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992778439</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA ITI-39 Interface</name>
      <description>XCA ITI-39 Interface channel&#xd;
 - expects to receive a single requests to be transmitted to the XCA ITI-39 [Cross Gateway Retrieve] Processor channel&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadr</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Decode and parse incoming JSON request if sent over HTTP
if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
	json = getBase64Content(msg, &apos;json&apos;);
} else try {
	// Parse JSON request if routed from the XCPD Bulk Interface channel
	json = JSON.parse(msg.toString());
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}



// If decoding and parsing the HTTP request fail, it returns an error as a string
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;


} else try {

	// HTTP 202 Accepted - the request is a single entry and has been accepted for further processing
	if (!Array.isArray(json)) {

		// Set HTTP response code and processing statistics
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
		channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
		channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());

	} else {
		error = &apos;ERROR - Incoming feed is an array of entries&apos;;
	}
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD ITI-55 Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Store for the XCPD Bulk Interface
globalMap.put(&apos;XCAITI39Interface&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992521467</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</id>
      <nextMetaDataId>5</nextMetaDataId>
      <name>XCA ITI-39 Processor</name>
      <description>XCA ITI-39 Processor channel&#xd;
 - Generates ITI-38 &quot;Cross Gateway Retrieve&quot; SOAP message&#xd;
 - Calls XCA endpoint&#xd;
 - Processes responses&#xd;
&#xd;
Last updated: Nov 14 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store internal message id
channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());

// Set Responding Gateway endpoint
channelMap.put(&apos;URL&apos;, msg.urlDQ.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>// Check for the FHIR Patient resource in the incoming message
if (!msg.hasOwnProperty(&apos;patientResource&apos;)) throw &apos;ERROR - The required FHIR Patient resource is missing. The processing has been stopped.&apos;;

// The query parameters below are constrained in the PRPA_MT201306IHEPCD [Patient Registry Query By Demographics] message
// The order follows that of the PRPA_MT201306UV02 [Patient Registry Query By Demographics] message

/*
To ensure the XML is valid, parameters must be in the following order:
	livingSubjectAdministrativeGender
	livingSubjectBirthPlaceAddress
	livingSubjectBirthPlaceName
	livingSubjectBirthTime
	livingSubjectDeceasedTime	-- Not used in XCPD ITI-55 query
	livingSubjectId
	livingSubjectName
	mothersMaidenName
	otherIDsScopingOrganization	-- Not used in XCPD ITI-55 query
	patientAddress
	patientStatusCode			-- Not used in XCPD ITI-55 query
	patientTelecom
	principalCareProviderId
	principalCareProvisionId		-- Not used in XCPD ITI-55 query
*/

var patient = msg.patientResource;
var parameterList = new XMLList();

// Values from extensions
var	birthPlaceAddress = null,
	birthDateTime = null,
	mothersMaidenName = null;

if (patient.hasOwnProperty(&apos;extension&apos;)) {
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-birthPlace&apos; == entry.url.toString();});
		birthPlaceAddress = patient.extension[i].valueAddress;
	} catch(ex) {}
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-birthTime&apos; == entry.url.toString();});
		birthDateTime = patient.extension[i].valueDateTime.toString();
	} catch(ex) {}
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName&apos; == entry.url.toString();});
		mothersMaidenName = patient.extension[i].valueString.toString();
	} catch(ex) {}
}

// This query parameter is a code representing the administrative gender of a living subject in a patient registry
// livingSubjectAdministrativeGender [0..1], value [1..1]
if (patient.hasOwnProperty(&apos;gender&apos;)) {
	var gender = getLivingSubjectAdministrativeGender(patient);
	if (gender) parameterList += gender;
}


// This query parameter is a patient&apos;s birthplace represented as an address
// livingSubjectBirthPlaceAddress [0..1], value [1..*]
if (birthPlaceAddress) {
	var address = getLivingSubjectBirthPlaceAddress(birthPlaceAddress);
	if (address) parameterList += address;
}


// This query parameter is a patient&apos;s birthplace represented as a place name
// livingSubjectBirthPlaceName [0..1], value [1..*]
var birthPlace = getLivingSubjectBirthPlaceName(patient);
if (birthPlace) parameterList += birthPlace;


// This query parameter is the birth date of a living subject
// livingSubjectBirthTime [0..1], value [1..1]
var birthTime = null;
if (birthDateTime) {
	birthTime = getLivingSubjectBirthTime(birthDateTime);
} else if (patient.hasOwnProperty(&apos;birthDate&apos;)) {
	birthTime = getLivingSubjectBirthTime(patient.birthDate.toString());
}
if (birthTime) parameterList += birthTime;


// This query parameter is an identifier for a living subject.
// This is NOT the identifier assigned by the target registry.
// In fact, the identifier has no context (scoping organization) other than the namespace from which the identifier was issued (OID root).
// livingSubjectId [0..*], value [1..*]
var patientID = getLivingSubjectId(patient);
if (patientID) parameterList += patientID;


// This query parameter is the name of a living subject.
// If multiple instances of LivingSubjectName are provided, the receiver must consider them as possible alternatives, logically connected with an &quot;or&quot;.
// livingSubjectName [0..*], value [1..1]
if (patient.hasOwnProperty(&apos;name&apos;)) {
	patient.name.forEach(function(entry) {
		var name = getLivingSubjectName(entry);
		if (name) parameterList += name;
	});
}


// This query parameter is the maiden name of a focal person&apos;s mother.
// It is included as a parameter because it is a common attribute for confirming the identity of persons in some registries.
// mothersMaidenName [0..*], value [1..1]
if (mothersMaidenName) {
	var mMaidenName = getMothersMaidenName(mothersMaidenName);
	if (mMaidenName) parameterList += mMaidenName;
}


// This query parameter is a postal address for corresponding with a living subject in the context of the target patient registry.
// There shall be only a single PatientAddress element.
// Multiple instances of the value element within a Patient Address may be specified and are combined with OR logic.
// patientAddress [0..1], value [1..*]
if (patient.hasOwnProperty(&apos;address&apos;)) {
	var address = getPatientAddress(patient.address);
	if (address) parameterList += address;
}


// This query parameter is a telecommunications address for communicating with a living subject in the context of the target patient registry.
// It could be a telephone number, fax number or even an email address. There shall be only a single PatientTelecom element.
// Multiple instances of the value element within a PatientTelecom may be specified and are combined with OR logic.
// patientTelecom [0..*] getPatientTelecom()
if (patient.hasOwnProperty(&apos;telecom&apos;)) {
	var telecom = getPatientTelecom(patient.telecom);
	if (telecom) parameterList += telecom;
}


// This query parameter is the care provider identifier of a person who has been assigned as the principal care provider of this patient.
// The requestor may specify multiple PrincipalCareProviderId elements which responder shall consider as possible alternatives, logically connected with an &quot;or&quot;.
// principalCareProviderId [0..*], value [1..1]
if (msg.hasOwnProperty(&apos;principalCareProviderIds&apos;)) {
	msg.principalCareProviderIds.forEach(function(id) {
		var provider = getPrincipalCareProviderId(id);
		if (provider) parameterList += provider;
	});
}


// ========== Following parameters are present in PRPA_MT201306UV02 but not used in PRPA_MT201306IHEPCD ==========
// This query parameter is the death date of a living subject. It is used to find patients who have died on a known date or within a date interval
// livingSubjectDeceasedTime [0..*]

// This query parameter is another organization that has registered the focal patient in its registry.
// It is used to find living subjects who have been registered by a particular organization.
// otherIDsScopingOrganization [0..*]

// This query parameter is the status of a record in the target patient registry.
// It is used to find records in a particular state such as &quot;active&quot; or &quot;completed&quot;.
// patientStatusCode [0..*]

// This query parameter is the identifier the explicit acceptance for some aspect of a patient&apos;s care by a health care provider.
// This identifies a Care Provision act.
// principalCareProvisionId [0..*]</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate SOAP Envelope</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Generate the initial SOAP message
var soap = getSOAPEnvelope(msg.urlDQ.toString(), &apos;urn:ihe:iti:2007:CrossGatewayQuery&apos;);

// Generate PRPA_IN201305UV02 [Patient Registry Find Candidates Query] message
var receiver = getHL7v3Receiver(msg.gatewayOID.toString(), msg.urlXCPD.toString());
var sender = getHL7v3Sender($cfg(&apos;HL7v3.Sender.OID&apos;), $cfg(&apos;HL7v3.Sender.Name&apos;));
var xca = getXCARequest($cfg(&apos;HL7v3.Sender.OID&apos;), receiver, sender);


// Set HL7v3 namespace
default xml namespace = &quot;urn:hl7-org:v3&quot;;
xca = new XML(xca.toString());

soap.*::Body.setChildren(xca);
channelMap.put(&apos;SOAP&apos;, soap.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCA Endpoint</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
                <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>false</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
                  <trustedCertificateAliases>
                    <string>emr direct test ca</string>
                    <string>sfd-np.et0121.epichosted.com</string>
                    <string>iheapitest.innovarhealthcare.com</string>
                    <string>emr direct test device subca2</string>
                    <string>maxmd tls rsa eval ca</string>
                    <string>ihe.staging.metriport.com</string>
                  </trustedCertificateAliases>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>aa74a54654aef7ce264451dccfdf60fb31c4e6fd</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI/>
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI/>
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map"/>
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>${URL}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map">
              <entry>
                <string>Content-Type</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
              <entry>
                <string>Accept</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
            </headers>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>true</responseXmlBody>
            <responseParseMultipart>false</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/soap+xml</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${SOAP}</content>
            <contentType>application/soap+xml</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Store the HTTP code only
var http = $(&apos;responseStatusLine&apos;);
http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g, &apos;&apos;);
channelMap.put(&apos;HTTP&apos;, http.toString());


// Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
var xml = null;

var ack= &apos;&apos;,
	queryResponseCode = &apos;&apos;,
	homeCommunityId = null,
	soapFaultCode = null,
	soapReason = null;

try {

	var soap = String(getBase64Body(msg));

	// Store for testing
	channelMap.put(&apos;RESPONSE&apos;, soap.toString());

	// SOAP level error
	if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

		xml = new XML(soap.toString());

		// Case 6: The Initiating Gateway shall accept a SOAP fault representing a transmission error
		soapFaultCode = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Code&apos;].*::[&apos;Value&apos;].toString();
		soapReason = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Reason&apos;].*::[&apos;Text&apos;].toString();

		channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
		channelMap.put(&apos;RESULT&apos;, soapReason);

		return;

	} else {

		// Ignore SOAP header and extract ITI-55 response (the SOAP message may contain extra namespaces)
		xml = soap.substring(soap.indexOf(&apos;Body&apos;), soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) + &apos;PRPA_IN201306UV02&gt;&apos;.length);
		xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);

		// Validate by generating the XML object
		xml = new XML(xml);

		// Acknowledgement code as described in HL7 message processing rules
		// AA - Receiving application successfully processed message
		// AE - Receiving application found error in processing message. Sending error response with additional error detail information
		// AR - Receiving application failed to process message for reason unrelated to content or format
		ack = xml.*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;ACK&apos;, ack.toString());

		// The result status of the query
		// OK - Query reponse data found for 1 or more result sets matching the query request specification
		// NF - No errors, but no data was found matching the query request specification
		// AE - Query or application error
		// QE - Problem with input Parmeters error
		queryResponseCode = xml.*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());

	}

} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 1: One match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching the criteria sent in the query parameters
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned from the patient information source for the patient record found.


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// A globally unique identifier for a community
	if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;) &amp;&amp; xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;)) {
		homeCommunityId = xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();

		// Store for the next channel
		channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
		channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);
	}

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 2: Multiple match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters and the policy allows returning multiple.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned for each patient record found.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters but no matches
// close enough for the necessary assurance level and more attributes might allow the Responding Gateway to return a match.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// No RegistrationEvent is returned in the response, but the Responding Gateway provides a suggestion in terms of demographics that may help identify a match.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 4: No match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to matching the criteria sent in the query parameters.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// NF (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; == queryResponseCode.toString()) try {

	// TODO: Define additional processing logic here

	channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 5: Application error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request.
// This may be because the request came synchronously and an asynchronous request may be feasible, or because the Responding Gateway is overloaded
// with other requests and does not expect to answer for a significant period of time.
// It may also be that the Responding Gateway may need some manual configuration update to authorize responder or another error occurred while
// the Responding Gateway was processing the message payload.
// AE (application error) is returned in Acknowledgement.typeCode (transmission wrapper).
// AE (application error) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.

if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 || [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try {

	var reason = &apos;&apos;;
	for each (var trigger in xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;]) {
		reason += trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString() + &apos; &apos;;
	}

	channelMap.put(&apos;RESULT&apos;, reason.toString().trim());

	// Stop further processing
	return;

} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>Q_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992395659</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>f6899f98-6671-44f9-a764-d5f7c1858f02</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCPD Bulk Interface</name>
      <description>XCPD Bulk Interface channel&#xd;
 - expects to receive a JSON array containing requests to be transmitted to the XCPD Interface channel&#xd;
 - takes individual requests and sends to the XCPD Interface channel&#xd;
&#xd;
Comments:&#xd;
 - see example of the request here: https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
&#xd;
TODO: Verify response and increase processedCount&#xd;
&#xd;
Last updated: Nov 08 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcpd</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;

// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Destination is not needed
destinationSet.removeAll();


// Decode and parse incoming JSON request
json = getBase64Content(msg, &apos;json&apos;);


// Validate request
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;
} else {

	// HTTP 202 Accepted - the request is an array of entries and has been accepted for further processing
	if (Array.isArray(json)) {
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
	} else {
		error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
	}
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var	totalCount = 0,
	processedCount = 0;

// Loop through all request entries
if (json) {
	json.forEach(function(entry) {

		totalCount++;
		var errorCount = 0;

		// Check for required parameters
		try {

			if (!entry.hasOwnProperty(&apos;urlXCPD&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDQ&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			} else if (!entry.hasOwnProperty(&apos;urlDR&apos;) || 0 == entry.urlXCPD.toString().length) {
				errorCount++
			}

		} catch(ex) {errorCount++}

		// Pass to the XCPD Interface channel to process
		if (0 == errorCount) {

			var result = router.routeMessageByChannelId(globalMap.get(&apos;XCPDInterface&apos;), JSON.stringify(entry, null, 2));
// TODO: Verify response and increase processedCount

		} else {
			channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() + &apos; error(s) is/are found in the entries&apos;);
		}
	});
}

// Store for stat
channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());
channelMap.put(&apos;PCOUNT&apos;, processedCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PROCESSED</name>
            <type>STRING</type>
            <mappingName>PCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699484816810</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</id>
      <nextMetaDataId>4</nextMetaDataId>
      <name>XCPD ITI-55 Processor</name>
      <description>XCPD ITI-55 Processor channel&#xd;
 - Generates ITI-55 &quot;Cross Gateway Patient Discovery&quot; SOAP message&#xd;
 - Calls XCPD endpoint&#xd;
 - Processes responses&#xd;
&#xd;
Last updated: Nov 10 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties/>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store internal message id
channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());

// Set Responding Gateway endpoint
channelMap.put(&apos;URL&apos;, msg.urlXCPD.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>// Check for the FHIR Patient resource in the incoming message
if (!msg.hasOwnProperty(&apos;patientResource&apos;)) throw &apos;ERROR - The required FHIR Patient resource is missing. The processing has been stopped.&apos;;

// The query parameters below are constrained in the PRPA_MT201306IHEPCD [Patient Registry Query By Demographics] message
// The order follows that of the PRPA_MT201306UV02 [Patient Registry Query By Demographics] message

/*
To ensure the XML is valid, parameters must be in the following order:
	livingSubjectAdministrativeGender
	livingSubjectBirthPlaceAddress
	livingSubjectBirthPlaceName
	livingSubjectBirthTime
	livingSubjectDeceasedTime	-- Not used in XCPD ITI-55 query
	livingSubjectId
	livingSubjectName
	mothersMaidenName
	otherIDsScopingOrganization	-- Not used in XCPD ITI-55 query
	patientAddress
	patientStatusCode			-- Not used in XCPD ITI-55 query
	patientTelecom
	principalCareProviderId
	principalCareProvisionId		-- Not used in XCPD ITI-55 query
*/

var patient = msg.patientResource;
var parameterList = new XMLList();

// Values from extensions
var	birthPlaceAddress = null,
	birthDateTime = null,
	mothersMaidenName = null;

if (patient.hasOwnProperty(&apos;extension&apos;)) {
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-birthPlace&apos; == entry.url.toString();});
		birthPlaceAddress = patient.extension[i].valueAddress;
	} catch(ex) {}
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-birthTime&apos; == entry.url.toString();});
		birthDateTime = patient.extension[i].valueDateTime.toString();
	} catch(ex) {}
	try {
		var i = patient.extension.findIndex(function(entry) {return &apos;http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName&apos; == entry.url.toString();});
		mothersMaidenName = patient.extension[i].valueString.toString();
	} catch(ex) {}
}

// This query parameter is a code representing the administrative gender of a living subject in a patient registry
// livingSubjectAdministrativeGender [0..1], value [1..1]
if (patient.hasOwnProperty(&apos;gender&apos;)) {
	var gender = getLivingSubjectAdministrativeGender(patient);
	if (gender) parameterList += gender;
}


// This query parameter is a patient&apos;s birthplace represented as an address
// livingSubjectBirthPlaceAddress [0..1], value [1..*]
if (birthPlaceAddress) {
	var address = getLivingSubjectBirthPlaceAddress(birthPlaceAddress);
	if (address) parameterList += address;
}


// This query parameter is a patient&apos;s birthplace represented as a place name
// livingSubjectBirthPlaceName [0..1], value [1..*]
var birthPlace = getLivingSubjectBirthPlaceName(patient);
if (birthPlace) parameterList += birthPlace;


// This query parameter is the birth date of a living subject
// livingSubjectBirthTime [0..1], value [1..1]
var birthTime = null;
if (birthDateTime) {
	birthTime = getLivingSubjectBirthTime(birthDateTime);
} else if (patient.hasOwnProperty(&apos;birthDate&apos;)) {
	birthTime = getLivingSubjectBirthTime(patient.birthDate.toString());
}
if (birthTime) parameterList += birthTime;


// This query parameter is an identifier for a living subject.
// This is NOT the identifier assigned by the target registry.
// In fact, the identifier has no context (scoping organization) other than the namespace from which the identifier was issued (OID root).
// livingSubjectId [0..*], value [1..*]
var patientID = getLivingSubjectId(patient);
if (patientID) parameterList += patientID;


// This query parameter is the name of a living subject.
// If multiple instances of LivingSubjectName are provided, the receiver must consider them as possible alternatives, logically connected with an &quot;or&quot;.
// livingSubjectName [0..*], value [1..1]
if (patient.hasOwnProperty(&apos;name&apos;)) {
	patient.name.forEach(function(entry) {
		var name = getLivingSubjectName(entry);
		if (name) parameterList += name;
	});
}


// This query parameter is the maiden name of a focal person&apos;s mother.
// It is included as a parameter because it is a common attribute for confirming the identity of persons in some registries.
// mothersMaidenName [0..*], value [1..1]
if (mothersMaidenName) {
	var mMaidenName = getMothersMaidenName(mothersMaidenName);
	if (mMaidenName) parameterList += mMaidenName;
}


// This query parameter is a postal address for corresponding with a living subject in the context of the target patient registry.
// There shall be only a single PatientAddress element.
// Multiple instances of the value element within a Patient Address may be specified and are combined with OR logic.
// patientAddress [0..1], value [1..*]
if (patient.hasOwnProperty(&apos;address&apos;)) {
	var address = getPatientAddress(patient.address);
	if (address) parameterList += address;
}


// This query parameter is a telecommunications address for communicating with a living subject in the context of the target patient registry.
// It could be a telephone number, fax number or even an email address. There shall be only a single PatientTelecom element.
// Multiple instances of the value element within a PatientTelecom may be specified and are combined with OR logic.
// patientTelecom [0..*] getPatientTelecom()
if (patient.hasOwnProperty(&apos;telecom&apos;)) {
	var telecom = getPatientTelecom(patient.telecom);
	if (telecom) parameterList += telecom;
}


// This query parameter is the care provider identifier of a person who has been assigned as the principal care provider of this patient.
// The requestor may specify multiple PrincipalCareProviderId elements which responder shall consider as possible alternatives, logically connected with an &quot;or&quot;.
// principalCareProviderId [0..*], value [1..1]
if (msg.hasOwnProperty(&apos;principalCareProviderIds&apos;)) {
	msg.principalCareProviderIds.forEach(function(id) {
		var provider = getPrincipalCareProviderId(id);
		if (provider) parameterList += provider;
	});
}


// ========== Following parameters are present in PRPA_MT201306UV02 but not used in PRPA_MT201306IHEPCD ==========
// This query parameter is the death date of a living subject. It is used to find patients who have died on a known date or within a date interval
// livingSubjectDeceasedTime [0..*]

// This query parameter is another organization that has registered the focal patient in its registry.
// It is used to find living subjects who have been registered by a particular organization.
// otherIDsScopingOrganization [0..*]

// This query parameter is the status of a record in the target patient registry.
// It is used to find records in a particular state such as &quot;active&quot; or &quot;completed&quot;.
// patientStatusCode [0..*]

// This query parameter is the identifier the explicit acceptance for some aspect of a patient&apos;s care by a health care provider.
// This identifies a Care Provision act.
// principalCareProvisionId [0..*]</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate SOAP Envelope</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Generate the initial SOAP message
var soap = getSOAPEnvelope(msg.urlXCPD.toString(), &apos;urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery&apos;);

// Generate PRPA_IN201305UV02 [Patient Registry Find Candidates Query] message
var receiver = getHL7v3Receiver(msg.gatewayOID.toString(), msg.urlXCPD.toString());
var sender = getHL7v3Sender($cfg(&apos;HL7v3.Sender.OID&apos;), $cfg(&apos;HL7v3.Sender.Name&apos;));
var xcpd = getXCPDRequest($cfg(&apos;HL7v3.Sender.OID&apos;), receiver, sender);
xcpd[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;].setChildren(parameterList);

// Set HL7v3 namespace
default xml namespace = &quot;urn:hl7-org:v3&quot;;
xcpd = new XML(xcpd.toString());

soap.*::Body.setChildren(xcpd);
channelMap.put(&apos;SOAP&apos;, soap.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD Endpoint</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
                <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>false</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
                  <trustedCertificateAliases>
                    <string>emr direct test ca</string>
                    <string>sfd-np.et0121.epichosted.com</string>
                    <string>iheapitest.innovarhealthcare.com</string>
                    <string>emr direct test device subca2</string>
                    <string>maxmd tls rsa eval ca</string>
                    <string>ihe.staging.metriport.com</string>
                  </trustedCertificateAliases>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>aa74a54654aef7ce264451dccfdf60fb31c4e6fd</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI/>
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI/>
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map"/>
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>${URL}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map">
              <entry>
                <string>Content-Type</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
              <entry>
                <string>Accept</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
            </headers>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>true</responseXmlBody>
            <responseParseMultipart>false</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/soap+xml</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${SOAP}</content>
            <contentType>application/soap+xml</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Store the HTTP code only
var http = $(&apos;responseStatusLine&apos;);
http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g, &apos;&apos;);
channelMap.put(&apos;HTTP&apos;, http.toString());


// Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
var xml = null;

var ack= &apos;&apos;,
	queryResponseCode = &apos;&apos;,
	homeCommunityId = null,
	soapFaultCode = null,
	soapReason = null;

try {

	var soap = String(getBase64Body(msg));

	// Store for testing
	channelMap.put(&apos;RESPONSE&apos;, soap.toString());

	// SOAP level error
	if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

		xml = new XML(soap.toString());

		// Case 6: The Initiating Gateway shall accept a SOAP fault representing a transmission error
		soapFaultCode = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Code&apos;].*::[&apos;Value&apos;].toString();
		soapReason = xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Reason&apos;].*::[&apos;Text&apos;].toString();

		channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
		channelMap.put(&apos;RESULT&apos;, soapReason);

		return;

	} else {

		// Ignore SOAP header and extract ITI-55 response (the SOAP message may contain extra namespaces)
		xml = soap.substring(soap.indexOf(&apos;Body&apos;), soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) + &apos;PRPA_IN201306UV02&gt;&apos;.length);
		xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);

		// Validate by generating the XML object
		xml = new XML(xml);

		// Acknowledgement code as described in HL7 message processing rules
		// AA - Receiving application successfully processed message
		// AE - Receiving application found error in processing message. Sending error response with additional error detail information
		// AR - Receiving application failed to process message for reason unrelated to content or format
		ack = xml.*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;ACK&apos;, ack.toString());

		// The result status of the query
		// OK - Query reponse data found for 1 or more result sets matching the query request specification
		// NF - No errors, but no data was found matching the query request specification
		// AE - Query or application error
		// QE - Problem with input Parmeters error
		queryResponseCode = xml.*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());

	}

} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 1: One match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching the criteria sent in the query parameters
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned from the patient information source for the patient record found.


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// A globally unique identifier for a community
	if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;) &amp;&amp; xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;)) {
		homeCommunityId = xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();

		// Store for the next channel
		channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
		channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);
	}

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 2: Multiple match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters and the policy allows returning multiple.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// One RegistrationEvent (and the associated Patient role, subject of that event) is returned for each patient record found.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to matching the criteria sent in the query parameters but no matches
// close enough for the necessary assurance level and more attributes might allow the Responding Gateway to return a match.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// OK (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// No RegistrationEvent is returned in the response, but the Responding Gateway provides a suggestion in terms of demographics that may help identify a match.

if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; == queryResponseCode.toString()) try {

	// TODO: Sample needed

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 4: No match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to matching the criteria sent in the query parameters.
// AA (application accept) is returned in Acknowledgement.typeCode (transmission wrapper).
// NF (data found, no errors) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.


if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; == queryResponseCode.toString()) try {

	// TODO: Define additional processing logic here

	channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);

	// Stop further processing
	return;
} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 5: Application error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request.
// This may be because the request came synchronously and an asynchronous request may be feasible, or because the Responding Gateway is overloaded
// with other requests and does not expect to answer for a significant period of time.
// It may also be that the Responding Gateway may need some manual configuration update to authorize responder or another error occurred while
// the Responding Gateway was processing the message payload.
// AE (application error) is returned in Acknowledgement.typeCode (transmission wrapper).
// AE (application error) is returned in QueryAck.queryResponseCode (control act wrapper)
// There is no RegistrationEvent returned in the response.

if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 || [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try {

	var reason = &apos;&apos;;
	for each (var trigger in xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;]) {
		reason += trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString() + &apos; &apos;;
	}

	channelMap.put(&apos;RESULT&apos;, reason.toString().trim());

	// Stop further processing
	return;

} catch(ex) {
	channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>Q_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699651920973</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>2f3a1187-8950-4a03-bc93-181ff1ecb627</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCPD Interface</name>
      <description>XCPD Interface channel&#xd;
 - expects to receive a single requests to be transmitted to the XCPD ITI-55 Processor channel&#xd;
&#xd;
Last updated: Nov 06 2023</description>
      <revision>4</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases/>
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias/>
              <ocspEnabled>false</ocspEnabled>
              <ocspURI/>
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI/>
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map"/>
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcpd</contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


// HTTP 400 Bad Request - by default, the server cannot or will not process the request
channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


// Decode and parse incoming JSON request if sent over HTTP
if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
	json = getBase64Content(msg, &apos;json&apos;);
} else try {
	// Parse JSON request if routed from the XCPD Bulk Interface channel
	json = JSON.parse(msg.toString());
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}



// If decoding and parsing the HTTP request fail, it returns an error as a string
if (&apos;string&apos; == typeof json) {
	error = &apos;ERROR - &apos; + ex;


} else try {

	// HTTP 202 Accepted - the request is a single entry and has been accepted for further processing
	if (!Array.isArray(json)) {

		// Set HTTP response code and processing statistics
		channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
		channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
		channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());

	} else {
		error = &apos;ERROR - Incoming feed is an array of entries&apos;;
	}
} catch(ex) {
	error = &apos;ERROR - &apos; + ex;
}


// Cease processing in case of an error
if (error) {
	channelMap.put(&apos;NOTE&apos;, error);
	throw error;
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD ITI-55 Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties/>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Store for the XCPD Bulk Interface
globalMap.put(&apos;XCPDInterface&apos;, channelId);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699651914790</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
  </channels>
  <channelTags/>
  <alerts/>
  <codeTemplateLibraries/>
  <serverSettings>
    <clearGlobalMap>true</clearGlobalMap>
    <queueBufferSize>1000</queueBufferSize>
    <defaultMetaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </defaultMetaDataColumns>
    <defaultAdministratorBackgroundColor>
      <red>158</red>
      <green>177</green>
      <blue>201</blue>
      <alpha>255</alpha>
    </defaultAdministratorBackgroundColor>
    <smtpTimeout>5000</smtpTimeout>
    <smtpSecure>0</smtpSecure>
    <smtpAuth>false</smtpAuth>
    <loginNotificationEnabled>false</loginNotificationEnabled>
    <loginNotificationMessage></loginNotificationMessage>
    <administratorAutoLogoutIntervalEnabled>false</administratorAutoLogoutIntervalEnabled>
    <administratorAutoLogoutIntervalField>5</administratorAutoLogoutIntervalField>
  </serverSettings>
  <updateSettings version="4.4.2">
    <statsEnabled>true</statsEnabled>
    <lastStatsTime>1700493989023</lastStatsTime>
  </updateSettings>
  <globalScripts>
    <entry>
      <string>Undeploy</string>
      <string>// This script executes once for each deploy, undeploy, or redeploy task
// if at least one channel was undeployed
// You only have access to the globalMap here to persist data
return;</string>
    </entry>
    <entry>
      <string>Postprocessor</string>
      <string>// This script executes once after a message has been processed
// This script applies across all channels
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
// You have access to &quot;response&quot;, if returned from the channel postprocessor
return;</string>
    </entry>
    <entry>
      <string>Deploy</string>
      <string>// This script executes once for each deploy or redeploy task
// You only have access to the globalMap here to persist data
return;</string>
    </entry>
    <entry>
      <string>Preprocessor</string>
      <string>// Modify the message variable below to pre process data
// This script applies across all channels
return message;</string>
    </entry>
  </globalScripts>
  <pluginProperties>
    <entry>
      <string>SSL Manager</string>
      <properties>
        <property name="KeyStore">/u3+7QAAAAIAAAABAAAAAQAoYWE3NGE1NDY1NGFlZjdjZTI2NDQ1MWRjY2ZkZjYwZmIzMWM0ZTZm&#xd; ZAAAAYvurR1xAAAFAjCCBP4wDgYKKwYBBAEqAhEBAQUABIIE6pYvts3dy8jZO6UYDo6gJnUJFJKW&#xd; 7+N8mcvNCapSYMIVRsTIQ6pKZbwsJ9vCMP3Fqe0aBiN2F/poI+NKu+lMUaZOBpz7ofiqMhq7Hdb2&#xd; Y45GFtllTtRA/WsS5KeY8k1/pGT4xPydkLL5cE9u6sz8SPJ84pkrVt4Yf1d8ewxNtdxT6h9T/8UL&#xd; AOyuJHKJw5TZBJ3NS3E2/u5Ncx5br+rmhfQ0CIvVGZK4+wOZPddL0ZNHPqcSoOwqSHIH9js6Z/oQ&#xd; s5G+1MDbAksDuS7kq0sNpjRbaq6mwMtgcmfpE4Pjj0PTElt6JZw1ywe4WtxNWlDJBwImY/1K71Qs&#xd; 84+RreoRaXw18Pnoek4JKDdPgMluv386V3KNFhAdE0JHMAbLL+5W34uvzDN8YK7Gx1sIs/9ziAh+&#xd; JsU9O9/JUU+Qyhh1Vpxfo+7kisQhN4VdozHwd9N7JJwMmGorBzkpD6Yp9XxODdr8H1TdjTI7uT47&#xd; ZRvi8JSP85gujsBD6cO0k4kl3IwohL9FAGjYGG4JfoKAmEOGZUx5atv6RheDLMf6HXuEG5Mf0B4d&#xd; nfz7ly19U8eTRe3v4FzZIq0N9C+ADUs3ZsLg2WLokPDrVIg7J0cr6rpnB+V0B8lH/rbOV3vldQx4&#xd; POftS7wOkA+9rPVArZHoGbH/A1A2rY6GNn7VRb3uzAFUb5vzAfDyj0G4wU79D0Ad6djru5J5A42Y&#xd; K7Z7F9OLpEYZANSZuPhbIa7nOPto2ekfgJMzkgRJL5zONsOMrt2hoc9QCzaty4oRGidlOkVGxVT7&#xd; 5QNqyvv04cJDEhwLGAfXFUShflOT1+5mkYEpTQhs+E/JuVXseqpQMu0m03kosLZzh3Dt3dQH4nW3&#xd; SH3KuHv8IuGzBoLwphOKKWUb4kxcGvc8uB1+Sfisoj1hCXRITDSdU0OsVH6xHwqFYET7smf8N1Hv&#xd; DLn7FQPu/DMOJEGiG0LFbHdNU6/eOABtMD/7oBADzmzQZLW3LT0FkUdHweLZm39hXQURjUP/lMDz&#xd; /lgWgchPfr1s0cHdIlaa+mUeaQYFvEEBxObq14Qyrq+AxTwqL7THUD4IScCrzV7/mQzLHUjac91S&#xd; 4udA1o8mC41YsVFAEVH73fYRkKvQ1Tgt8EIzW8UtYTFe7R+hdX5Jh0akvnHaSRQEGOEtNiT38gbl&#xd; EfkpwjQZzpZ5vFKPFtl7Ncygj1xYzfMXpgJ/u01wpJOqUnW5jj/EBrnd4L2JbOHBBdklKGSfd+5o&#xd; LN1kPgcIrIOYsJsQvspEJ6Axy5+h5FwFDjjKXm1i3v6qOEKgFfLee9xY2i5DCGBTsGQygo6PsK+2&#xd; NykAZqnXomrnlKd5vw4U9jLOo95B4DWDzKaRkHBMqNxkTaOje7YaaZPtQ8DBdlrqOakEMgD8KkF9&#xd; wo3cDZOFoGz0BYQfvDwx98dqebNTMfKNkGy5jUnBF3hIK8FloLDvN2lh+Tehh3q5LeMUX6U+Wtd1&#xd; w8cv1TOF8lLYK7dzATnAw7Jsy17DecqK5NI+kh4n0/00uVcJ6A4yLzs5SxFQXa05wINKLBKjAfiF&#xd; Q3FJj9us5FU7qY36SWTTquhZtO2Izwvjool81poj0dkynu5nkDexlclzFw8AtlP1n89HO2pHEyfd&#xd; 9pKq3Mnein5143N6sWnhj02oq9+Dhj6lbcpTIwyfM7fYYxdlk83JRrkAAAABAAVYLjUwOQAABSAw&#xd; ggUcMIIEBKADAgECAghRt2veBKZ6HzANBgkqhkiG9w0BAQsFADCBqzELMAkGA1UEBhMCVVMxEzAR&#xd; BgNVBAgMCkNhbGlmb3JuaWExEjAQBgNVBAcMCVNhbiBEaWVnbzETMBEGA1UECgwKRU1SIERpcmVj&#xd; dDE2MDQGA1UECwwtQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKGNlcnRzLmVtcmRpcmVjdC5jb20p&#xd; MSYwJAYDVQQDDB1FTVIgRGlyZWN0IFRlc3QgRGV2aWNlIFN1YkNBMjAeFw0yMzExMDIyMTI1NDJa&#xd; Fw0yNDExMDIyMTI1NDJaMHoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRcwFQYD&#xd; VQQKDA5NZXRyaXBvcnQgSW5jLjEZMBcGA1UECwwQQ0FSRVFVQUxJVFktVEVTVDEiMCAGA1UEAwwZ&#xd; aWhlLnN0YWdpbmcubWV0cmlwb3J0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB&#xd; AOLTmu5aAj4F5314yidZPsFp2/RHWdy1dydQnzuyoOK/9VAxLMoNMzVvw+yqYGSIvW+GFnNmAuy8&#xd; wzZ5NXeLAe+u63TJNHCL+MrH6VzlchhVxeEc6GXBsQVN2YW6icm47bpw65rwPDR8pg+Af289vLCF&#xd; UbSQ1dB/4OCO4wzcgpeiFHkCSlEwWvdFA3SYMRZzA9D5rsYwONIp442e9OxrgPkrYIANJBgiH4UB&#xd; FZ9YO4i9zvM6PWKdMt0JFrQYK8Tk5yP9VD4+kqtKgZQ9QtKG4d9uziTjFPai0ayS7OjCFM8uz3mS&#xd; 8YJUGwil+c0YbRA3tRvxakMP+c3MYnAbIF7XpTECAwEAAaOCAXIwggFuMFoGCCsGAQUFBwEBBE4w&#xd; TDBKBggrBgEFBQcwAoY+aHR0cDovL2NlcnRzLmVtcmRpcmVjdC5jb20vY2VydHMvRU1SRGlyZWN0&#xd; VGVzdERldmljZVN1YkNBMi5jcnQwHQYDVR0OBBYEFMeEfSqQ5K65vH2mMdoKGyCMF98lMAwGA1Ud&#xd; EwEB/wQCMAAwHwYDVR0jBBgwFoAUsAtYO8WTrcZvZV0RwBKtWtyHhjUwTQYDVR0fBEYwRDBCoECg&#xd; PoY8aHR0cDovL2NlcnRzLmVtcmRpcmVjdC5jb20vY3JsL0VNUkRpcmVjdFRlc3REZXZpY2VTdWJD&#xd; QTIuY3JsMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwRAYD&#xd; VR0RBD0wO4IZaWhlLnN0YWdpbmcubWV0cmlwb3J0LmNvbYYeSFRUUDovL1dXVy5DQVJFUVVBTElU&#xd; WS5PUkcvVjAxMA0GCSqGSIb3DQEBCwUAA4IBAQAIBJRMmH0pCF2KSy97WxHxxP9sHlGfXaq+Wjfq&#xd; Q1/QW8rqrFRj5t6LcXXF5nZf7YAuLzwTKk/Bcf03QIWxQ0sbu3CeNW24gQ+r+7o1Th1fnld0IhFB&#xd; xOOPpy1Isag3Vo2jaMEP8W09Jy5NH3lz8bNrjdFOolo8qtWdpZ31ADpNVIGKYih2lgPPTZyIza/z&#xd; z2Irweph4aCTebpKYDKWJFA1wzUIzR2eObcnBrZ2Edi0013RRRJ3eYcC6o5PL2D0oEWnqlRVxVho&#xd; Nj2bSD2GYQEmoBHhRrc9i51UCfmJuK7jl/Fe9+Dx7CH2++LD8U9+OojASI0DncHbgY+eQL0n+fZL&#xd; wBHRhEzo4E6P+bJ3AiRDvQWrteM=&#xd;
        </property>
        <property name="KeyStorePassword">1648fb07-37d8-411a-9412-2734b06b764f</property>
        <property name="TrustStore">/u3+7QAAAAIAAAADAAAAAgASZW1yIGRpcmVjdCB0ZXN0IGNhAAABi+6tHX0ABVguNTA5AAAGajCC&#xd; BmYwggROoAMCAQICAQEwDQYJKoZIhvcNAQELBQAwgZgxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJD&#xd; QTESMBAGA1UEBxMJU2FuIERpZWdvMRMwEQYDVQQKEwpFTVIgRGlyZWN0MTYwNAYDVQQLEy1DZXJ0&#xd; aWZpY2F0aW9uIEF1dGhvcml0eSAoY2VydHMuZW1yZGlyZWN0LmNvbSkxGzAZBgNVBAMTEkVNUiBE&#xd; aXJlY3QgVGVzdCBDQTAeFw0xMjA5MDYwNDMxMzZaFw0zMjA5MDYwNDMxMzZaMIGYMQswCQYDVQQG&#xd; EwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCVNhbiBEaWVnbzETMBEGA1UEChMKRU1SIERpcmVj&#xd; dDE2MDQGA1UECxMtQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKGNlcnRzLmVtcmRpcmVjdC5jb20p&#xd; MRswGQYDVQQDExJFTVIgRGlyZWN0IFRlc3QgQ0EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK&#xd; AoICAQC7oJOeh6KLeshBKIW0UHUD+rDEws1zkoMR63mCOIdNBITG/MfFcw/2QhHYJq8GustVhO1m&#xd; j3U3F/4wndBjVMIKj8+7Cz9jXkwPZIJ/5tJF78SIM2hISZ7Xanb8x6pYbSDAFEQLvXqwHzJ9IIiu&#xd; 88LUoOW2MAtPbcr+HUSAF/VLrzqTqiZ0JPQ0UXeuPvRCpF/WY9Zak9P1o69MN43BmDdNnQdN0+Fg&#xd; EWRLoM5Acz3JmDy4ZdPYEa4EIPJrIE0IuvL0flCjVKEIUSQJJPwgKpDE/FM7mnv1u7rWJOP75oiR&#xd; B6Auzle8hmu1aw9B4Yw837Od5HZ585aOjAfuqBhbSCmjBeA/BlUq/jGP6WvgtnZKn+Mtz694ajN7&#xd; eL4Jq/3oNHYc4ffs+JaRGc/XIlnDl8I5sXnNzhWp7zDnhuDoSkYhiI/5lZAxFpQt7XHT9tg7RpP0&#xd; RxjiR5H+qihcXjQzhR1HU6Yl5XQJd3FIPQTQJVJ1hxcIpvm8scVWM5l7P/Cny3zqesSBYyP3nXTR&#xd; O/2r0FqBJDmqYFA32osVoiNXeNEBiia9HdWKPluVcc87nyaeYgv+BJpWM2ivfnVTrX0BnzVml5n2&#xd; GvB+5K3K1nL6dGp3aOEXod2vqqcm7wVckSa3ntVjg0B6rOydpcfarslXyNwaMd7nPx8NscXY8Vd3&#xd; FLL3eQIDAQABo4G4MIG1MA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQW&#xd; BBQx1oQvSZhuAAHQZ6H4nhywb6eirDAfBgNVHSMEGDAWgBQx1oQvSZhuAAHQZ6H4nhywb6eirDA/&#xd; BgNVHR8EODA2MDSgMqAwhi5odHRwOi8vY2VydHMuZW1yZGlyZWN0LmNvbS9FTVJEaXJlY3RUZXN0&#xd; Q0EuY3JsMBEGA1UdIAQKMAgwBgYEVR0gADANBgkqhkiG9w0BAQsFAAOCAgEAbF22PAexXCLJMngf&#xd; whhCO+xmgzA3ylhrHiSWJSWM9hXiCYD7anT4c59I4UFFXMK//4AuY9WgEZbrLBt4DK/Dmo6UqTqq&#xd; n1xI87iE3qvh8bKfrq7IiVzmSobq2OTSSmd9LpRQ8Tmfe21lVGD038stalK7KpzZVvCyXApzc2dr&#xd; g0iZ99hboFLVntBBIETNdP/ENiCVy7iIREC28Jequz3A4j5E/8lYf/S+rpdmzv2V6ew3kj3jmn1j&#xd; rgqEzWysYAbpY2o5tlTQefl8f60rj56E0YbGl4ZHvp292WxhydmUbv0OOfjgdcLO1XnZzHItuTla&#xd; PslaR/LZdihfbtSVTbX+ZmN//xxMEfDnzz0WXkAqqrhEla0I2SC2ujre5VSIaDSOs5GQKd02lmAY&#xd; veLqVZHgPbqlSAu3AaYjs/ul10Q3SQzLoesbANrathOQWOdR+aX7JFwQRoB8Q0Oekd0bJGe6vzWi&#xd; koqgQCJ7nhu01VvnUfvq09p/cJMyRyqQPmEtMx6HbyKAe9SjatT//XIaAjHAazaYeZ99gvA6TpRf&#xd; oYt5DpMI8HIX5MwuV0vmYqOVWDsgldQvgmCe7MNabJNcmAFj5va51Jn65jtux17+pVtGfRKXlLvv&#xd; udgkmI2bMdxOCdRUdE7pc7A/AULRUS+mj37koPOaJDrMcG/6dAHSE8UTtL0AAAACAB1lbXIgZGly&#xd; ZWN0IHRlc3QgZGV2aWNlIHN1YmNhMgAAAYvurR19AAVYLjUwOQAABdwwggXYMIIDwKADAgECAgg/&#xd; VhkRXIvOMzANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRIwEAYD&#xd; VQQHEwlTYW4gRGllZ28xEzARBgNVBAoTCkVNUiBEaXJlY3QxNjA0BgNVBAsTLUNlcnRpZmljYXRp&#xd; b24gQXV0aG9yaXR5IChjZXJ0cy5lbXJkaXJlY3QuY29tKTEbMBkGA1UEAxMSRU1SIERpcmVjdCBU&#xd; ZXN0IENBMB4XDTIzMDMwMTIxNDg1MloXDTMyMDkwNjA0MzEzNlowgasxCzAJBgNVBAYTAlVTMRMw&#xd; EQYDVQQIDApDYWxpZm9ybmlhMRIwEAYDVQQHDAlTYW4gRGllZ28xEzARBgNVBAoMCkVNUiBEaXJl&#xd; Y3QxNjA0BgNVBAsMLUNlcnRpZmljYXRpb24gQXV0aG9yaXR5IChjZXJ0cy5lbXJkaXJlY3QuY29t&#xd; KTEmMCQGA1UEAwwdRU1SIERpcmVjdCBUZXN0IERldmljZSBTdWJDQTIwggEiMA0GCSqGSIb3DQEB&#xd; AQUAA4IBDwAwggEKAoIBAQDWgW99VLaGBldw1hNl0oIRPZYCDEFEtMS6/Qkq9iBXX9u+zF1A/rnb&#xd; 8Jp3L5Hyra1NV/d4hQe03d7bwUvIlBStM49KKJWyIi06vOJfdhCNOTIup5yZrP7l5F8d52Znkp6v&#xd; LvGvgW4QxzRhP9taiJX12nzuDiUEAJvi1/4s99HJlhfD7QNJz/RHXtSn/N5aMSKTb35xUVq1J9yi&#xd; iKzcNdjtd67CY+kX5iQ0PVR2HoRS68i+EHbHj1MG6tAxhaz7pL9RFCcdXcAS6FKu4DnFcdKpgO06&#xd; fvXxI3OznO/EGUNj2I0rbwuwYvwy1UW7OpvcctAZSGPx8wSthOqAu1XiGs8fAgMBAAGjggEPMIIB&#xd; CzBQBggrBgEFBQcBAQREMEIwQAYIKwYBBQUHMAKGNGh0dHA6Ly9jZXJ0cy5lbXJkaXJlY3QuY29t&#xd; L2NlcnRzL0VNUkRpcmVjdFRlc3RDQS5jcnQwHQYDVR0OBBYEFLALWDvFk63Gb2VdEcASrVrch4Y1&#xd; MA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUMdaEL0mYbgAB0Geh+J4csG+noqwwEQYDVR0g&#xd; BAowCDAGBgRVHSAAMEMGA1UdHwQ8MDowOKA2oDSGMmh0dHA6Ly9jZXJ0cy5lbXJkaXJlY3QuY29t&#xd; L2NybC9FTVJEaXJlY3RUZXN0Q0EuY3JsMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQsFAAOC&#xd; AgEALoxvBtjr+wnFZOOaogZUyHh5QRI/+RCJUA4rwiEgJ6F1QP9Qyvck7VA7jSeH/hmd1dhKqxk2&#xd; PyUvDYGqU9QCSUMHeNKmfOj96NRm0VPDDBuM9Pu4eX1IIaJ6Tr5rlxuYy+K38OP3NClgjZZgxMnz&#xd; FUnliNCVCvryn0FXGfVyjICSlkV4nvGzi33jw8eewmnw4U/ZfzhIuxyPORJ+s/vcHLC4i8qbhUnz&#xd; e0A1iESoRlF/eB9x6xKyhVgohNtX+CxfG00pTe7v/WOTjgZ8eCz1TjK5lwxRU66Q8hQfa2PNKjkB&#xd; JUWK78+XnxTDf+UCcyTb7XC5+qiC4qOSr4Uz9ptsayZcvDMQ4QfGZQ2Y6cuXC66LaDOLUMcIzYkP&#xd; ideUUi3CVayr2w5Ob1OwPNDEFmQ8KGwaBwS7IwYaVkn2ujfWAqRgZb9wfMwEkEiWbsY+dQo3i0K0&#xd; 9fLwZwWw+nQ4Pvwc4cYcs7iVwgoNC9p/2zjouwQ8sltoAAXbTsoPmt6OzcVUxnEev7g0+0+d67ZB&#xd; kWxM33y1PFOFxJrWVx/nkAkInICBoM78epja9JuX/s9NHa21kmntlRh1eqW+uGYib/cMSt+Bz1z8&#xd; qL/jFD0NSaaFd6KH7m2DmGoSftM3g1WNZBXPVVI4o7EZ7H9fvGCUGvDej/+zNlV9Lz6btd21B86o&#xd; AGEAAAACABlpaGUuc3RhZ2luZy5tZXRyaXBvcnQuY29tAAABi+6tHX0ABVguNTA5AAAFIDCCBRww&#xd; ggQEoAMCAQICCFG3a94EpnofMA0GCSqGSIb3DQEBCwUAMIGrMQswCQYDVQQGEwJVUzETMBEGA1UE&#xd; CAwKQ2FsaWZvcm5pYTESMBAGA1UEBwwJU2FuIERpZWdvMRMwEQYDVQQKDApFTVIgRGlyZWN0MTYw&#xd; NAYDVQQLDC1DZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAoY2VydHMuZW1yZGlyZWN0LmNvbSkxJjAk&#xd; BgNVBAMMHUVNUiBEaXJlY3QgVGVzdCBEZXZpY2UgU3ViQ0EyMB4XDTIzMTEwMjIxMjU0MloXDTI0&#xd; MTEwMjIxMjU0MlowejELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFzAVBgNVBAoM&#xd; Dk1ldHJpcG9ydCBJbmMuMRkwFwYDVQQLDBBDQVJFUVVBTElUWS1URVNUMSIwIAYDVQQDDBlpaGUu&#xd; c3RhZ2luZy5tZXRyaXBvcnQuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4tOa&#xd; 7loCPgXnfXjKJ1k+wWnb9EdZ3LV3J1CfO7Kg4r/1UDEsyg0zNW/D7KpgZIi9b4YWc2YC7LzDNnk1&#xd; d4sB767rdMk0cIv4ysfpXOVyGFXF4RzoZcGxBU3ZhbqJybjtunDrmvA8NHymD4B/bz28sIVRtJDV&#xd; 0H/g4I7jDNyCl6IUeQJKUTBa90UDdJgxFnMD0PmuxjA40injjZ707GuA+StggA0kGCIfhQEVn1g7&#xd; iL3O8zo9Yp0y3QkWtBgrxOTnI/1UPj6Sq0qBlD1C0obh327OJOMU9qLRrJLs6MIUzy7PeZLxglQb&#xd; CKX5zRhtEDe1G/FqQw/5zcxicBsgXtelMQIDAQABo4IBcjCCAW4wWgYIKwYBBQUHAQEETjBMMEoG&#xd; CCsGAQUFBzAChj5odHRwOi8vY2VydHMuZW1yZGlyZWN0LmNvbS9jZXJ0cy9FTVJEaXJlY3RUZXN0&#xd; RGV2aWNlU3ViQ0EyLmNydDAdBgNVHQ4EFgQUx4R9KpDkrrm8faYx2gobIIwX3yUwDAYDVR0TAQH/&#xd; BAIwADAfBgNVHSMEGDAWgBSwC1g7xZOtxm9lXRHAEq1a3IeGNTBNBgNVHR8ERjBEMEKgQKA+hjxo&#xd; dHRwOi8vY2VydHMuZW1yZGlyZWN0LmNvbS9jcmwvRU1SRGlyZWN0VGVzdERldmljZVN1YkNBMi5j&#xd; cmwwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBEBgNVHREE&#xd; PTA7ghlpaGUuc3RhZ2luZy5tZXRyaXBvcnQuY29thh5IVFRQOi8vV1dXLkNBUkVRVUFMSVRZLk9S&#xd; Ry9WMDEwDQYJKoZIhvcNAQELBQADggEBAAgElEyYfSkIXYpLL3tbEfHE/2weUZ9dqr5aN+pDX9Bb&#xd; yuqsVGPm3otxdcXmdl/tgC4vPBMqT8Fx/TdAhbFDSxu7cJ41bbiBD6v7ujVOHV+eV3QiEUHE44+n&#xd; LUixqDdWjaNowQ/xbT0nLk0feXPxs2uN0U6iWjyq1Z2lnfUAOk1UgYpiKHaWA89NnIjNr/PPYivB&#xd; 6mHhoJN5ukpgMpYkUDXDNQjNHZ45tycGtnYR2LTTXdFFEnd5hwLqjk8vYPSgRaeqVFXFWGg2PZtI&#xd; PYZhASagEeFGtz2LnVQJ+Ym4ruOX8V734PHsIfb74sPxT346iMBIjQOdwduBj55AvSf59kuBhw6u&#xd; L0/jbOUBaAmJ5KSdfJ4nrw==&#xd;
        </property>
        <property name="settings">&lt;com.mirth.connect.plugins.ssl.model.SSLManagerSettings&gt;
  &lt;validationLoginWarning&gt;true&lt;/validationLoginWarning&gt;
  &lt;expirationTimeUntil&gt;30d&lt;/expirationTimeUntil&gt;
&lt;/com.mirth.connect.plugins.ssl.model.SSLManagerSettings&gt;</property>
      </properties>
    </entry>
    <entry>
      <string>Data Pruner</string>
      <properties>
        <property name="archiveEnabled">&lt;boolean&gt;false&lt;/boolean&gt;</property>
        <property name="archiverBlockSize">50</property>
        <property name="archiverOptions">&lt;com.mirth.connect.util.messagewriter.MessageWriterOptions&gt;
  &lt;destinationContent&gt;false&lt;/destinationContent&gt;
  &lt;encrypt&gt;false&lt;/encrypt&gt;
  &lt;includeAttachments&gt;false&lt;/includeAttachments&gt;
  &lt;passwordEnabled&gt;false&lt;/passwordEnabled&gt;
&lt;/com.mirth.connect.util.messagewriter.MessageWriterOptions&gt;</property>
        <property name="enabled">false</property>
        <property name="includeAttachments">&lt;boolean&gt;false&lt;/boolean&gt;</property>
        <property name="maxEventAge"></property>
        <property name="pollingProperties">&lt;com.mirth.connect.donkey.model.channel.PollConnectorProperties version=&quot;4.4.0&quot;&gt;
  &lt;pollingType&gt;INTERVAL&lt;/pollingType&gt;
  &lt;pollOnStart&gt;false&lt;/pollOnStart&gt;
  &lt;pollingFrequency&gt;3600000&lt;/pollingFrequency&gt;
  &lt;pollingHour&gt;0&lt;/pollingHour&gt;
  &lt;pollingMinute&gt;0&lt;/pollingMinute&gt;
  &lt;cronJobs/&gt;
  &lt;pollConnectorPropertiesAdvanced&gt;
    &lt;weekly&gt;true&lt;/weekly&gt;
    &lt;inactiveDays&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
      &lt;boolean&gt;false&lt;/boolean&gt;
    &lt;/inactiveDays&gt;
    &lt;dayOfMonth&gt;1&lt;/dayOfMonth&gt;
    &lt;allDay&gt;true&lt;/allDay&gt;
    &lt;startingHour&gt;8&lt;/startingHour&gt;
    &lt;startingMinute&gt;0&lt;/startingMinute&gt;
    &lt;endingHour&gt;17&lt;/endingHour&gt;
    &lt;endingMinute&gt;0&lt;/endingMinute&gt;
  &lt;/pollConnectorPropertiesAdvanced&gt;
&lt;/com.mirth.connect.donkey.model.channel.PollConnectorProperties&gt;</property>
        <property name="pruneEvents">false</property>
        <property name="pruningBlockSize">1000</property>
      </properties>
    </entry>
  </pluginProperties>
  <resourceProperties>
    <list>
      <com.mirth.connect.plugins.directoryresource.DirectoryResourceProperties version="4.4.2">
        <pluginPointName>Directory Resource</pluginPointName>
        <type>Directory</type>
        <id>Default Resource</id>
        <name>[Default Resource]</name>
        <description>Loads libraries from the custom-lib folder in the Mirth Connect home directory.</description>
        <includeWithGlobalScripts>true</includeWithGlobalScripts>
        <loadParentFirst>false</loadParentFirst>
        <directory>custom-lib</directory>
        <directoryRecursion>true</directoryRecursion>
      </com.mirth.connect.plugins.directoryresource.DirectoryResourceProperties>
    </list>
  </resourceProperties>
  <channelDependencies/>
  <configurationMap/>
</serverConfiguration>
