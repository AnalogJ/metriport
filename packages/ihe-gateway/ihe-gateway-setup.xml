<serverConfiguration version="4.4.2">
  <date>2023-11-26 19:35:45</date>
  <channelGroups>
    <channelGroup version="4.4.2">
      <id>7a4e6d78-a130-4aa7-9d85-6aa8921c6e65</id>
      <name>CareQuality Document Exchange</name>
      <revision>1</revision>
      <lastModified>
        <time>1700976839162</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>CareQuality Query-Based Document Exchange
</description>
      <channels>
        <channel version="4.4.2">
          <id>f6899f98-6671-44f9-a764-d5f7c1858f02</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>2f3a1187-8950-4a03-bc93-181ff1ecb627</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>3f38affa-7132-4c4d-8597-2679b2651a13</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>574e7271-1b21-4b79-82c3-fead249fc450</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>ed739638-6120-4aee-bcb2-acc661f2b12b</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</id>
          <revision>0</revision>
        </channel>
        <channel version="4.4.2">
          <id>6cdb6776-3488-47c6-8c90-2015ea051f93</id>
          <revision>0</revision>
        </channel>
      </channels>
    </channelGroup>
  </channelGroups>
  <channels>
    <channel version="4.4.2">
      <id>574e7271-1b21-4b79-82c3-fead249fc450</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA DQ Bulk Interface</name>
      <description>XCA ITI-38 Bulk Interface channel&#xd;
        - expects to receive a JSON array containing requests to be transmitted to the XCA ITI-38
        Interface channel&#xd;
        - takes individual requests and sends to the XCA ITI-38 Interface channel&#xd;
        &#xd;
        Comments:&#xd;
        - see example of the request here:
        https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
        &#xd;
        Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases />
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias />
              <ocspEnabled>false</ocspEnabled>
              <ocspURI />
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI />
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map" />
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources />
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;

                // HTTP 400 Bad Request - by default, the server cannot or will not process the
                request
                channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


                // Destination is not needed
                destinationSet.removeAll();


                // Decode and parse incoming JSON request
                json = getBase64Content(msg, &apos;json&apos;);


                // Validate request
                if (&apos;string&apos; == typeof json) {
                error = &apos;ERROR - &apos; + ex;
                } else {

                // HTTP 202 Accepted - the request is an array of entries and has been accepted for
                further processing
                if (Array.isArray(json)) {
                channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
                } else {
                error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
                }
                }


                // Cease processing in case of an error
                if (error) {
                channelMap.put(&apos;NOTE&apos;, error);
                throw error;
                }</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var totalCount = 0,
                processedCount = 0;

                // Loop through all request entries
                if (json) {
                json.forEach(function(entry) {

                totalCount++;
                var errorCount = 0;

                // Check for required parameters
                try {

                if (!entry.hasOwnProperty(&apos;urlXCPD&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                } else if (!entry.hasOwnProperty(&apos;urlDQ&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                } else if (!entry.hasOwnProperty(&apos;urlDR&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                }

                } catch(ex) {errorCount++}

                // Pass to the XCPD Interface channel to process
                if (0 == errorCount) {

                var result = router.routeMessageByChannelId($g(&apos;XCAITI38Interface&apos;),
                JSON.stringify(entry, null, 2));
                // TODO: Verify response and increase processedCount

                } else {
                channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() +
                &apos; error(s) is/are found in the entries&apos;);
                }
                });
                }

                // Store for stat
                channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());
                channelMap.put(&apos;PCOUNT&apos;, processedCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
            version="4.4.2">
            <serializationProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
              version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
              version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties />
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables />
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PROCESSED</name>
            <type>STRING</type>
            <mappingName>PCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992134710</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>ed739638-6120-4aee-bcb2-acc661f2b12b</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA DR Bulk Interface</name>
      <description>XCA ITI-39 Bulk Interface channel&#xd;
        - expects to receive a JSON array containing requests to be transmitted to the XCA ITI-39
        Interface channel&#xd;
        - takes individual requests and sends to the XCA ITI-39 Interface channel&#xd;
        &#xd;
        Comments:&#xd;
        - see example of the request here:
        https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
        &#xd;
        Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases />
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias />
              <ocspEnabled>false</ocspEnabled>
              <ocspURI />
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI />
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map" />
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources />
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;

                // HTTP 400 Bad Request - by default, the server cannot or will not process the
                request
                channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


                // Destination is not needed
                destinationSet.removeAll();


                // Decode and parse incoming JSON request
                json = getBase64Content(msg, &apos;json&apos;);


                // Validate request
                if (&apos;string&apos; == typeof json) {
                error = &apos;ERROR - &apos; + ex;
                } else {

                // HTTP 202 Accepted - the request is an array of entries and has been accepted for
                further processing
                if (Array.isArray(json)) {
                channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
                } else {
                error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
                }
                }


                // Cease processing in case of an error
                if (error) {
                channelMap.put(&apos;NOTE&apos;, error);
                throw error;
                }</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var totalCount = 0,
                processedCount = 0;

                // Loop through all request entries
                if (json) {
                json.forEach(function(entry) {

                totalCount++;
                var errorCount = 0;

                // Check for required parameters
                try {

                if (!entry.hasOwnProperty(&apos;urlXCPD&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                } else if (!entry.hasOwnProperty(&apos;urlDQ&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                } else if (!entry.hasOwnProperty(&apos;urlDR&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                }

                } catch(ex) {errorCount++}

                // Pass to the XCPD Interface channel to process
                if (0 == errorCount) {

                var result = router.routeMessageByChannelId($g(&apos;XCAITI39Interface&apos;),
                JSON.stringify(entry, null, 2));
                // TODO: Verify response and increase processedCount

                } else {
                channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() +
                &apos; error(s) is/are found in the entries&apos;);
                }
                });
                }

                // Store for stat
                channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());
                channelMap.put(&apos;PCOUNT&apos;, processedCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
            version="4.4.2">
            <serializationProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
              version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
              version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties />
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables />
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PROCESSED</name>
            <type>STRING</type>
            <mappingName>PCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992188709</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA ITI-38 Interface</name>
      <description>XCA ITI-38 Interface channel&#xd;
        - expects to receive a single requests to be transmitted to the XCA ITI-38 [Cross Gateway
        Query] Processor channel&#xd;
        &#xd;
        Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases />
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias />
              <ocspEnabled>false</ocspEnabled>
              <ocspURI />
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI />
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map" />
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadq</contextPath>
          <timeout>30000</timeout>
          <staticResources />
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


                // HTTP 400 Bad Request - by default, the server cannot or will not process the
                request
                channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


                // Decode and parse incoming JSON request if sent over HTTP
                if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
                json = getBase64Content(msg, &apos;json&apos;);
                } else try {
                // Parse JSON request if routed from the XCPD Bulk Interface channel
                json = JSON.parse(msg.toString());
                } catch(ex) {
                error = &apos;ERROR - &apos; + ex;
                }


                // If decoding and parsing the HTTP request fail, it returns an error as a string
                if (&apos;string&apos; == typeof json) {
                error = &apos;ERROR - &apos; + ex;


                } else try {

                // HTTP 202 Accepted - the request is a single entry and has been accepted for
                further processing
                if (!Array.isArray(json)) {

                // Set HTTP response code and processing statistics
                channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
                channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
                channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());

                } else {
                error = &apos;ERROR - Incoming feed is an array of entries&apos;;
                }
                } catch(ex) {
                error = &apos;ERROR - &apos; + ex;
                }


                // Cease processing in case of an error
                if (error) {
                channelMap.put(&apos;NOTE&apos;, error);
                throw error;
                }</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
            version="4.4.2">
            <serializationProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
              version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
              version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD ITI-55 Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties />
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>3f38affa-7132-4c4d-8597-2679b2651a13</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables />
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data

        // Store for the XCPD Bulk Interface
        globalMap.put(&apos;XCAITI38Interface&apos;, channelId);

        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992511644</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>3f38affa-7132-4c4d-8597-2679b2651a13</id>
      <nextMetaDataId>7</nextMetaDataId>
      <name>XCA ITI-38 Processor</name>
      <description>XCA ITI-38 Processor channel&#xd;
        - Generates ITI-38 &quot;Cross Gateway Query&quot; SOAP message&#xd;
        - Calls XCA endpoint&#xd;
        - Processes responses&#xd;
        &#xd;
        Last updated: Nov 24 2023</description>
      <revision>2</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties />
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store internal message id
                channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
                channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());

                // Store for further processing
                channelMap.put(&apos;REQUEST&apos;, msg);

                // Set Responding Gateway endpoint
                channelMap.put(&apos;URL&apos;, msg.urlDQ.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var parameterList = new XMLList();

                /*
                For document searches on the NHIN, it is recommended to use the following elements
                as the primary search parameters:
                * Patient ID
                * Class code
                * Practice Setting Code
                * Healthcare Facility Type
                * Document Creation Time
                */

                // XDSDocumentEntryPatientId (REQUIRED)
                var patientEntry = getXDSDocumentEntryPatientId(msg.patientIdentifier.id.toString(),
                msg.patientIdentifier.orgOid.toString());
                if (patientEntry) parameterList += patientEntry;

                // XDSDocumentEntryStatus (REQUIRED)
                var docStatus = getXDSDocumentEntryStatus();
                if (docStatus) parameterList += docStatus;

                // XDSDocumentEntryClassCode (OPTIONAL)
                if (msg.hasOwnProperty(&apos;classCode&apos;)) {
                var docClassCode = getXDSDocumentEntryClassCode(msg.classCode.code.toString(),
                msg.classCode.system.toString());
                if (docClassCode) parameterList += docClassCode;
                }

                // XDSDocumentEntryPracticeSettingCode (OPTIONAL - RECOMMENDED)
                if (msg.hasOwnProperty(&apos;practiceSettingCode&apos;)) {
                var practiceSetting =
                getXDSDocumentEntryPracticeSettingCode(msg.practiceSettingCode.code.toString(),
                msg.practiceSettingCode.system.toString());
                if (practiceSetting) parameterList += practiceSetting;
                }

                // XDSDocumentEntryHealthcareFacilityTypeCode (OPTIONAL - RECOMMENDED)
                if (msg.hasOwnProperty(&apos;facilityTypeCode&apos;)) {
                var facilityCode =
                getXDSDocumentEntryHealthcareFacilityTypeCode(msg.facilityTypeCode.code.toString(),
                msg.facilityTypeCode.system.toString());
                if (facilityCode) parameterList += facilityCode;
                }

                // XDSDocumentEntryCreationTimeFrom (OPTIONAL - RECOMMENDED)
                // XDSDocumentEntryCreationTimeTo (OPTIONAL - RECOMMENDED)
                if (msg.hasOwnProperty(&apos;documentCreationDate&apos;)) {

                if (msg.documentCreationDate.hasOwnProperty(&apos;dateFrom&apos;)) {
                var dateFrom =
                getXDSDocumentEntryCreationTimeFrom(msg.documentCreationDate.dateFrom.toString());
                if (dateFrom) parameterList += dateFrom;
                }

                if (msg.documentCreationDate.hasOwnProperty(&apos;dateTo&apos;)) {
                var dateTo =
                getXDSDocumentEntryCreationTimeTo(msg.documentCreationDate.dateTo.toString());
                if (dateTo) parameterList += dateTo;
                }
                }

                // XDSDocumentEntryServiceStartTimeFrom (OPTIONAL)
                // XDSDocumentEntryServiceStartTimeTo (OPTIONAL)
                if (msg.hasOwnProperty(&apos;serviceDate&apos;)) {

                if (msg.serviceDate.hasOwnProperty(&apos;dateFrom&apos;)) {
                var serviceFrom =
                getXDSDocumentEntryServiceStartTimeFrom(msg.serviceDate.dateFrom.toString());
                if (serviceFrom) parameterList += serviceFrom;
                }

                if (msg.serviceDate.hasOwnProperty(&apos;dateTo&apos;)) {
                var serviceTo =
                getXDSDocumentEntryServiceStartTimeTo(msg.serviceDate.dateTo.toString());
                if (serviceTo) parameterList += serviceTo;
                }
                }

                // XDSDocumentEntryType (OPTIONAL)
                var docEntryType = getXDSDocumentEntryType();
                if (docEntryType) parameterList += docEntryType;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Store Query Parameters</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Pretty print entry slots
                var list = &lt;urn2:list
                xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;/&gt;;
                list.appendChild(parameterList);

                var params = list.toString().replace(&apos;&lt;urn2:list
                xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;&apos;,
                &apos;&apos;);
                params = params.replace(&apos;&lt;/urn2:list&gt;&apos;, &apos;&apos;);
                channelMap.put(&apos;PARAMS&apos;, params.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
            version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>5</metaDataId>
          <name>XCA Endpoint</name>
          <properties
            class="com.mirth.connect.connectors.interop.xca.shared.XCADispatcherProperties"
            version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
                <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
                  <trustedCertificateAliases />
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>carequality</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI />
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI />
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map" />
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <wsdlUrl>&lt;Using Built-in Default WSDL&gt;</wsdlUrl>
            <service>{urn:ihe:iti:xds-b:2007}RespondingGateway_Query_Service</service>
            <port>{urn:ihe:iti:xds-b:2007}RespondingGateway_Query_Port_Soap</port>
            <operation>RespondingGateway_CrossGatewayQuery</operation>
            <locationURI>${URL}</locationURI>
            <socketTimeout>30000</socketTimeout>
            <useAuthentication>false</useAuthentication>
            <username></username>
            <password></password>
            <envelope>&lt;soap:Envelope
              xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;
              xmlns:urn=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0&quot;
              xmlns:urn1=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;soap:Header&gt;${SOAP_HEADER}&lt;/soap:Header&gt;
              &lt;soap:Body&gt;
              &lt;urn:AdhocQueryRequest id=&quot;?&quot; comment=&quot;?&quot;
              federated=&quot;false&quot; federation=&quot;?&quot; startIndex=&quot;0&quot;
              maxResults=&quot;-1&quot;&gt;
              &lt;!--Optional:--&gt;
              &lt;urn1:RequestSlotList&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Slot name=&quot;?&quot; slotType=&quot;?&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;?&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;
              &lt;/urn1:RequestSlotList&gt;
              &lt;urn:ResponseOption returnType=&quot;RegistryObject&quot;
              returnComposedObjects=&quot;false&quot;/&gt;
              &lt;urn2:AdhocQuery id=&quot;?&quot; home=&quot;?&quot; lid=&quot;?&quot;
              objectType=&quot;?&quot; status=&quot;?&quot;&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Slot name=&quot;?&quot; slotType=&quot;?&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;?&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Name&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Name&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Description&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Description&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:VersionInfo versionName=&quot;1.1&quot; comment=&quot;?&quot;/&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Classification id=&quot;?&quot; home=&quot;?&quot; lid=&quot;?&quot;
              objectType=&quot;?&quot; status=&quot;?&quot; classificationScheme=&quot;?&quot;
              classifiedObject=&quot;?&quot; classificationNode=&quot;?&quot;
              nodeRepresentation=&quot;?&quot;&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Slot name=&quot;?&quot; slotType=&quot;?&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;?&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Name&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Name&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Description&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Description&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:VersionInfo versionName=&quot;1.1&quot; comment=&quot;?&quot;/&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Classification/&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:ExternalIdentifier id=&quot;?&quot; home=&quot;?&quot; lid=&quot;?&quot;
              objectType=&quot;?&quot; status=&quot;?&quot; registryObject=&quot;?&quot;
              identificationScheme=&quot;?&quot; value=&quot;?&quot;&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Slot name=&quot;?&quot; slotType=&quot;?&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;?&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Name&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Name&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Description&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Description&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:VersionInfo versionName=&quot;1.1&quot; comment=&quot;?&quot;/&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Classification/&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:ExternalIdentifier/&gt;
              &lt;/urn2:ExternalIdentifier&gt;
              &lt;/urn2:Classification&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:ExternalIdentifier id=&quot;?&quot; home=&quot;?&quot; lid=&quot;?&quot;
              objectType=&quot;?&quot; status=&quot;?&quot; registryObject=&quot;?&quot;
              identificationScheme=&quot;?&quot; value=&quot;?&quot;&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Slot name=&quot;?&quot; slotType=&quot;?&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;?&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Name&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Name&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Description&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Description&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:VersionInfo versionName=&quot;1.1&quot; comment=&quot;?&quot;/&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Classification id=&quot;?&quot; home=&quot;?&quot; lid=&quot;?&quot;
              objectType=&quot;?&quot; status=&quot;?&quot; classificationScheme=&quot;?&quot;
              classifiedObject=&quot;?&quot; classificationNode=&quot;?&quot;
              nodeRepresentation=&quot;?&quot;&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Slot name=&quot;?&quot; slotType=&quot;?&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;?&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Name&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Name&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:Description&gt;
              &lt;urn2:LocalizedString xml:lang=&quot;en-US&quot; charset=&quot;UTF-8&quot;
              value=&quot;?&quot;/&gt;
              &lt;/urn2:Description&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:VersionInfo versionName=&quot;1.1&quot; comment=&quot;?&quot;/&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:Classification/&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:ExternalIdentifier/&gt;
              &lt;/urn2:Classification&gt;
              &lt;!--Zero or more repetitions:--&gt;
              &lt;urn2:ExternalIdentifier/&gt;
              &lt;/urn2:ExternalIdentifier&gt;
              &lt;!--Optional:--&gt;
              &lt;urn2:QueryExpression queryLanguage=&quot;?&quot;&gt;
              e
              &lt;!--You may enter ANY elements at this point--&gt;
              gero
              &lt;/urn2:QueryExpression&gt;
              &lt;/urn2:AdhocQuery&gt;
              &lt;/urn:AdhocQueryRequest&gt;
              &lt;/soap:Body&gt;
              &lt;/soap:Envelope&gt;</envelope>
            <oneWay>false</oneWay>
            <headers class="linked-hash-map" />
            <headersVariable></headersVariable>
            <isUseHeadersVariable>false</isUseHeadersVariable>
            <useMtom>false</useMtom>
            <attachmentNames />
            <attachmentContents />
            <attachmentTypes />
            <attachmentsVariable></attachmentsVariable>
            <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
            <soapAction>urn:ihe:iti:2007:CrossGatewayQuery</soapAction>
            <wsdlDefinitionMap>
              <map class="linked-hash-map">
                <entry>
                  <string>{urn:ihe:iti:xds-b:2007}RespondingGateway_Query_Service</string>
                  <com.mirth.connect.connectors.ws.DefinitionServiceMap_-DefinitionPortMap>
                    <map class="linked-hash-map">
                      <entry>
                        <string>{urn:ihe:iti:xds-b:2007}RespondingGateway_Query_Port_Soap</string>
                        <com.mirth.connect.connectors.ws.DefinitionServiceMap_-PortInformation>
                          <operations>
                            <string>RespondingGateway_CrossGatewayQuery</string>
                          </operations>
                          <actions>
                            <string>urn:ihe:iti:2007:CrossGatewayQuery</string>
                          </actions>
                        </com.mirth.connect.connectors.ws.DefinitionServiceMap_-PortInformation>
                      </entry>
                    </map>
                  </com.mirth.connect.connectors.ws.DefinitionServiceMap_-DefinitionPortMap>
                </entry>
              </map>
            </wsdlDefinitionMap>
            <tcpMode>false</tcpMode>
            <remoteAddress></remoteAddress>
            <remotePort></remotePort>
            <useUDDI>false</useUDDI>
            <uddiSummary></uddiSummary>
            <useSOAPTemplate>true</useSOAPTemplate>
            <useDefaultWsdl>true</useDefaultWsdl>
            <convertResponseToJSON>false</convertResponseToJSON>
            <mustUnderstand>false</mustUnderstand>
            <storeSOAPPayloads>true</storeSOAPPayloads>
            <expandedJsonFormat>false</expandedJsonFormat>
            <validateSAML>false</validateSAML>
            <generateSAML>true</generateSAML>
            <samlGenerationProperties version="4.4.2">
              <homeCommunityId>1.2.3</homeCommunityId>
              <issuerEmail>support@metriport.com</issuerEmail>
              <subjectLocality>127.0.0.1</subjectLocality>
              <subjectLocalityDNS>localhost</subjectLocalityDNS>
              <includeConditions>true</includeConditions>
              <conditionsExpirationDuration>300000</conditionsExpirationDuration>
              <conditionsAudienceUseCustom>false</conditionsAudienceUseCustom>
              <conditionsAudience></conditionsAudience>
              <useSSLManager>true</useSSLManager>
              <keyStorePath></keyStorePath>
              <keyStorePassword></keyStorePassword>
              <keyAlias>carequality</keyAlias>
              <keyPassword></keyPassword>
              <stringAttributes>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:subject-id</name>
                  <format>URI_REFERENCE</format>
                  <value>Administrator</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:organization</name>
                  <format>URI_REFERENCE</format>
                  <value>NextGen</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:organization-id</name>
                  <format>URI_REFERENCE</format>
                  <value>urn:oid:${homeCommunityId}</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:nhin:names:saml:homeCommunityId</name>
                  <format>URI_REFERENCE</format>
                  <value>urn:oid:${homeCommunityId}</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
              </stringAttributes>
              <hl7Attributes>
                <com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                  <name>urn:oasis:names:tc:xacml:2.0:subject:role</name>
                  <format>URI_REFERENCE</format>
                  <tagName>Role</tagName>
                  <code>224608005</code>
                  <codeSystem>2.16.840.1.113883.6.96</codeSystem>
                  <codeSystemName>SNOMED_CT</codeSystemName>
                  <displayName>Administrative healthcare staff</displayName>
                </com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:purposeofuse</name>
                  <format>URI_REFERENCE</format>
                  <tagName>PurposeOfUse</tagName>
                  <code>TREATMENT</code>
                  <codeSystem>2.16.840.1.113883.3.18.7.1</codeSystem>
                  <codeSystemName>nhin-purpose</codeSystemName>
                  <displayName>Treatment</displayName>
                </com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
              </hl7Attributes>
            </samlGenerationProperties>
            <useQueryWSDL>true</useQueryWSDL>
          </properties>
          <transformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>SOAP Header</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Set the required variables for the XCA Interop template
                  var header = &apos;&lt;soap:Action
                  xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery&lt;/soap:Action&gt;&apos;
                  +
                  &apos;&lt;soap:MessageID
                  xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;urn:uuid:&apos; +
                  msg.id.toString() + &apos;&lt;/soap:MessageID&gt;&apos; +
                  &apos;&lt;soap:To xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;&apos;
                  + msg.urlDQ.toString() + &apos;&lt;/soap:To&gt;&apos; +
                  &apos;&lt;soap:ReplyTo
                  xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;&apos; +
                  &apos;&lt;soap:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/soap:Address&gt;&apos;
                  +
                  &apos;&lt;/soap:ReplyTo&gt;&apos;;
                  channelMap.put(&apos;SOAP_HEADER&apos;, header.toString());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>SOAP Body</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
                  channelMap.put(&apos;HomeCommunityId&apos;, msg.homeCommunityId.toString());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties
                class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
                version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
                version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Store the HTTP code only
                  var http = $(&apos;responseStatusLine&apos;);
                  http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g,
                  &apos;&apos;);
                  channelMap.put(&apos;HTTP&apos;, http.toString());


                  // Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
                  var xml = null;

                  var ack= &apos;&apos;,
                  queryResponseCode = &apos;&apos;,
                  homeCommunityId = null,
                  soapFaultCode = null,
                  soapReason = null;

                  try {

                  var soap = String(getBase64Body(msg));

                  // Store for testing
                  channelMap.put(&apos;RESPONSE&apos;, soap.toString());

                  // SOAP level error
                  if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

                  xml = new XML(soap.toString());

                  // Case 6: The Initiating Gateway shall accept a SOAP fault representing a
                  transmission error
                  soapFaultCode =
                  xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Code&apos;].*::[&apos;Value&apos;].toString();
                  soapReason =
                  xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Reason&apos;].*::[&apos;Text&apos;].toString();
                  channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
                  channelMap.put(&apos;RESULT&apos;, soapReason);

                  return;

                  } else {

                  // Ignore SOAP header and extract ITI-55 response (the SOAP message may contain
                  extra namespaces)
                  xml = soap.substring(soap.indexOf(&apos;Body&apos;),
                  soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) +
                  &apos;PRPA_IN201306UV02&gt;&apos;.length);
                  xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);

                  // Validate by generating the XML object
                  xml = new XML(xml);

                  // Acknowledgement code as described in HL7 message processing rules
                  // AA - Receiving application successfully processed message
                  // AE - Receiving application found error in processing message. Sending error
                  response with additional error detail information
                  // AR - Receiving application failed to process message for reason unrelated to
                  content or format
                  ack =
                  xml.*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString();
                  channelMap.put(&apos;ACK&apos;, ack.toString());

                  // The result status of the query
                  // OK - Query reponse data found for 1 or more result sets matching the query
                  request specification
                  // NF - No errors, but no data was found matching the query request specification
                  // AE - Query or application error
                  // QE - Problem with input Parmeters error
                  queryResponseCode =
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
                  channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());

                  }

                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 1: One match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching
                  the criteria sent in the query parameters
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // One RegistrationEvent (and the associated Patient role, subject of that event)
                  is returned from the patient information source for the patient record found.


                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // A globally unique identifier for a community
                  if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;)
                  &amp;&amp;
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;))
                  {
                  homeCommunityId =
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();
                  // Store for the next channel
                  channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
                  channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);
                  }

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 2: Multiple match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to
                  matching the criteria sent in the query parameters and the policy allows returning
                  multiple.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // One RegistrationEvent (and the associated Patient role, subject of that event)
                  is returned for each patient record found.

                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Sample needed

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to
                  matching the criteria sent in the query parameters but no matches
                  // close enough for the necessary assurance level and more attributes might allow
                  the Responding Gateway to return a match.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // No RegistrationEvent is returned in the response, but the Responding Gateway
                  provides a suggestion in terms of demographics that may help identify a match.

                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Sample needed

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 4: No match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to
                  matching the criteria sent in the query parameters.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // NF (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // There is no RegistrationEvent returned in the response.


                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Define additional processing logic here

                  channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 5: Application error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request.
                  // This may be because the request came synchronously and an asynchronous request
                  may be feasible, or because the Responding Gateway is overloaded
                  // with other requests and does not expect to answer for a significant period of
                  time.
                  // It may also be that the Responding Gateway may need some manual configuration
                  update to authorize responder or another error occurred while
                  // the Responding Gateway was processing the message payload.
                  // AE (application error) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // AE (application error) is returned in QueryAck.queryResponseCode (control act
                  wrapper)
                  // There is no RegistrationEvent returned in the response.

                  if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 ||
                  [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try
                  {

                  var reason = &apos;&apos;;
                  for each (var trigger in
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;])
                  {
                  reason +=
                  trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString()
                  + &apos; &apos;;
                  }

                  channelMap.put(&apos;RESULT&apos;, reason.toString().trim());

                  // Stop further processing
                  return;

                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
              version="4.4.2">
              <serializationProperties
                class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
                version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
                version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties
                class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
                version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
                version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>XCA Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="4.4.2">
          <metaDataId>6</metaDataId>
          <name>Destination 1</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties />
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables />
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>Q_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1701056051048</time>
            <timezone>America/Los_Angeles</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCA ITI-39 Interface</name>
      <description>XCA ITI-39 Interface channel&#xd;
        - expects to receive a single requests to be transmitted to the XCA ITI-39 [Cross Gateway
        Retrieve] Processor channel&#xd;
        &#xd;
        Last updated: Nov 14 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases />
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias />
              <ocspEnabled>false</ocspEnabled>
              <ocspURI />
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI />
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map" />
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcadr</contextPath>
          <timeout>30000</timeout>
          <staticResources />
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


                // HTTP 400 Bad Request - by default, the server cannot or will not process the
                request
                channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


                // Decode and parse incoming JSON request if sent over HTTP
                if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
                json = getBase64Content(msg, &apos;json&apos;);
                } else try {
                // Parse JSON request if routed from the XCPD Bulk Interface channel
                json = JSON.parse(msg.toString());
                } catch(ex) {
                error = &apos;ERROR - &apos; + ex;
                }


                // If decoding and parsing the HTTP request fail, it returns an error as a string
                if (&apos;string&apos; == typeof json) {
                error = &apos;ERROR - &apos; + ex;


                } else try {

                // HTTP 202 Accepted - the request is a single entry and has been accepted for
                further processing
                if (!Array.isArray(json)) {

                // Set HTTP response code and processing statistics
                channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
                channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
                channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());

                } else {
                error = &apos;ERROR - Incoming feed is an array of entries&apos;;
                }
                } catch(ex) {
                error = &apos;ERROR - &apos; + ex;
                }


                // Cease processing in case of an error
                if (error) {
                channelMap.put(&apos;NOTE&apos;, error);
                throw error;
                }</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
            version="4.4.2">
            <serializationProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
              version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
              version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD ITI-55 Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties />
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables />
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data

        // Store for the XCPD Bulk Interface
        globalMap.put(&apos;XCAITI39Interface&apos;, channelId);

        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1699992521467</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</id>
      <nextMetaDataId>5</nextMetaDataId>
      <name>XCA ITI-39 Processor</name>
      <description>XCA ITI-39 Processor channel&#xd;
        - Generates ITI-38 &quot;Cross Gateway Retrieve&quot; SOAP message&#xd;
        - Calls XCA endpoint&#xd;
        - Processes responses&#xd;
        &#xd;
        Last updated: Nov 14 2023</description>
      <revision>2</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties />
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store internal message id
                channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
                channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());

                // Set Responding Gateway endpoint
                channelMap.put(&apos;URL&apos;, msg.urlDQ.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>// Check for the FHIR Patient resource in the incoming message
                if (!msg.hasOwnProperty(&apos;patientResource&apos;)) throw &apos;ERROR - The
                required FHIR Patient resource is missing. The processing has been stopped.&apos;;

                // The query parameters below are constrained in the PRPA_MT201306IHEPCD [Patient
                Registry Query By Demographics] message
                // The order follows that of the PRPA_MT201306UV02 [Patient Registry Query By
                Demographics] message

                /*
                To ensure the XML is valid, parameters must be in the following order:
                livingSubjectAdministrativeGender
                livingSubjectBirthPlaceAddress
                livingSubjectBirthPlaceName
                livingSubjectBirthTime
                livingSubjectDeceasedTime -- Not used in XCPD ITI-55 query
                livingSubjectId
                livingSubjectName
                mothersMaidenName
                otherIDsScopingOrganization -- Not used in XCPD ITI-55 query
                patientAddress
                patientStatusCode -- Not used in XCPD ITI-55 query
                patientTelecom
                principalCareProviderId
                principalCareProvisionId -- Not used in XCPD ITI-55 query
                */

                var patient = msg.patientResource;
                var parameterList = new XMLList();

                // Values from extensions
                var birthPlaceAddress = null,
                birthDateTime = null,
                mothersMaidenName = null;

                if (patient.hasOwnProperty(&apos;extension&apos;)) {
                try {
                var i = patient.extension.findIndex(function(entry) {return
                &apos;http://hl7.org/fhir/StructureDefinition/patient-birthPlace&apos; ==
                entry.url.toString();});
                birthPlaceAddress = patient.extension[i].valueAddress;
                } catch(ex) {}
                try {
                var i = patient.extension.findIndex(function(entry) {return
                &apos;http://hl7.org/fhir/StructureDefinition/patient-birthTime&apos; ==
                entry.url.toString();});
                birthDateTime = patient.extension[i].valueDateTime.toString();
                } catch(ex) {}
                try {
                var i = patient.extension.findIndex(function(entry) {return
                &apos;http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName&apos; ==
                entry.url.toString();});
                mothersMaidenName = patient.extension[i].valueString.toString();
                } catch(ex) {}
                }

                // This query parameter is a code representing the administrative gender of a living
                subject in a patient registry
                // livingSubjectAdministrativeGender [0..1], value [1..1]
                if (patient.hasOwnProperty(&apos;gender&apos;)) {
                var gender = getLivingSubjectAdministrativeGender(patient);
                if (gender) parameterList += gender;
                }


                // This query parameter is a patient&apos;s birthplace represented as an address
                // livingSubjectBirthPlaceAddress [0..1], value [1..*]
                if (birthPlaceAddress) {
                var address = getLivingSubjectBirthPlaceAddress(birthPlaceAddress);
                if (address) parameterList += address;
                }


                // This query parameter is a patient&apos;s birthplace represented as a place name
                // livingSubjectBirthPlaceName [0..1], value [1..*]
                var birthPlace = getLivingSubjectBirthPlaceName(patient);
                if (birthPlace) parameterList += birthPlace;


                // This query parameter is the birth date of a living subject
                // livingSubjectBirthTime [0..1], value [1..1]
                var birthTime = null;
                if (birthDateTime) {
                birthTime = getLivingSubjectBirthTime(birthDateTime);
                } else if (patient.hasOwnProperty(&apos;birthDate&apos;)) {
                birthTime = getLivingSubjectBirthTime(patient.birthDate.toString());
                }
                if (birthTime) parameterList += birthTime;


                // This query parameter is an identifier for a living subject.
                // This is NOT the identifier assigned by the target registry.
                // In fact, the identifier has no context (scoping organization) other than the
                namespace from which the identifier was issued (OID root).
                // livingSubjectId [0..*], value [1..*]
                var patientID = getLivingSubjectId(patient);
                if (patientID) parameterList += patientID;


                // This query parameter is the name of a living subject.
                // If multiple instances of LivingSubjectName are provided, the receiver must
                consider them as possible alternatives, logically connected with an &quot;or&quot;.
                // livingSubjectName [0..*], value [1..1]
                if (patient.hasOwnProperty(&apos;name&apos;)) {
                patient.name.forEach(function(entry) {
                var name = getLivingSubjectName(entry);
                if (name) parameterList += name;
                });
                }


                // This query parameter is the maiden name of a focal person&apos;s mother.
                // It is included as a parameter because it is a common attribute for confirming the
                identity of persons in some registries.
                // mothersMaidenName [0..*], value [1..1]
                if (mothersMaidenName) {
                var mMaidenName = getMothersMaidenName(mothersMaidenName);
                if (mMaidenName) parameterList += mMaidenName;
                }


                // This query parameter is a postal address for corresponding with a living subject
                in the context of the target patient registry.
                // There shall be only a single PatientAddress element.
                // Multiple instances of the value element within a Patient Address may be specified
                and are combined with OR logic.
                // patientAddress [0..1], value [1..*]
                if (patient.hasOwnProperty(&apos;address&apos;)) {
                var address = getPatientAddress(patient.address);
                if (address) parameterList += address;
                }


                // This query parameter is a telecommunications address for communicating with a
                living subject in the context of the target patient registry.
                // It could be a telephone number, fax number or even an email address. There shall
                be only a single PatientTelecom element.
                // Multiple instances of the value element within a PatientTelecom may be specified
                and are combined with OR logic.
                // patientTelecom [0..*] getPatientTelecom()
                if (patient.hasOwnProperty(&apos;telecom&apos;)) {
                var telecom = getPatientTelecom(patient.telecom);
                if (telecom) parameterList += telecom;
                }


                // This query parameter is the care provider identifier of a person who has been
                assigned as the principal care provider of this patient.
                // The requestor may specify multiple PrincipalCareProviderId elements which
                responder shall consider as possible alternatives, logically connected with an
                &quot;or&quot;.
                // principalCareProviderId [0..*], value [1..1]
                if (msg.hasOwnProperty(&apos;principalCareProviderIds&apos;)) {
                msg.principalCareProviderIds.forEach(function(id) {
                var provider = getPrincipalCareProviderId(id);
                if (provider) parameterList += provider;
                });
                }


                // ========== Following parameters are present in PRPA_MT201306UV02 but not used in
                PRPA_MT201306IHEPCD ==========
                // This query parameter is the death date of a living subject. It is used to find
                patients who have died on a known date or within a date interval
                // livingSubjectDeceasedTime [0..*]

                // This query parameter is another organization that has registered the focal
                patient in its registry.
                // It is used to find living subjects who have been registered by a particular
                organization.
                // otherIDsScopingOrganization [0..*]

                // This query parameter is the status of a record in the target patient registry.
                // It is used to find records in a particular state such as &quot;active&quot; or
                &quot;completed&quot;.
                // patientStatusCode [0..*]

                // This query parameter is the identifier the explicit acceptance for some aspect of
                a patient&apos;s care by a health care provider.
                // This identifies a Care Provision act.
                // principalCareProvisionId [0..*]</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate SOAP Envelope</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// Generate the initial SOAP message
                var soap = getSOAPEnvelope(msg.urlDQ.toString(),
                &apos;urn:ihe:iti:2007:CrossGatewayQuery&apos;);

                // Generate PRPA_IN201305UV02 [Patient Registry Find Candidates Query] message
                var receiver = getHL7v3Receiver(msg.gatewayOID.toString(), msg.urlXCPD.toString());
                var sender = getHL7v3Sender($cfg(&apos;HL7v3.Sender.OID&apos;),
                $cfg(&apos;HL7v3.Sender.Name&apos;));
                var xca = getXCARequest($cfg(&apos;HL7v3.Sender.OID&apos;), receiver, sender);


                // Set HL7v3 namespace
                default xml namespace = &quot;urn:hl7-org:v3&quot;;
                xca = new XML(xca.toString());

                soap.*::Body.setChildren(xca);
                channelMap.put(&apos;SOAP&apos;, soap.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
            version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCA Endpoint</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties"
            version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
                <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>false</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
                  <trustedCertificateAliases>
                    <string>emr direct test ca</string>
                    <string>sfd-np.et0121.epichosted.com</string>
                    <string>iheapitest.innovarhealthcare.com</string>
                    <string>emr direct test device subca2</string>
                    <string>maxmd tls rsa eval ca</string>
                    <string>ihe.staging.metriport.com</string>
                  </trustedCertificateAliases>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>carequality</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI />
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI />
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map" />
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>${URL}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map">
              <entry>
                <string>Content-Type</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
              <entry>
                <string>Accept</string>
                <list>
                  <string>application/soap+xml</string>
                </list>
              </entry>
            </headers>
            <parameters class="linked-hash-map" />
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>true</responseXmlBody>
            <responseParseMultipart>false</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/soap+xml</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>false</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${SOAP}</content>
            <contentType>application/soap+xml</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Store the HTTP code only
                  var http = $(&apos;responseStatusLine&apos;);
                  http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g,
                  &apos;&apos;);
                  channelMap.put(&apos;HTTP&apos;, http.toString());


                  // Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
                  var xml = null;

                  var ack= &apos;&apos;,
                  queryResponseCode = &apos;&apos;,
                  homeCommunityId = null,
                  soapFaultCode = null,
                  soapReason = null;

                  try {

                  var soap = String(getBase64Body(msg));

                  // Store for testing
                  channelMap.put(&apos;RESPONSE&apos;, soap.toString());

                  // SOAP level error
                  if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

                  xml = new XML(soap.toString());

                  // Case 6: The Initiating Gateway shall accept a SOAP fault representing a
                  transmission error
                  soapFaultCode =
                  xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Code&apos;].*::[&apos;Value&apos;].toString();
                  soapReason =
                  xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Reason&apos;].*::[&apos;Text&apos;].toString();
                  channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
                  channelMap.put(&apos;RESULT&apos;, soapReason);

                  return;

                  } else {

                  // Ignore SOAP header and extract ITI-55 response (the SOAP message may contain
                  extra namespaces)
                  xml = soap.substring(soap.indexOf(&apos;Body&apos;),
                  soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) +
                  &apos;PRPA_IN201306UV02&gt;&apos;.length);
                  xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);

                  // Validate by generating the XML object
                  xml = new XML(xml);

                  // Acknowledgement code as described in HL7 message processing rules
                  // AA - Receiving application successfully processed message
                  // AE - Receiving application found error in processing message. Sending error
                  response with additional error detail information
                  // AR - Receiving application failed to process message for reason unrelated to
                  content or format
                  ack =
                  xml.*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString();
                  channelMap.put(&apos;ACK&apos;, ack.toString());

                  // The result status of the query
                  // OK - Query reponse data found for 1 or more result sets matching the query
                  request specification
                  // NF - No errors, but no data was found matching the query request specification
                  // AE - Query or application error
                  // QE - Problem with input Parmeters error
                  queryResponseCode =
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
                  channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());

                  }

                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 1: One match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching
                  the criteria sent in the query parameters
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // One RegistrationEvent (and the associated Patient role, subject of that event)
                  is returned from the patient information source for the patient record found.


                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // A globally unique identifier for a community
                  if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;)
                  &amp;&amp;
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;))
                  {
                  homeCommunityId =
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();
                  // Store for the next channel
                  channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
                  channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);
                  }

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 2: Multiple match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to
                  matching the criteria sent in the query parameters and the policy allows returning
                  multiple.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // One RegistrationEvent (and the associated Patient role, subject of that event)
                  is returned for each patient record found.

                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Sample needed

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to
                  matching the criteria sent in the query parameters but no matches
                  // close enough for the necessary assurance level and more attributes might allow
                  the Responding Gateway to return a match.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // No RegistrationEvent is returned in the response, but the Responding Gateway
                  provides a suggestion in terms of demographics that may help identify a match.

                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Sample needed

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 4: No match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to
                  matching the criteria sent in the query parameters.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // NF (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // There is no RegistrationEvent returned in the response.


                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Define additional processing logic here

                  channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>CASE 5: Application error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request.
                  // This may be because the request came synchronously and an asynchronous request
                  may be feasible, or because the Responding Gateway is overloaded
                  // with other requests and does not expect to answer for a significant period of
                  time.
                  // It may also be that the Responding Gateway may need some manual configuration
                  update to authorize responder or another error occurred while
                  // the Responding Gateway was processing the message payload.
                  // AE (application error) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // AE (application error) is returned in QueryAck.queryResponseCode (control act
                  wrapper)
                  // There is no RegistrationEvent returned in the response.

                  if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 ||
                  [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try
                  {

                  var reason = &apos;&apos;;
                  for each (var trigger in
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;])
                  {
                  reason +=
                  trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString()
                  + &apos; &apos;;
                  }

                  channelMap.put(&apos;RESULT&apos;, reason.toString().trim());

                  // Stop further processing
                  return;

                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
              version="4.4.2">
              <serializationProperties
                class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
                version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
                version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties
                class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
                version="4.4.2">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
                version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>Q_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>false</enabled>
          <lastModified>
            <time>1701056106096</time>
            <timezone>America/Los_Angeles</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>6cdb6776-3488-47c6-8c90-2015ea051f93</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>XCPD App Interface</name>
      <description>XCPD App Interface channel&#xd;
        - forwards a single request back to the calling app&#xd;
        &#xd;
        Last updated: Nov 23 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties />
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements />
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
            version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>2</metaDataId>
          <name>App Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties />
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables />
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data

        // Store for the XCPD ITI-55 Processor
        globalMap.put(&apos;XCPDAppInterface&apos;, channelId);

        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1700855547373</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>f6899f98-6671-44f9-a764-d5f7c1858f02</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCPD Bulk Interface</name>
      <description>XCPD Bulk Interface channel&#xd;
        - expects to receive a JSON array containing requests to be transmitted to the XCPD
        Interface channel&#xd;
        - takes individual requests and sends to the XCPD Interface channel&#xd;
        &#xd;
        Comments:&#xd;
        - see example of the request here:
        https://drive.google.com/drive/folders/1yKVHYyQPhkCHDo9Ow8lpT4vFHq7LY_9O&#xd;
        &#xd;
        TODO: Verify response and increase processedCount&#xd;
        &#xd;
        Last updated: Nov 08 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases />
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias />
              <ocspEnabled>false</ocspEnabled>
              <ocspURI />
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI />
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map" />
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcpd</contextPath>
          <timeout>30000</timeout>
          <staticResources />
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse HTTP request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>logger.debug(msg.toString());


                var json = null, error = null;

                // HTTP 400 Bad Request - by default, the server cannot or will not process the
                request
                channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


                // Destination is not needed
                destinationSet.removeAll();


                // Decode and parse incoming JSON request
                json = getBase64Content(msg, &apos;json&apos;);


                // Validate request
                if (&apos;string&apos; == typeof json) {
                error = &apos;ERROR - &apos; + ex;
                } else {

                // HTTP 202 Accepted - the request is an array of entries and has been accepted for
                further processing
                if (Array.isArray(json)) {
                channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
                } else {
                error = &apos;ERROR - Incoming feed is not an array of entries&apos;;
                }
                }


                // Cease processing in case of an error
                if (error) {
                channelMap.put(&apos;NOTE&apos;, error);
                throw error;
                }</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse entries</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var totalCount = 0,
                processedCount = 0;

                // Loop through all request entries
                if (json) {
                json.forEach(function(entry) {

                totalCount++;
                var errorCount = 0;

                // Check for required parameters
                try {

                if (!entry.hasOwnProperty(&apos;urlXCPD&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                } else if (!entry.hasOwnProperty(&apos;urlDQ&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                } else if (!entry.hasOwnProperty(&apos;urlDR&apos;) || 0 ==
                entry.urlXCPD.toString().length) {
                errorCount++
                }

                } catch(ex) {errorCount++}

                // Pass to the XCPD Interface channel to process
                if (0 == errorCount) {

                var result =
                router.routeMessageByChannelId(globalMap.get(&apos;XCPDInterface&apos;),
                JSON.stringify(entry, null, 2));
                // TODO: Verify response and increase processedCount

                } else {
                channelMap.put(&apos;NOTE&apos;, &apos;ERROR - &apos; + errorCount.toString() +
                &apos; error(s) is/are found in the entries&apos;);
                }
                });
                }

                // Store for stat
                channelMap.put(&apos;TCOUNT&apos;, totalCount.toString());
                channelMap.put(&apos;PCOUNT&apos;, processedCount.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
            version="4.4.2">
            <serializationProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
              version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
              version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>Stub</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties />
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>none</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables />
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TOTAL</name>
            <type>STRING</type>
            <mappingName>TCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>PROCESSED</name>
            <type>STRING</type>
            <mappingName>PCOUNT</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>OUTCOME</name>
            <type>STRING</type>
            <mappingName>NOTE</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1700861715017</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</id>
      <nextMetaDataId>5</nextMetaDataId>
      <name>XCPD ITI-55 Processor</name>
      <description>XCPD ITI-55 Processor channel&#xd;
        - Generates ITI-55 &quot;Cross Gateway Patient Discovery&quot; SOAP message&#xd;
        - Calls XCPD endpoint&#xd;
        - Processes responses&#xd;
        &#xd;
        Last updated: Nov 24 2023</description>
      <revision>3</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="4.4.2">
          <pluginProperties />
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>10</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Set stats</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>// Store for stat
                channelMap.put(&apos;MSG_ID&apos;, msg.id.toString());
                channelMap.put(&apos;CUSTOMER_ID&apos;, msg.cxId.toString());

                // Store for further processing
                channelMap.put(&apos;REQUEST&apos;, msg);

                // Set Responding Gateway endpoint
                channelMap.put(&apos;URL&apos;, msg.urlXCPD.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate Query Parameters</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>// Check for the FHIR Patient resource in the incoming message
                if (!msg.hasOwnProperty(&apos;patientResource&apos;)) throw &apos;ERROR - The
                required FHIR Patient resource is missing. The processing has been stopped.&apos;;

                // The query parameters below are constrained in the PRPA_MT201306IHEPCD [Patient
                Registry Query By Demographics] message
                // The order follows that of the PRPA_MT201306UV02 [Patient Registry Query By
                Demographics] message

                /*
                To ensure the XML is valid, parameters must be in the following order:
                livingSubjectAdministrativeGender
                livingSubjectBirthPlaceAddress
                livingSubjectBirthPlaceName
                livingSubjectBirthTime
                livingSubjectDeceasedTime -- Not used in XCPD ITI-55 query
                livingSubjectId
                livingSubjectName
                mothersMaidenName
                otherIDsScopingOrganization -- Not used in XCPD ITI-55 query
                patientAddress
                patientStatusCode -- Not used in XCPD ITI-55 query
                patientTelecom
                principalCareProviderId
                principalCareProvisionId -- Not used in XCPD ITI-55 query
                */

                var patient = msg.patientResource;
                var parameterList = new XMLList();

                // Values from extensions
                var birthPlaceAddress = null,
                birthDateTime = null,
                mothersMaidenName = null;

                if (patient.hasOwnProperty(&apos;extension&apos;)) {
                try {
                var i = patient.extension.findIndex(function(entry) {return
                &apos;http://hl7.org/fhir/StructureDefinition/patient-birthPlace&apos; ==
                entry.url.toString();});
                birthPlaceAddress = patient.extension[i].valueAddress;
                } catch(ex) {}
                try {
                var i = patient.extension.findIndex(function(entry) {return
                &apos;http://hl7.org/fhir/StructureDefinition/patient-birthTime&apos; ==
                entry.url.toString();});
                birthDateTime = patient.extension[i].valueDateTime.toString();
                } catch(ex) {}
                try {
                var i = patient.extension.findIndex(function(entry) {return
                &apos;http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName&apos; ==
                entry.url.toString();});
                mothersMaidenName = patient.extension[i].valueString.toString();
                } catch(ex) {}
                }

                // This query parameter is a code representing the administrative gender of a living
                subject in a patient registry
                // livingSubjectAdministrativeGender [0..1], value [1..1]
                if (patient.hasOwnProperty(&apos;gender&apos;)) {
                var gender = getLivingSubjectAdministrativeGender(patient);
                if (gender) parameterList += gender;
                }


                // This query parameter is a patient&apos;s birthplace represented as an address
                // livingSubjectBirthPlaceAddress [0..1], value [1..*]
                if (birthPlaceAddress) {
                var address = getLivingSubjectBirthPlaceAddress(birthPlaceAddress);
                if (address) parameterList += address;
                }


                // This query parameter is a patient&apos;s birthplace represented as a place name
                // livingSubjectBirthPlaceName [0..1], value [1..*]
                var birthPlace = getLivingSubjectBirthPlaceName(patient);
                if (birthPlace) parameterList += birthPlace;


                // This query parameter is the birth date of a living subject
                // livingSubjectBirthTime [0..1], value [1..1]
                var birthTime = null;
                if (birthDateTime) {
                birthTime = getLivingSubjectBirthTime(birthDateTime);
                } else if (patient.hasOwnProperty(&apos;birthDate&apos;)) {
                birthTime = getLivingSubjectBirthTime(patient.birthDate.toString());
                }
                if (birthTime) parameterList += birthTime;


                // This query parameter is an identifier for a living subject.
                // This is NOT the identifier assigned by the target registry.
                // In fact, the identifier has no context (scoping organization) other than the
                namespace from which the identifier was issued (OID root).
                // livingSubjectId [0..*], value [1..*]
                var patientID = getLivingSubjectId(patient);
                if (patientID) parameterList += patientID;


                // This query parameter is the name of a living subject.
                // If multiple instances of LivingSubjectName are provided, the receiver must
                consider them as possible alternatives, logically connected with an &quot;or&quot;.
                // livingSubjectName [0..*], value [1..1]
                if (patient.hasOwnProperty(&apos;name&apos;)) {
                patient.name.forEach(function(entry) {
                var name = getLivingSubjectName(entry);
                if (name) parameterList += name;
                });
                }


                // This query parameter is the maiden name of a focal person&apos;s mother.
                // It is included as a parameter because it is a common attribute for confirming the
                identity of persons in some registries.
                // mothersMaidenName [0..*], value [1..1]
                if (mothersMaidenName) {
                var mMaidenName = getMothersMaidenName(mothersMaidenName);
                if (mMaidenName) parameterList += mMaidenName;
                }


                // This query parameter is a postal address for corresponding with a living subject
                in the context of the target patient registry.
                // There shall be only a single PatientAddress element.
                // Multiple instances of the value element within a Patient Address may be specified
                and are combined with OR logic.
                // patientAddress [0..1], value [1..*]
                if (patient.hasOwnProperty(&apos;address&apos;)) {
                var address = getPatientAddress(patient.address);
                if (address) parameterList += address;
                }


                // This query parameter is a telecommunications address for communicating with a
                living subject in the context of the target patient registry.
                // It could be a telephone number, fax number or even an email address. There shall
                be only a single PatientTelecom element.
                // Multiple instances of the value element within a PatientTelecom may be specified
                and are combined with OR logic.
                // patientTelecom [0..*] getPatientTelecom()
                if (patient.hasOwnProperty(&apos;telecom&apos;)) {
                var telecom = getPatientTelecom(patient.telecom);
                if (telecom) parameterList += telecom;
                }


                // This query parameter is the care provider identifier of a person who has been
                assigned as the principal care provider of this patient.
                // The requestor may specify multiple PrincipalCareProviderId elements which
                responder shall consider as possible alternatives, logically connected with an
                &quot;or&quot;.
                // principalCareProviderId [0..*], value [1..1]
                if (msg.hasOwnProperty(&apos;principalCareProviderIds&apos;)) {
                msg.principalCareProviderIds.forEach(function(id) {
                var provider = getPrincipalCareProviderId(id);
                if (provider) parameterList += provider;
                });
                }


                channelMap.put(&apos;PARAMETERS&apos;, parameterList);

                // ========== Following parameters are present in PRPA_MT201306UV02 but not used in
                PRPA_MT201306IHEPCD ==========
                // This query parameter is the death date of a living subject. It is used to find
                patients who have died on a known date or within a date interval
                // livingSubjectDeceasedTime [0..*]

                // This query parameter is another organization that has registered the focal
                patient in its registry.
                // It is used to find living subjects who have been registered by a particular
                organization.
                // otherIDsScopingOrganization [0..*]

                // This query parameter is the status of a record in the target patient registry.
                // It is used to find records in a particular state such as &quot;active&quot; or
                &quot;completed&quot;.
                // patientStatusCode [0..*]

                // This query parameter is the identifier the explicit acceptance for some aspect of
                a patient&apos;s care by a health care provider.
                // This identifies a Care Provision act.
                // principalCareProvisionId [0..*]</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Generate SOAP Envelope</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>false</enabled>
              <script>/**
                THIS STEP IS NOT USED DUE TO INTEROP TEMPLATE REQUIREMENTS
                */

                // Generate the initial SOAP message
                var soap = getSOAPEnvelope(msg.urlXCPD.toString(),
                &apos;urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery&apos;);

                // Generate PRPA_IN201305UV02 [Patient Registry Find Candidates Query] message
                var receiver = getHL7v3Receiver(msg.gatewayOID.toString(), msg.urlXCPD.toString());
                var sender = getHL7v3Sender($cfg(&apos;HL7v3.Sender.OID&apos;),
                $cfg(&apos;HL7v3.Sender.Name&apos;));
                var xcpd = getXCPDRequest($cfg(&apos;HL7v3.Sender.OID&apos;), receiver, sender);
                xcpd[&apos;controlActProcess&apos;][&apos;queryByParameter&apos;][&apos;parameterList&apos;].setChildren(parameterList);
                // Set HL7v3 namespace
                default xml namespace = &quot;urn:hl7-org:v3&quot;;
                xcpd = new XML(xcpd.toString());

                soap.*::Body.setChildren(xcpd);
                channelMap.put(&apos;SOAP&apos;, soap.toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
            version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>4</metaDataId>
          <name>XCPD Interop Endpoint</name>
          <properties
            class="com.mirth.connect.connectors.interop.xcpd.shared.XCPDDispatcherProperties"
            version="4.4.2">
            <pluginProperties>
              <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
                <enabled>true</enabled>
                <clientAuthentication>DISABLED</clientAuthentication>
                <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
                <trustAllCertificates>false</trustAllCertificates>
                <trustedCertificates>
                  <trustedCertificateAliases>
                    <string>emr direct test ca</string>
                    <string>sfd-np.et0121.epichosted.com</string>
                    <string>iheapitest.innovarhealthcare.com</string>
                    <string>emr direct test device subca2</string>
                    <string>maxmd tls rsa eval ca</string>
                    <string>ihe.staging.metriport.com</string>
                  </trustedCertificateAliases>
                  <trustCACerts>true</trustCACerts>
                </trustedCertificates>
                <localCertificateAlias>carequality</localCertificateAlias>
                <ocspEnabled>false</ocspEnabled>
                <ocspURI />
                <ocspHardFail>false</ocspHardFail>
                <crlEnabled>false</crlEnabled>
                <crlURI />
                <crlHardFail>false</crlHardFail>
                <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
                <trustedSubjectDNs class="linked-hash-map" />
                <hideIssuerDNs>false</hideIssuerDNs>
                <allowExpiredCertificates>false</allowExpiredCertificates>
                <implicitFTPS>true</implicitFTPS>
                <useSTARTTLS>false</useSTARTTLS>
              </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            </pluginProperties>
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>1000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>3</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <wsdlUrl>&lt;Using Built-in Default WSDL&gt;</wsdlUrl>
            <service>{urn:ihe:iti:xcpd:2009}RespondingGateway_Service</service>
            <port>{urn:ihe:iti:xcpd:2009}RespondingGateway_Port_Soap</port>
            <operation>RespondingGateway_PRPA_IN201305UV02</operation>
            <locationURI>${URL}</locationURI>
            <socketTimeout>30000</socketTimeout>
            <useAuthentication>false</useAuthentication>
            <username></username>
            <password></password>
            <envelope>&lt;soap:Envelope
              xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;
              xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;soap:Header&gt;${SOAP_HEADER}&lt;/soap:Header&gt;
              &lt;soap:Body&gt;
              &lt;urn:PRPA_IN201305UV02 ITSVersion=&quot;XML_1.0&quot;&gt;
              &lt;urn:id extension=&quot;${ID_EXT}&quot; root=&quot;${ID_ROOT}&quot;/&gt;
              &lt;urn:creationTime value=&quot;${CREATION_TIME}&quot;/&gt;
              &lt;urn:interactionId extension=&quot;PRPA_IN201305UV02&quot;
              root=&quot;2.16.840.1.113883.1.6&quot;/&gt;
              &lt;urn:processingCode code=&quot;T&quot;/&gt;
              &lt;urn:processingModeCode code=&quot;T&quot;/&gt;
              &lt;urn:acceptAckCode code=&quot;AL&quot;/&gt;
              &lt;urn:receiver typeCode=&quot;RCV&quot;&gt;
              &lt;urn:device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
              &lt;urn:id root=&quot;${RCV_ID}&quot;/&gt;
              &lt;urn:telecom value=&quot;${RCV_URL}&quot;/&gt;
              &lt;/urn:device&gt;
              &lt;/urn:receiver&gt;
              &lt;urn:sender typeCode=&quot;SND&quot;&gt;
              &lt;urn:device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
              &lt;urn:id root=&quot;${SND_OID}&quot;/&gt;
              &lt;urn:asAgent classCode=&quot;AGNT&quot;&gt;
              &lt;urn:representedOrganization classCode=&quot;ORG&quot;
              determinerCode=&quot;INSTANCE&quot;&gt;
              &lt;urn:id root=&quot;${SND_OID}&quot;/&gt;
              &lt;urn:name&gt;${SND_NAME}&lt;/urn:name&gt;
              &lt;/urn:representedOrganization&gt;
              &lt;/urn:asAgent&gt;
              &lt;/urn:device&gt;
              &lt;/urn:sender&gt;
              &lt;urn:controlActProcess classCode=&quot;CACT&quot;
              moodCode=&quot;EVN&quot;&gt;${ACT_PAYLOAD}&lt;/urn:controlActProcess&gt;
              &lt;/urn:PRPA_IN201305UV02&gt;
              &lt;/soap:Body&gt;
              &lt;/soap:Envelope&gt;</envelope>
            <oneWay>false</oneWay>
            <headers class="linked-hash-map" />
            <headersVariable></headersVariable>
            <isUseHeadersVariable>false</isUseHeadersVariable>
            <useMtom>false</useMtom>
            <attachmentNames />
            <attachmentContents />
            <attachmentTypes />
            <attachmentsVariable></attachmentsVariable>
            <isUseAttachmentsVariable>false</isUseAttachmentsVariable>
            <soapAction>urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery</soapAction>
            <wsdlDefinitionMap>
              <map class="linked-hash-map">
                <entry>
                  <string>{urn:ihe:iti:xcpd:2009}RespondingGateway_Service</string>
                  <com.mirth.connect.connectors.ws.DefinitionServiceMap_-DefinitionPortMap>
                    <map class="linked-hash-map">
                      <entry>
                        <string>{urn:ihe:iti:xcpd:2009}RespondingGateway_Port_Soap</string>
                        <com.mirth.connect.connectors.ws.DefinitionServiceMap_-PortInformation>
                          <operations>
                            <string>RespondingGateway_PRPA_IN201305UV02</string>
                          </operations>
                          <actions>
                            <string>urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery</string>
                          </actions>
                        </com.mirth.connect.connectors.ws.DefinitionServiceMap_-PortInformation>
                      </entry>
                    </map>
                  </com.mirth.connect.connectors.ws.DefinitionServiceMap_-DefinitionPortMap>
                </entry>
              </map>
            </wsdlDefinitionMap>
            <tcpMode>false</tcpMode>
            <remoteAddress></remoteAddress>
            <remotePort></remotePort>
            <useUDDI>false</useUDDI>
            <uddiSummary></uddiSummary>
            <useSOAPTemplate>true</useSOAPTemplate>
            <useDefaultWsdl>true</useDefaultWsdl>
            <convertResponseToJSON>false</convertResponseToJSON>
            <mustUnderstand>false</mustUnderstand>
            <storeSOAPPayloads>true</storeSOAPPayloads>
            <expandedJsonFormat>false</expandedJsonFormat>
            <validateSAML>false</validateSAML>
            <generateSAML>true</generateSAML>
            <samlGenerationProperties version="4.4.2">
              <homeCommunityId>1.2.3</homeCommunityId>
              <issuerEmail>support@metriport.com</issuerEmail>
              <subjectLocality>127.0.0.1</subjectLocality>
              <subjectLocalityDNS>localhost</subjectLocalityDNS>
              <includeConditions>true</includeConditions>
              <conditionsExpirationDuration>300000</conditionsExpirationDuration>
              <conditionsAudienceUseCustom>false</conditionsAudienceUseCustom>
              <conditionsAudience></conditionsAudience>
              <useSSLManager>true</useSSLManager>
              <keyStorePath></keyStorePath>
              <keyStorePassword></keyStorePassword>
              <keyAlias>carequality</keyAlias>
              <keyPassword></keyPassword>
              <stringAttributes>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:subject-id</name>
                  <format>URI_REFERENCE</format>
                  <value>Administrator</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:organization</name>
                  <format>URI_REFERENCE</format>
                  <value>NextGen</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:organization-id</name>
                  <format>URI_REFERENCE</format>
                  <value>urn:oid:${homeCommunityId}</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
                  <name>urn:nhin:names:saml:homeCommunityId</name>
                  <format>URI_REFERENCE</format>
                  <value>urn:oid:${homeCommunityId}</value>
                </com.mirth.connect.connectors.interop.shared.SAMLStringAttribute>
              </stringAttributes>
              <hl7Attributes>
                <com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                  <name>urn:oasis:names:tc:xacml:2.0:subject:role</name>
                  <format>URI_REFERENCE</format>
                  <tagName>Role</tagName>
                  <code>224608005</code>
                  <codeSystem>2.16.840.1.113883.6.96</codeSystem>
                  <codeSystemName>SNOMED_CT</codeSystemName>
                  <displayName>Administrative healthcare staff</displayName>
                </com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                <com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
                  <name>urn:oasis:names:tc:xspa:1.0:subject:purposeofuse</name>
                  <format>URI_REFERENCE</format>
                  <tagName>PurposeOfUse</tagName>
                  <code>TREATMENT</code>
                  <codeSystem>2.16.840.1.113883.3.18.7.1</codeSystem>
                  <codeSystemName>nhin-purpose</codeSystemName>
                  <displayName>Treatment</displayName>
                </com.mirth.connect.connectors.interop.shared.SAMLHL7CEAttribute>
              </hl7Attributes>
            </samlGenerationProperties>
          </properties>
          <transformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>SOAP Header</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Set the required variables for the XCPD Interop template
                  var header = &apos;&lt;soap:Action
                  xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery&lt;/soap:Action&gt;&apos;
                  +
                  &apos;&lt;soap:MessageID
                  xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;urn:uuid:&apos; +
                  msg.id.toString() + &apos;&lt;/soap:MessageID&gt;&apos; +
                  &apos;&lt;soap:To xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;&apos;
                  + msg.urlXCPD.toString() + &apos;&lt;/soap:To&gt;&apos; +
                  &apos;&lt;soap:ReplyTo
                  xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;&apos; +
                  &apos;&lt;soap:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/soap:Address&gt;&apos;
                  +
                  &apos;&lt;/soap:ReplyTo&gt;&apos;;
                  channelMap.put(&apos;SOAP_HEADER&apos;, header.toString());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>PRPA Payload</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// Transmission Wrapper settings
                  channelMap.put(&apos;ID_EXT&apos;, msg.id.toString());
                  channelMap.put(&apos;ID_ROOT&apos;, $cfg(&apos;HL7v3.Sender.OID&apos;));
                  channelMap.put(&apos;CREATION_TIME&apos;,
                  DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;));
                  channelMap.put(&apos;RCV_ID&apos;, msg.gatewayOID.toString());
                  channelMap.put(&apos;RCV_URL&apos;, msg.urlXCPD.toString());
                  channelMap.put(&apos;SND_OID&apos;, $cfg(&apos;HL7v3.Sender.OID&apos;));
                  channelMap.put(&apos;SND_NAME&apos;, $cfg(&apos;HL7v3.Sender.Name&apos;));


                  // ControlAct payload settings
                  var controlAct = &lt;urn:controlActProcess classCode=&quot;CACT&quot;
                  moodCode=&quot;EVN&quot; xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
                  &lt;urn:code code=&quot;PRPA_TE201305UV02&quot;
                  codeSystem=&quot;2.16.840.1.113883.1.6&quot;/&gt;
                  &lt;urn:queryByParameter&gt;
                  &lt;urn:queryId extension={msg.id.toString()}
                  root={$cfg(&apos;HL7v3.Sender.OID&apos;)}/&gt;
                  &lt;urn:parameterList/&gt;
                  &lt;/urn:queryByParameter&gt;
                  &lt;/urn:controlActProcess&gt;;

                  var parameterList = channelMap.get(&apos;PARAMETERS&apos;);
                  if (parameterList &amp;&amp; parameterList.length() &gt; 0) {
                  // Add search parameters
                  controlAct.*::queryByParameter.*::parameterList += parameterList;

                  // Retrieve all child elements of the controlAct
                  var controlActString =
                  controlAct.toString().replace(&apos;&lt;urn:controlActProcess
                  xmlns:urn=&quot;urn:hl7-org:v3&quot; classCode=&quot;CACT&quot;
                  moodCode=&quot;EVN&quot;&gt;&apos;, &apos;&apos;);
                  controlActString =
                  controlActString.replace(&apos;&lt;/urn:controlActProcess&gt;&apos;,
                  &apos;&apos;);
                  channelMap.put(&apos;ACT_PAYLOAD&apos;, controlActString.toString());

                  } else {
                  throw &apos;XCPD ITI-55 Processor - The query parameter list is not found or
                  empty.&apos;;
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties
                class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
                version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
                version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Process response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Response: &apos; + msg.toString());


                  // Store the HTTP code only
                  var http = $(&apos;responseStatusLine&apos;);
                  http = String(http).replace(&apos;HTTP/1.1 &apos;, &apos;&apos;).replace(/\D/g,
                  &apos;&apos;);
                  channelMap.put(&apos;HTTP&apos;, http.toString());


                  // Decode and parse XCPD ITI-55 (Cross Gateway Patient Discovery Response) message
                  var xml = null;

                  var ack= &apos;&apos;,
                  queryResponseCode = &apos;&apos;,
                  homeCommunityId = null,
                  soapFaultCode = null,
                  soapReason = null;

                  try {

                  var soap = String(getBase64Body(msg));

                  // Store for testing
                  channelMap.put(&apos;RESPONSE&apos;, soap.toString());

                  // SOAP level error
                  if (soap.indexOf(&apos;Fault&apos;) &gt; 0) {

                  xml = new XML(soap.toString());

                  // Case 6: The Initiating Gateway shall accept a SOAP fault representing a
                  transmission error
                  soapFaultCode =
                  xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Code&apos;].*::[&apos;Value&apos;].toString();
                  soapReason =
                  xml.*::[&apos;Body&apos;].*::[&apos;Fault&apos;].*::[&apos;Reason&apos;].*::[&apos;Text&apos;].toString();
                  channelMap.put(&apos;ACK&apos;, &apos;SOAP_FAULT&apos;);
                  channelMap.put(&apos;RESULT&apos;, soapReason);

                  return;

                  } else {

                  // Ignore SOAP header and extract ITI-55 response (the SOAP message may contain
                  extra namespaces)
                  xml = soap.substring(soap.indexOf(&apos;Body&apos;),
                  soap.indexOf(&apos;PRPA_IN201306UV02&gt;&apos;) +
                  &apos;PRPA_IN201306UV02&gt;&apos;.length);
                  xml = xml.substring(xml.indexOf(&apos;&gt;&apos;) + 1);

                  // Validate by generating the XML object
                  xml = new XML(xml);

                  // Acknowledgement code as described in HL7 message processing rules
                  // AA - Receiving application successfully processed message
                  // AE - Receiving application found error in processing message. Sending error
                  response with additional error detail information
                  // AR - Receiving application failed to process message for reason unrelated to
                  content or format
                  ack =
                  xml.*::[&apos;acknowledgement&apos;].*::[&apos;typeCode&apos;][&apos;@code&apos;].toString();
                  channelMap.put(&apos;ACK&apos;, ack.toString());

                  // The result status of the query
                  // OK - Query reponse data found for 1 or more result sets matching the query
                  request specification
                  // NF - No errors, but no data was found matching the query request specification
                  // AE - Query or application error
                  // QE - Problem with input Parmeters error
                  queryResponseCode =
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;queryAck&apos;].*::[&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
                  channelMap.put(&apos;QACK&apos;, queryResponseCode.toString());

                  }

                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 1: One Match</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>// CASE 1: The Responding Gateway finds exactly one patient record matching
                  the criteria sent in the query parameters
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // One RegistrationEvent (and the associated Patient role, subject of that event)
                  is returned from the patient information source for the patient record found.


                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // A globally unique identifier for a community
                  if (xml.*::[&apos;controlActProcess&apos;].hasOwnProperty(&apos;subject&apos;)
                  &amp;&amp;
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].hasOwnProperty(&apos;registrationEvent&apos;))
                  {
                  homeCommunityId =
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;subject&apos;].*::[&apos;registrationEvent&apos;].*::[&apos;custodian&apos;].*::[&apos;assignedEntity&apos;].*::[&apos;id&apos;][&apos;@root&apos;].toString();
                  // Store for the next channel
                  channelMap.put(&apos;HOMECOMMUNITY&apos;, homeCommunityId.toString());
                  channelMap.put(&apos;RESULT&apos;, &apos;ONE MATCH&apos;);

                  // TODO: Generate FHIR Patient resource from the response
                  }

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 2: Multiple Match</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 2: The Responding Gateway finds more than one patient close to
                  matching the criteria sent in the query parameters and the policy allows returning
                  multiple.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // One RegistrationEvent (and the associated Patient role, subject of that event)
                  is returned for each patient record found.

                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Sample needed

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 3: Multiple matches need refinement</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 3: The Responding Gateway finds more than one patient close to
                  matching the criteria sent in the query parameters but no matches
                  // close enough for the necessary assurance level and more attributes might allow
                  the Responding Gateway to return a match.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // OK (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // No RegistrationEvent is returned in the response, but the Responding Gateway
                  provides a suggestion in terms of demographics that may help identify a match.

                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;OK&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Sample needed

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 4: No Match</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 4: The Responding Gateway finds no patients anywhere close to
                  matching the criteria sent in the query parameters.
                  // AA (application accept) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // NF (data found, no errors) is returned in QueryAck.queryResponseCode (control
                  act wrapper)
                  // There is no RegistrationEvent returned in the response.


                  if (&apos;AA&apos; == ack.toString() &amp;&amp; &apos;NF&apos; ==
                  queryResponseCode.toString()) try {

                  // TODO: Define additional processing logic here

                  channelMap.put(&apos;RESULT&apos;, &apos;NO MATCH&apos;);

                  // Stop further processing
                  return;
                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
                <name>Case 5: Application Error</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>// Case 5: The Responding Gateway is unable to satisfy the request.
                  // This may be because the request came synchronously and an asynchronous request
                  may be feasible, or because the Responding Gateway is overloaded
                  // with other requests and does not expect to answer for a significant period of
                  time.
                  // It may also be that the Responding Gateway may need some manual configuration
                  update to authorize responder or another error occurred while
                  // the Responding Gateway was processing the message payload.
                  // AE (application error) is returned in Acknowledgement.typeCode (transmission
                  wrapper).
                  // AE (application error) is returned in QueryAck.queryResponseCode (control act
                  wrapper)
                  // There is no RegistrationEvent returned in the response.

                  if ([&apos;AE&apos;,&apos;AR&apos;].indexOf(ack.toString()) &gt; -1 ||
                  [&apos;AE&apos;,&apos;QE&apos;].indexOf(queryResponseCode.toString()) &gt; -1) try
                  {

                  var operationOutcome = {
                  &quot;resourceType&quot;: &quot;OperationOutcome&quot;,
                  &quot;id&quot;: &quot;&quot;,
                  &quot;issue&quot;: []
                  };
                  operationOutcome.id = $c(&apos;MSG_ID&apos;);

                  try {
                  var issue = {
                  &quot;severity&quot;: &quot;error&quot;,
                  &quot;code&quot;: &quot;structure&quot;,
                  &quot;details&quot;: {&quot;text&quot;: &quot;&quot;}
                  };
                  issue.code =
                  xml.*::[&apos;acknowledgement&apos;].*::[&apos;acknowledgementDetail&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString();
                  issue.details.text =
                  xml.*::[&apos;acknowledgement&apos;].*::[&apos;acknowledgementDetail&apos;].*::[&apos;text&apos;].toString();
                  operationOutcome.issue.push(issue);
                  } catch(e) {}

                  for each (var trigger in
                  xml.*::[&apos;controlActProcess&apos;].*::[&apos;reasonOf&apos;].*::[&apos;detectedIssueEvent&apos;].*::[&apos;triggerFor&apos;])
                  {

                  reason +=
                  trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString()
                  + &apos; &apos;;
                  var issue = {
                  &quot;severity&quot;: &quot;warning&quot;,
                  &quot;code&quot;: &quot;invalid&quot;,
                  &quot;details&quot;: {&quot;text&quot;: &quot;&quot;}
                  };
                  issue.details.text =
                  trigger.*::[&apos;actOrderRequired&apos;].*::[&apos;code&apos;][&apos;@code&apos;].toString();
                  operationOutcome.issue.push(issue);
                  }

                  var _response = $c(&apos;REQUEST&apos;);
                  delete _response.urlXCPD;
                  delete _response.urlDQ;
                  delete _response.urlDR;
                  delete _response.principalCareProviderIds;
                  _response.patientMatch = false;
                  _response.processingTimestamp =
                  DateUtil.getCurrentDate(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.sssZ&quot;);
                  _response.operationOutcome = operationOutcome;

                  // Send the response back to the app
                  var result =
                  router.routeMessageByChannelId(globalMap.get(&apos;XCPDAppInterface&apos;),
                  JSON.stringify(_response));

                  // Stop further processing
                  return;

                  } catch(ex) {
                  channelMap.put(&apos;RESPONSE_ERROR&apos;, ex.toString());
                  }</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">
              ICAgIDxyZWFzb25PZiB0eXBlQ29kZT0iUlNPTiI+CiAgICAgIDxkZXRlY3RlZElzc3VlRXZlbnQgY2xhc3NDb2RlPSJBTFJUIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICA8IS0tIChJSEUgR2F6ZWxsZSkgUmVxdWlyZWQgdG8gc2V0IEBjb2RlIHRvIF9BY3RBZG1pbmlzdHJhdGl2ZURldGVjdGVkSXNzdWVNYW5hZ2VtZW50Q29kZSB0byB2YWxpZGF0ZSAtLT4KICAgICAgICA8Y29kZSBjb2RlPSJfQWN0QWRtaW5pc3RyYXRpdmVEZXRlY3RlZElzc3VlTWFuYWdlbWVudENvZGUiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjUuNCIgY29kZVN5c3RlbU5hbWU9IkFjdCBDb2RlIi8+CiAgICAgICAgPG1pdGlnYXRlZEJ5IHR5cGVDb2RlPSJNSVRHVCI+CiAgICAgICAgICA8IS0tIChJSEUpIFNwZWNpZnkgZGV0YWlscyBhYm91dCBwcm9ibGVtcyBoYW5kbGluZyByZXF1ZXN0IC0tPgogICAgICAgICAgPGRldGVjdGVkSXNzdWVNYW5hZ2VtZW50IGNsYXNzQ29kZT0iQUNUIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgPGNvZGUgY29kZT0iUmVzcG9uZGVyQnVzeSIgY29kZVN5c3RlbT0iMS4zLjYuMS40LjEuMTkzNzYuMS4yLjI3LjMiLz4KICAgICAgICAgIDwvZGV0ZWN0ZWRJc3N1ZU1hbmFnZW1lbnQ+CiAgICAgICAgPC9taXRpZ2F0ZWRCeT4KICAgICAgICA8dHJpZ2dlckZvciB0eXBlQ29kZT0iVFJJRyI+CiAgICAgICAgICA8YWN0T3JkZXJSZXF1aXJlZCBjbGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IlJRTyI+CiAgICAgICAgICAgIDwhLS0gKElIRSkgVm9sMmIgLSBUYWJsZSAzLjU1LjQuNC4yLTQgLS0+CiAgICAgICAgICAgIDxjb2RlIGNvZGU9IlBhdGllbnRBZGRyZXNzUmVxdWVzdGVkIiBjb2RlU3lzdGVtPSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjIuMjcuMSIvPgogICAgICAgICAgPC9hY3RPcmRlclJlcXVpcmVkPgogICAgICAgIDwvdHJpZ2dlckZvcj4KICAgICAgPC9kZXRlY3RlZElzc3VlRXZlbnQ+CiAgICA8L3JlYXNvbk9mPgo=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>XML</inboundDataType>
            <outboundDataType>XML</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
              version="4.4.2">
              <serializationProperties
                class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
                version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
                version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="4.4.2">
              <serializationProperties
                class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
                version="4.4.2">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
                version="4.4.2">
                <splitType>Element_Name</splitType>
                <elementName></elementName>
                <level>1</level>
                <query></query>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>XCPD Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HTTP</name>
            <type>STRING</type>
            <mappingName>HTTP</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ACK</name>
            <type>STRING</type>
            <mappingName>ACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>Q_ACK</name>
            <type>STRING</type>
            <mappingName>QACK</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>RESULT</name>
            <type>STRING</type>
            <mappingName>RESULT</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1701055866905</time>
            <timezone>America/Los_Angeles</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
    <channel version="4.4.2">
      <id>2f3a1187-8950-4a03-bc93-181ff1ecb627</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>XCPD Interface</name>
      <description>XCPD Interface channel&#xd;
        - expects to receive a single requests to be transmitted to the XCPD ITI-55 Processor
        channel&#xd;
        &#xd;
        Last updated: Nov 06 2023</description>
      <revision>1</revision>
      <sourceConnector version="4.4.2">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="4.4.2">
          <pluginProperties>
            <com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties version="4.4.2">
              <enabled>false</enabled>
              <clientAuthentication>DISABLED</clientAuthentication>
              <hostnameVerificationEnabled>true</hostnameVerificationEnabled>
              <trustAllCertificates>false</trustAllCertificates>
              <trustedCertificates>
                <trustedCertificateAliases />
                <trustCACerts>true</trustCACerts>
              </trustedCertificates>
              <localCertificateAlias />
              <ocspEnabled>false</ocspEnabled>
              <ocspURI />
              <ocspHardFail>false</ocspHardFail>
              <crlEnabled>false</crlEnabled>
              <crlURI />
              <crlHardFail>false</crlHardFail>
              <subjectDNValidationEnabled>false</subjectDNValidationEnabled>
              <trustedSubjectDNs class="linked-hash-map" />
              <hideIssuerDNs>false</hideIssuerDNs>
              <allowExpiredCertificates>false</allowExpiredCertificates>
              <implicitFTPS>true</implicitFTPS>
              <useSTARTTLS>false</useSTARTTLS>
            </com.mirth.connect.plugins.ssl.model.SSLConnectorPluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="4.4.2">
              <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="4.4.2">
            <host>0.0.0.0</host>
            <port>8082</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="4.4.2">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>false</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>true</xmlBody>
          <parseMultipart>false</parseMultipart>
          <includeMetadata>false</includeMetadata>
          <binaryMimeTypes>application/json</binaryMimeTypes>
          <binaryMimeTypesRegex>false</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>$responseCode</responseStatusCode>
          <responseHeaders class="linked-hash-map">
            <entry>
              <string>X-Intermediary</string>
              <list>
                <string>Mirth Connect 4.4</string>
              </list>
            </entry>
          </responseHeaders>
          <responseHeadersVariable></responseHeadersVariable>
          <useResponseHeadersVariable>false</useResponseHeadersVariable>
          <charset>UTF-8</charset>
          <contextPath>xcpd</contextPath>
          <timeout>30000</timeout>
          <staticResources />
        </properties>
        <transformer version="4.4.2">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.4.2">
              <name>Parse request</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var json = null, error = null;


                // HTTP 400 Bad Request - by default, the server cannot or will not process the
                request
                channelMap.put(&quot;responseCode&quot;, &quot;400&quot;);


                // Decode and parse incoming JSON request if sent over HTTP
                if (msg.toString().startsWith(&apos;&lt;HttpRequest&gt;&apos;)) {
                json = getBase64Content(msg, &apos;json&apos;);
                } else try {
                // Parse JSON request if routed from the XCPD Bulk Interface channel
                json = JSON.parse(msg.toString());
                } catch(ex) {
                error = &apos;ERROR - &apos; + ex;
                }


                // If decoding and parsing the HTTP request fail, it returns an error as a string
                if (&apos;string&apos; == typeof json) {
                error = &apos;ERROR - &apos; + ex;


                } else try {

                // HTTP 202 Accepted - the request is a single entry and has been accepted for
                further processing
                if (!Array.isArray(json)) {

                // Set HTTP response code and processing statistics
                channelMap.put(&quot;responseCode&quot;, &quot;202&quot;);
                channelMap.put(&apos;MSG_ID&apos;, json.id.toString());
                channelMap.put(&apos;CUSTOMER_ID&apos;, json.cxId.toString());

                } else {
                error = &apos;ERROR - Incoming feed is an array of entries&apos;;
                }
                } catch(ex) {
                error = &apos;ERROR - &apos; + ex;
                }


                // Cease processing in case of an error
                if (error) {
                channelMap.put(&apos;NOTE&apos;, error);
                throw error;
                }</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>XML</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties"
            version="4.4.2">
            <serializationProperties
              class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties"
              version="4.4.2">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties"
              version="4.4.2">
              <splitType>Element_Name</splitType>
              <elementName></elementName>
              <level>1</level>
              <query></query>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties
            class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="4.4.2">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
              version="4.4.2">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="4.4.2">
          <elements />
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="4.4.2">
          <metaDataId>1</metaDataId>
          <name>XCPD ITI-55 Interface</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="4.4.2">
            <pluginProperties />
            <destinationConnectorProperties version="4.4.2">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables />
          </properties>
          <transformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="4.4.2">
            <elements />
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties
              class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties"
              version="4.4.2">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties"
                version="4.4.2">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="4.4.2">
            <elements />
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
        return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
        // You only have access to the globalMap and globalChannelMap here to persist data

        // Store for the XCPD Bulk Interface
        globalMap.put(&apos;XCPDInterface&apos;, channelId);

        return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
        // You only have access to the globalMap and globalChannelMap here to persist data
        return;</undeployScript>
      <properties version="4.4.2">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <encryptAttachments>false</encryptAttachments>
        <encryptCustomMetaData>false</encryptCustomMetaData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ENTRY_ID</name>
            <type>STRING</type>
            <mappingName>MSG_ID</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CUSTOMER</name>
            <type>STRING</type>
            <mappingName>CUSTOMER_ID</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="4.4.2">
          <type>None</type>
          <properties />
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1699651914790</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>5</pruneMetaDataDays>
            <pruneContentDays>5</pruneContentDays>
            <archiveEnabled>false</archiveEnabled>
            <pruneErroredMessages>true</pruneErroredMessages>
          </pruningSettings>
          <userId>1</userId>
        </metadata>
      </exportData>
    </channel>
  </channels>
  <channelTags />
  <alerts />
  <codeTemplateLibraries>
    <codeTemplateLibrary version="4.4.2">
      <id>bfcc4549-18ee-414e-b44a-cf8b2fddb9b1</id>
      <name>CDA Library</name>
      <revision>1</revision>
      <lastModified>
        <time>1700976822378</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>Last updated: Nov 16 2023</description>
      <includeNewChannels>false</includeNewChannels>
      <enabledChannelIds>
        <string>660f9e44-4071-4842-8b5f-f2318bf89deb</string>
        <string>64436c91-4c18-4f85-9d6f-e942b70e7fd2</string>
        <string>2e17f9d4-fb39-43ba-87dd-72bac26789ef</string>
        <string>f7efe8c5-8f5a-4312-9376-bee8cce106a1</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>2dfcf0ed-e0bf-4bff-b3bd-44b9b05b883f</string>
        <string>3f38affa-7132-4c4d-8597-2679b2651a13</string>
        <string>7a67af34-88c7-4477-9a33-25176d345ba4</string>
        <string>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</string>
        <string>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</string>
        <string>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</string>
        <string>f6899f98-6671-44f9-a764-d5f7c1858f02</string>
        <string>2f3a1187-8950-4a03-bc93-181ff1ecb627</string>
        <string>4ce23cec-c042-4608-b258-070cdad2d52d</string>
        <string>7c527d59-374c-4bfe-ae96-863cd239d9d9</string>
        <string>0223c1ab-b8ed-487d-82c2-341ae0a4eb9d</string>
        <string>574e7271-1b21-4b79-82c3-fead249fc450</string>
        <string>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</string>
        <string>ed739638-6120-4aee-bcb2-acc661f2b12b</string>
        <string>1a53f2e3-00e1-4de0-ba87-8bd096c00033</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="4.4.2">
          <id>8ce40654-9675-40fa-ad52-770fad9f5509</id>
          <name>Chache XSLT File</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822789</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Cache XSLT files in the global map

              @param {String} path - full path to the file
              @return {Boolean} return &apos;true&apos; if the file is placed successfully into the
              GlobalMap; otherwise, return &apos;false&apos;
              */
              function cacheXSLTFile(path) {

              var result = false;

              try {
              var file = new Packages.java.io.File(path);

              if (file.exists()) {

              var fileName = file.getName();
              var key = fileName.substring(0, fileName.lastIndexOf(&apos;.&apos;));

              var content = Packages.org.apache.commons.io.FileUtils.readFileToString(file,
              &quot;UTF-8&quot;);
              globalMap.put(key, content);
              result = String(content).length &gt; 0;
              }

              } catch(ex) {
              logger.error(&apos;CDA Library: Failed to cache XSLT file - &apos; + filePath + &apos;
              &apos; + ex);
              } finally {
              return result;
              }
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>62ded61d-9663-4909-91fa-0ffe822af5fd</id>
          <name>Perform XSL Transformation</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822745</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Perform XSL Transformation using given XSLT file

              @param {String} templateId - cached XSLT script based on the C-CDA templateId
              @param {String} source - input C-CDA XML to transform
              @return {String} return XSL Transformation result
              */
              function doXSLTransform(templateId, source) {

              if (globalMap.containsKey(templateId)) {

              var reader = new Packages.java.io.StringReader(source.toString());
              var result = new Packages.java.io.StringWriter();
              var stream = new Packages.java.io.ByteArrayInputStream(new
              Packages.java.lang.String($g(templateId)).getBytes(&quot;UTF-8&quot;));
              var xsltSource = new Packages.javax.xml.transform.stream.StreamSource(stream);

              try {

              var transFact = new Packages.javax.xml.transform.TransformerFactory.newInstance();
              var transXSLT = transFact.newTemplates(xsltSource);
              var trans = transXSLT.newTransformer();
              trans.transform(new Packages.javax.xml.transform.stream.StreamSource(reader), new
              Packages.javax.xml.transform.stream.StreamResult(result));

              } catch(ex) {
              logger.error(&apos;CDA Library: Do XSL Transform Exception - &apos; + ex);
              return null;
              }

              // Remove XML prolog
              return result.toString().replace(&apos;&lt;?xml version=&quot;1.0&quot;
              encoding=&quot;UTF-8&quot;?&gt;&apos;,&apos;&apos;);

              } else {
              logger.debug(&apos;CDA Library: Do XSL Transform Exception - globalChannelMap(&apos; +
              templateId + &apos;) does not exist&apos;);
              return null;
              }
              }</code>
          </properties>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
    <codeTemplateLibrary version="4.4.2">
      <id>c209459e-8282-4ac7-88cb-42cdeec33805</id>
      <name>Common Library</name>
      <revision>1</revision>
      <lastModified>
        <time>1700976822389</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>Common library for all channels

        Last updated: Nov 23 2023</description>
      <includeNewChannels>false</includeNewChannels>
      <enabledChannelIds>
        <string>f6899f98-6671-44f9-a764-d5f7c1858f02</string>
        <string>2f3a1187-8950-4a03-bc93-181ff1ecb627</string>
        <string>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>64436c91-4c18-4f85-9d6f-e942b70e7fd2</string>
        <string>3f38affa-7132-4c4d-8597-2679b2651a13</string>
        <string>2e17f9d4-fb39-43ba-87dd-72bac26789ef</string>
        <string>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</string>
        <string>f773af16-c61a-4642-b484-8dd9c5bdc437</string>
        <string>0223c1ab-b8ed-487d-82c2-341ae0a4eb9d</string>
        <string>574e7271-1b21-4b79-82c3-fead249fc450</string>
        <string>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</string>
        <string>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</string>
        <string>ed739638-6120-4aee-bcb2-acc661f2b12b</string>
        <string>b5b9af30-9fae-4a41-ae80-39ca955f4325</string>
        <string>1a53f2e3-00e1-4de0-ba87-8bd096c00033</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="4.4.2">
          <id>26b91ac3-6507-4956-9912-e8fe90caef35</id>
          <name>Calculate MessageDigest</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822769</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Calculate MessageDigest hash and converts to Base64 encoded string.
              This MessageDigest class provides applications the functionality of a message digest
              algorithm, such as SHA-1 or SHA-256.
              Message digests are secure one-way hash functions that take arbitrary-sized data and
              output a fixed-length hash value.

              @param {String} payload - original payload string
              @return {String} return Base64 encoded MessageDigest hash
              */
              function getMessageDigest(payload) {

              var result = null;

              try {
              // Calcualte hash using SHA-1 algorithm
              var md = Packages.java.security.MessageDigest.getInstance(&quot;SHA-1&quot;);
              md.update( java.lang.String(payload.toString()).getBytes(&apos;UTF-8&apos;) );

              // Generate Base64 encoded string
              var digest = FileUtil.encode(md.digest());

              result = digest.toString();

              } catch (ex) {}

              return result;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>0dbb568c-4c8b-40cc-8a95-2012fac9ed4d</id>
          <name>Get HL7v3 Message Receiver</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822536</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates a receiver class from the Transmission Wrapper (MCCI_DM000000UV).

              @param {String} oid - an OID of the receiving organization
              @param {String} url - message receiving endpoint
              @return {Object} return Receiver XML object
              */
              function getHL7v3Receiver(oid, url) {

              // Structural attributes are required
              var receiver = &lt;receiver typeCode=&quot;RCV&quot;&gt;
              &lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
              &lt;id root={oid.toString()}/&gt;
              &lt;telecom value={url.toString()}/&gt;
              &lt;asAgent classCode=&quot;AGNT&quot;&gt;
              &lt;representedOrganization classCode=&quot;ORG&quot;
              determinerCode=&quot;INSTANCE&quot;&gt;
              &lt;id root={oid.toString()}/&gt;
              &lt;/representedOrganization&gt;
              &lt;/asAgent&gt;
              &lt;/device&gt;
              &lt;/receiver&gt;;

              return receiver;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>0ad796be-24b6-4519-94f9-61449d4a7703</id>
          <name>Get HL7v3 Message Sender</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822815</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates a sender class from the Transmission Wrapper (MCCI_DM000000UV).
              Includes optinal asAgent [0..1] (Agent)

              @param {String} oid - an OID of the sending organization
              @param {String} name - an OID of the sending organization
              @return {Object} return Receiver XML object
              */
              function getHL7v3Sender(oid, name) {

              // Device.id - A unique identifier for the Entity. (REQUIRED)
              // An instance identifier is a unique identifier, not a classifier.

              // Organization.name - A non-unique textual identifier or moniker for the Entity.
              (OPTIONAL)

              // Structural attributes are required

              var sender = &lt;sender typeCode=&quot;SND&quot;&gt;
              &lt;device classCode=&quot;DEV&quot; determinerCode=&quot;INSTANCE&quot;&gt;
              &lt;id root={oid.toString()}/&gt;
              &lt;asAgent classCode=&quot;AGNT&quot;&gt;
              &lt;representedOrganization classCode=&quot;ORG&quot;
              determinerCode=&quot;INSTANCE&quot;&gt;
              &lt;id root={oid.toString()}/&gt;
              &lt;name&gt;{name.toString()}&lt;/name&gt;
              &lt;/representedOrganization&gt;
              &lt;/asAgent&gt;
              &lt;/device&gt;
              &lt;/sender&gt;;

              if (0 == String(name).length) delete
              sender.device.asAgent.representedOrganization.name;

              return sender;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>34300954-fc44-4e15-82c7-ed96ac02f8c2</id>
          <name>Get HTTP Content or Body</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822941</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Parse and decodes JSON from the HTTP request

              @param {Object} msg - incoming msg object
              @return {Object} return extracted JSON object
              */
              function getBase64Content(msg) {

              var base64 = null, json = null;

              if (msg.hasOwnProperty(&apos;Content&apos;)) try {

              // Extract the Base64 encoded HTTP Content
              if (&apos;Base64&apos; == msg.Content.@encoding.toString()) {
              base64 = new
              java.lang.String(com.mirth.connect.server.userutil.FileUtil.decode(msg.Content.toString()),
              &quot;UTF-8&quot;);
              } else {
              base64 = msg.Content.toString();
              }

              // Validate by creating JSON object
              json = JSON.parse(base64.toString());

              } catch(ex) {
              return ex.toString();
              }

              return json;
              }


              /**
              Parse and decodes XML from the HTTP content

              @param {Object} msg - incoming msg object
              @return {Object} return extracted XML object
              */
              function getBase64Body(msg) {

              var base64 = null, xml = null;

              if (msg.hasOwnProperty(&apos;Body&apos;)) try {

              // Extract the Base64 encoded HTTP Body
              if (&apos;Base64&apos; == msg.Body.@encoding.toString()) {
              xml = new
              java.lang.String(com.mirth.connect.server.userutil.FileUtil.decode(msg.Body.toString()),
              &quot;UTF-8&quot;);
              } else {
              xml = msg.Body.toString();
              }

              // Validate by creating XML object
              xml = new XML(xml);

              } catch(ex) {
              return ex.toString();
              }

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>fe7168b2-ffe1-4e9a-b619-12653e378095</id>
          <name>Get SOAP Envelope</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822606</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates an empty SOAP envelope
              The SOAP message is constructed according to the rules set in the WSDL

              @param {String} endpoint - The endpoint address specified in the WSDL or the supplied
              end point reference
              @param {String} action - The action value specified in the WSDL related to a specific
              IHE profile
              @return {Object} return SOAP message object
              */
              function getSOAPEnvelope(endpoint, action) {

              // Expected Action codes:
              // ITI-55 - urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery
              // ITI-38 - urn:ihe:iti:2007:CrossGatewayQuery
              // ITI-39 - urn:ihe:iti:2007:RetrieveDocumentSet (?)

              // All &lt;wsa:Action&gt; elements SHALL have the mustUnderstand attribute set
              // The &lt;wsa:ReplyTo&gt; element of the initiating message SHALL be present
              var soap = &lt;soap:Envelope
              xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;
              xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;
              &lt;soap:Header&gt;
              &lt;wsa:To soap:mustUnderstand=&quot;1&quot;&gt;{endpoint.toString()}&lt;/wsa:To&gt;
              &lt;wsa:Action
              soap:mustUnderstand=&quot;1&quot;&gt;{action.toString()}&lt;/wsa:Action&gt;
              &lt;wsa:MessageID&gt;{&apos;urn:uuid:&apos; +
              UUIDGenerator.getUUID()}&lt;/wsa:MessageID&gt;
              &lt;wsa:ReplyTo&gt;
              &lt;wsa:Address&gt;http://www.w3.org/2005/08/addressing/anonymous&lt;/wsa:Address&gt;
              &lt;/wsa:ReplyTo&gt;
              &lt;/soap:Header&gt;
              &lt;soap:Body&gt;&lt;/soap:Body&gt;
              &lt;/soap:Envelope&gt;;

              return soap;
              }</code>
          </properties>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
    <codeTemplateLibrary version="4.4.2">
      <id>5c4c6ab2-26a7-4878-933d-ae04c2bdeea7</id>
      <name>XCA Library</name>
      <revision>1</revision>
      <lastModified>
        <time>1700976822381</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>Cross-Community Access (XCA) library
        IHE ITI-38 [Cross Gateway Query] related functions
        IHE ITI-39 [Cross Gateway Retrieve] related functions

        Last updated: Nov 25 2023</description>
      <includeNewChannels>false</includeNewChannels>
      <enabledChannelIds>
        <string>3f38affa-7132-4c4d-8597-2679b2651a13</string>
        <string>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>64436c91-4c18-4f85-9d6f-e942b70e7fd2</string>
        <string>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</string>
        <string>f773af16-c61a-4642-b484-8dd9c5bdc437</string>
        <string>6cdb6776-3488-47c6-8c90-2015ea051f93</string>
        <string>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</string>
        <string>b5b9af30-9fae-4a41-ae80-39ca955f4325</string>
        <string>f6899f98-6671-44f9-a764-d5f7c1858f02</string>
        <string>2e17f9d4-fb39-43ba-87dd-72bac26789ef</string>
        <string>0d35e20f-bc3b-4e88-a8eb-1caf57973922</string>
        <string>2f3a1187-8950-4a03-bc93-181ff1ecb627</string>
        <string>0223c1ab-b8ed-487d-82c2-341ae0a4eb9d</string>
        <string>574e7271-1b21-4b79-82c3-fead249fc450</string>
        <string>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</string>
        <string>ed739638-6120-4aee-bcb2-acc661f2b12b</string>
        <string>1a53f2e3-00e1-4de0-ba87-8bd096c00033</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="4.4.2">
          <id>0bdba2ea-7155-4963-abae-46b28d322119</id>
          <name>Get DocumentEntryClassCode slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822669</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XDSDocumentEntryClassCode slot entry

              @param {String} code - entry class code value
              @param {String} system - entry class system value
              @return {Object} return XDSDocumentEntryClassCode slot
              */
              function getXDSDocumentEntryClassCode(code, system) {

              // Must be part of one of the following valueSet list [1.3.6.1.4.1.12559.11.4.3.2]

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryClassCode&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;(&apos;{code.toString() + &apos;^^&apos; +
              system.toString()}&apos;)&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>1dd46381-64c0-4d5c-88b2-9d78c634b23e</id>
          <name>Get DocumentEntryCreationTime slots</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822686</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XDSDocumentEntryCreationTimeFrom slot entry

              @param {String} timestamp - timestamp to convert
              @return {Object} return XDSDocumentEntryCreationTimeFrom slot entry
              */
              function getXDSDocumentEntryCreationTimeFrom(timestamp) {

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryCreationTimeFrom&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;{timestamp.toString().replace(/\D/g, &apos;&apos;).slice(0,
              14)}&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;
              }


              /**
              Generates XDSDocumentEntryCreationTimeTo slot entry

              @param {String} timestamp - timestamp to convert
              @return {Object} return XDSDocumentEntryCreationTimeTo slot entry
              */
              function getXDSDocumentEntryCreationTimeTo(timestamp) {

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryCreationTimeTo&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;{timestamp.toString().replace(/\D/g, &apos;&apos;).slice(0,
              14)}&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>5ad26df2-2902-4710-ad58-65306400cceb</id>
          <name>Get DocumentEntryHealthcareFacilityTypeCode slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822701</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XDSDocumentEntryHealthcareFacilityTypeCode slot entry

              @param {String} code - facility type code value
              @param {String} system - facility type system value
              @return {Object} return XDSDocumentEntryHealthcareFacilityTypeCode slot
              */
              function getXDSDocumentEntryHealthcareFacilityTypeCode(code, system) {

              // Values can be taken:
              // -
              https://validation.sequoiaproject.org/SVSSimulator/browser/valueSet.seam?id=1.3.6.1.4.1.12559.11.4.3.5&amp;cid=95
              // - https://gazelle.ihe.net/RetrieveValueSet?id=1.3.6.1.4.1.12559.11.4.3.5

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryHealthcareFacilityTypeCode&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;(&apos;394747008^^2.16.840.1.113883.6.96&apos;)&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>f3cb147d-50db-4032-b355-d8f693c0da38</id>
          <name>Get DocumentEntryPatientId slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822731</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XDSDocumentEntryPatientId slot with given identifier and assigning authority
              @param {String} identifier - patient&apos;s identifier
              @param {String} authority - patient identity assigning authority in the form of an OID
              @return {Object} return XDSDocumentEntryPatientId slot entry
              */
              function getXDSDocumentEntryPatientId(identifier, authority) {

              // The Patient ID shall contain two parts:
              // * Patient Identity Assigning Authority in the form of an OID
              // * An identifier in the above Assigning Authority domain

              var xml = null;

              if (identifier &amp;&amp; authority) {
              xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryPatientId&quot;
              slotType=&quot;rim:StringValueType&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;&apos;{identifier.toString() + &apos;^^^&amp;&apos; + authority +
              &apos;&amp;ISO&apos;}&apos;&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;
              }

              return xml;
              }
</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>97c31212-1d89-43fc-a8e4-2233d56c94a9</id>
          <name>Get DocumentEntryPracticeSettingCode slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822630</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XDSDocumentEntryPracticeSettingCode slot entry

              @param {String} code - practice setting code value
              @param {String} system - practice setting system value
              @return {Object} return XDSDocumentEntryPracticeSettingCode slot
              */
              function getXDSDocumentEntryPracticeSettingCode(code, system) {

              // Expected values:
              https://gazelle.ihe.net/RetrieveValueSet?id=1.3.6.1.4.1.12559.11.4.3.6

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryPracticeSettingCode&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;(&apos;{code.toString() + &apos;^^&apos; +
              system.toString()}&apos;)&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>b33a12b1-fbf1-4bdf-8bb3-0e7fe686fe4f</id>
          <name>Get DocumentEntryServiceStartTime slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822554</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XDSDocumentEntryServiceStartTimeFrom slot entry

              @param {String} timestamp - timestamp to convert
              @return {Object} return XDSDocumentEntryServiceStartTimeFrom slot entry
              */
              function getXDSDocumentEntryServiceStartTimeFrom(timestamp) {

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryServiceStartTimeFrom&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;{timestamp.toString().replace(/\D/g, &apos;&apos;).slice(0,
              14)}&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;
              }


              /**
              Generates XDSDocumentEntryServiceStartTimeTo slot entry

              @param {String} timestamp - timestamp to convert
              @return {Object} return XDSDocumentEntryServiceStartTimeTo slot entry
              */
              function getXDSDocumentEntryServiceStartTimeTo(timestamp) {

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryServiceStartTimeTo&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;{timestamp.toString().replace(/\D/g, &apos;&apos;).slice(0,
              14)}&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>46c7f4ca-1148-4de2-ac9c-b44a2203aad1</id>
          <name>Get DocumentEntryType slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822716</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XDSDocumentEntryType slot with stable and on-demand entries
              The objectType attribute on an ExtrinsicObject (DocumentEntry) is used to distinguish
              Stable DocumentEntries from On-Demand DocumentEntries

              @return {Object} return description
              */
              function getXDSDocumentEntryType() {

              // If no value is specified for DocumentEntryType, the value requesting only Stable
              Document Entries shall be assumed.
              // To get all Document Entry types, the query shall contain both of the 2450 valid
              values in the request.

              // urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1 – Stable
              // urn:uuid:34268e47-fdf5-41a6-ba33-82133c465248 – On-Demand

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryType&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;(&apos;urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1&apos;,&apos;urn:uuid:34268e47-fdf5-41a6-ba33-82133c465248&apos;)&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>a21f967a-f891-4c59-b7df-2fe0f5bb7297</id>
          <name>Get DocumentStatus slot</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822461</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XDSDocumentEntryStatus slot with the &apos;approved&apos; document type
              @return {Object} return XDSDocumentEntryStatus slot
              */
              function getXDSDocumentEntryStatus() {

              // Valid Document Status Values:
              // urn:oasis:names:tc:ebxml-regrep:StatusType:Approved
              // urn:oasis:names:tc:ebxml-regrep:StatusType:Deprecated

              var xml = &lt;urn2:Slot name=&quot;$XDSDocumentEntryStatus&quot;
              xmlns:urn2=&quot;urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0&quot;&gt;
              &lt;urn2:ValueList&gt;
              &lt;urn2:Value&gt;(&apos;urn:oasis:names:tc:ebxml-regrep:StatusType:Approved&apos;)&lt;/urn2:Value&gt;
              &lt;/urn2:ValueList&gt;
              &lt;/urn2:Slot&gt;;

              return xml;

              }</code>
          </properties>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
    <codeTemplateLibrary version="4.4.2">
      <id>17457cb7-df91-4475-96e4-0735081f47c2</id>
      <name>XCPD Library</name>
      <revision>1</revision>
      <lastModified>
        <time>1700976822386</time>
        <timezone>GMT</timezone>
      </lastModified>
      <description>Cross-Community Patient Discovery (XCPD) library
        IHE ITI-55 [Cross Gateway Patient Discovery] related functions

        Last updated: Nov 23 2023</description>
      <includeNewChannels>false</includeNewChannels>
      <enabledChannelIds>
        <string>267b9cd3-a9cd-47e8-86ef-d1d3690707c7</string>
      </enabledChannelIds>
      <disabledChannelIds>
        <string>64436c91-4c18-4f85-9d6f-e942b70e7fd2</string>
        <string>3f38affa-7132-4c4d-8597-2679b2651a13</string>
        <string>cbd49d4a-24fa-40b6-aa12-d59d64168dd1</string>
        <string>f773af16-c61a-4642-b484-8dd9c5bdc437</string>
        <string>c7b1fb54-6dce-410c-a16a-e3ba6b6c6722</string>
        <string>6cdb6776-3488-47c6-8c90-2015ea051f93</string>
        <string>b5b9af30-9fae-4a41-ae80-39ca955f4325</string>
        <string>f6899f98-6671-44f9-a764-d5f7c1858f02</string>
        <string>2e17f9d4-fb39-43ba-87dd-72bac26789ef</string>
        <string>0d35e20f-bc3b-4e88-a8eb-1caf57973922</string>
        <string>2f3a1187-8950-4a03-bc93-181ff1ecb627</string>
        <string>0223c1ab-b8ed-487d-82c2-341ae0a4eb9d</string>
        <string>574e7271-1b21-4b79-82c3-fead249fc450</string>
        <string>ce8aa1cf-5df6-4825-82c9-b51d5b2dfcfa</string>
        <string>ed739638-6120-4aee-bcb2-acc661f2b12b</string>
        <string>1a53f2e3-00e1-4de0-ba87-8bd096c00033</string>
      </disabledChannelIds>
      <codeTemplates>
        <codeTemplate version="4.4.2">
          <id>2680c088-f2a0-44fa-ae30-4a878bddeceb</id>
          <name>Get GetPatientAddress query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822590</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generate PatientAddress query entry
              This query parameter is a postal address for corresponding with a living subject in
              the context of the target patient registry

              @param {Object} patient - incoming Patient resource
              @return {Object} return XML object representing LivingSubjectBirthPlaceAddress query
              entry
              */
              function getLivingSubjectBirthPlaceAddress(patient) {
              // TODO
              return null;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>b48d59bf-a974-4240-968d-89941abf6a76</id>
          <name>Get ITI-55 Request Template</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822906</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates XCPD Cross Gateway Patient Discovery [ITI-55] request template

              @param {String} oid - an OID of the sending organization
              @param {Object} receiver - an XML object with the receiver information
              @param {Object} sender - an XML object with the sender information
              @return {Object} return XCPD ITI-55 request payload
              */
              function getXCPDRequest(oid, receiver, sender) {

              // queryId - Identifier for the query. It is used to associate this query instance
              with both the initial response message and with later query interactions. (REQUIRED)
              // Valuing queryId avoids the need for the QueryContinuation and QueryAck classes to
              carry as much detail information as is carried in the initial query.

              var uuid = UUIDGenerator.getUUID();

              var xml = &lt;PRPA_IN201305UV02 ITSVersion=&quot;XML_1.0&quot;
              xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;id root={oid.toString()} extension={uuid.toString()}/&gt;
              &lt;creationTime value={DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;)}/&gt;
              &lt;interactionId root=&quot;2.16.840.1.113883.1.6&quot;
              extension=&quot;PRPA_IN201305UV02&quot;/&gt;
              &lt;processingCode code=&quot;P&quot;/&gt;
              &lt;processingModeCode code=&quot;T&quot;/&gt;
              &lt;acceptAckCode code=&quot;AL&quot;/&gt;
              &lt;controlActProcess classCode=&quot;CACT&quot; moodCode=&quot;EVN&quot;&gt;
              &lt;urn:code code=&quot;PRPA_TE201305UV02&quot;
              codeSystem=&quot;2.16.840.1.113883.1.6&quot;/&gt;
              &lt;urn:queryByParameter&gt;
              &lt;urn:queryId root={oid.toString()} extension={uuid.toString()}/&gt;
              &lt;urn:statusCode code=&quot;new&quot;/&gt;
              &lt;urn:responseModalityCode code=&quot;R&quot;/&gt;
              &lt;urn:responsePriorityCode code=&quot;I&quot;/&gt;
              &lt;urn:parameterList/&gt;
              &lt;/urn:queryByParameter&gt;
              &lt;/controlActProcess&gt;
              &lt;/PRPA_IN201305UV02&gt;;

              // Sender shall be inserted first to preserve the order
              if (sender) xml.insertChildAfter(xml.acceptAckCode[0], sender);
              if (receiver) xml.insertChildAfter(xml.acceptAckCode[0], receiver);

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>dd295f97-f798-4100-9bb1-5666c638243d</id>
          <name>Get LivingSubjectAdministrativeGender query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822925</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generate livingSubjectAdministrativeGender query entry
              This query parameter is a code representing the administrative gender of a living
              subject in a patient registry

              @param {Object} patient - incoming Patient resource
              @return {Object} return XML object representing LivingSubjectAdministrativeGender
              query entry
              */
              function getLivingSubjectAdministrativeGender(patient) {

              // &apos;Undifferentiated&apos; by default
              var gender = &apos;UN&apos;;

              try {
              if (String(patient.gender).toUpperCase().startsWith(&apos;M&apos;)) gender =
              &apos;M&apos;
              else if (String(patient.gender).toUpperCase().startsWith(&apos;F&apos;)) gender =
              &apos;F&apos;
              } catch(ex) {}

              var xml = &lt;urn:livingSubjectAdministrativeGender
              xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:value code={gender.toString()}
              codeSystem=&quot;2.16.840.1.113883.5.1&quot;/&gt;
              &lt;urn:semanticsText&gt;LivingSubject.administrativeGender&lt;/urn:semanticsText&gt;
              &lt;/urn:livingSubjectAdministrativeGender&gt;;

              return xml;
              }
</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>fc09daa6-df4a-4d2e-81b1-8108d768d2c5</id>
          <name>Get LivingSubjectBirthPlaceAddress query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822435</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generate LivingSubjectBirthPlaceAddress query entry
              This query parameter is a patient&apos;s birthplace represented as an address

              @param {Object} address - birth place Address object from the extension
              @return {Object} return XML object representing LivingSubjectBirthPlaceAddress query
              entry
              */
              function getLivingSubjectBirthPlaceAddress(address) {

              var xml = null;

              try {

              xml = &lt;urn:livingSubjectBirthPlaceAddress xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:value/&gt;
              &lt;urn:semanticsText&gt;LivingSubject.BirthPlace.Addr&lt;/urn:semanticsText&gt;
              &lt;/urn:livingSubjectBirthPlaceAddress&gt;;

              address.line.forEach(line =&gt; {
              var street =
              &lt;urn:streetAddressLine&gt;{line.toString()}&lt;/urn:streetAddressLine&gt;;
              xml.value.appendChild(street);
              });
              if (address.hasOwnProperty(&apos;city&apos;)) {
              var city = &lt;urn:city&gt;{address.city.toString()}&lt;/urn:city&gt;;
              xml.value.appendChild(city);
              }
              if (address.hasOwnProperty(&apos;state&apos;)) {
              var state = &lt;urn:state&gt;{address.state.toString()}&lt;/urn:state&gt;;
              xml.value.appendChild(state);
              }
              if (address.hasOwnProperty(&apos;postalCode&apos;)) {
              var postalCode =
              &lt;urn:postalCode&gt;{address.postalCode.toString()}&lt;/urn:postalCode&gt;;
              xml.value.appendChild(postalCode);
              }
              if (address.hasOwnProperty(&apos;country&apos;)) {
              var country = &lt;urn:country&gt;{address.country.toString()}&lt;/urn:country&gt;;
              xml.value.appendChild(country);
              }

              } catch(ex) {}

              return xml;
              }
</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>baa1beb4-961a-4100-a1b4-96f5d77178f0</id>
          <name>Get LivingSubjectBirthPlaceName query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822868</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generate LivingSubjectBirthPlaceName query entry
              This query parameter is a patient&apos;s birthplace represented as a place name

              @param {Object} patient - incoming Patient resource
              @return {Object} return XML object representing LivingSubjectBirthPlaceName query
              entry
              */
              function getLivingSubjectBirthPlaceName(patient) {

              var xml = null;
              // TODO: FHIR Patient extensions shall be provided with the patient birth place name
              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>e4791a1a-6f15-458e-a557-6cfeb5abbc12</id>
          <name>Get LivingSubjectBirthTime query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822397</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generate LivingSubjectBirthTime query entry
              This query parameter is the birth date of a living subject.

              @param {String} date - Patient&apos;s birth date separated by &apos;-&apos;
              @return {Object} return XML object representing LivingSubjectBirthTime query entry
              */
              function getLivingSubjectBirthTime(date) {

              var xml = null;

              try {
              xml = &lt;urn:livingSubjectBirthTime xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:value value={date.toString().replace(/-/g, &apos;&apos;)}/&gt;
              &lt;urn:semanticsText&gt;LivingSubject.birthTime&lt;/urn:semanticsText&gt;
              &lt;/urn:livingSubjectBirthTime&gt;;
              } catch(ex) {}

              return xml;

              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>9e2e027d-c8d0-4b3a-b934-fb0e8174938b</id>
          <name>Get LivingSubjectId query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822571</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generate LivingSubjectId query entry
              This query parameter is an identifier for a living subject. This is NOT the identifier
              assigned by the target registry.
              In fact, the identifier has no context (scoping organization) other than the namespace
              from which the identifier was issued (OID root).

              @param {Object} patient - incoming Patient resource
              @return {Object} return XML object representing LivingSubjectId query entry
              */
              function getLivingSubjectId(patient) {

              var xml = null;
              var valueList = new XMLList();

              if (patient.hasOwnProperty(&apos;identifier&apos;)) try {
              patient.identifier.forEach(function(entry) {

              if (entry.system.toString().startsWith(&apos;urn:oid:&apos;)) {
              valueList += &lt;urn:value root={entry.system.toString().replace(&apos;urn:oid:&apos;,
              &apos;&apos;)} extension={entry.value.toString()}/&gt;;

              } else if (&apos;http://hl7.org/fhir/sid/us-ssn&apos; == entry.system.toString()) {
              valueList += &lt;urn:value root=&quot;2.16.840.1.113883.4.1&quot;
              extension={entry.value.toString()}/&gt;;

              } else if (&apos;http://hl7.org/fhir/sid/us-medicare&apos; == entry.system.toString())
              {
              valueList += &lt;urn:value root=&quot;2.16.840.1.113883.4.572&quot;
              extension={entry.value.toString()}/&gt;;

              } else if (&apos;http://hl7.org/fhir/sid/us-mbi&apos; == entry.system.toString()) {
              valueList += &lt;urn:value root=&quot;2.16.840.1.113883.4.927&quot;
              extension={entry.value.toString()}/&gt;;
              }
              });

              } catch(ex) {}

              if (valueList.length() &gt; 0) {
              xml = &lt;urn:livingSubjectId xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:semanticsText&gt;LivingSubject.id&lt;/urn:semanticsText&gt;
              &lt;/urn:livingSubjectId&gt;;
              xml.insertChildBefore(xml.semanticsText[0], valueList);
              }

              return xml;

              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>4b9ae618-4790-4fa4-84e3-3d12b435a3cc</id>
          <name>Get LivingSubjectName query parameter</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822653</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generate LivingSubjectName query entry
              This query parameter is the name of a living subject. This query parameter is the name
              of a person.
              If multiple instances of LivingSubjectName are provided, the receiver must consider
              them as possible alternatives, logically connected with an &quot;or&quot;.

              @param {Object} name - a single Patient.name element
              @return {Object} return XML object representing LivingSubjectName query entry
              */
              function getLivingSubjectName(name) {

              var xml = null;

              // Only one instance of the value element is allowed. Only some of the name parts may
              be populated.
              // If, for example, only the family and given name parts of a person&apos;s name are
              sent, then the query would match all persons with that family name and given name
              regardless of their initials.
              // The use attribute of the value element shall not be set to &quot;SRCH&quot;.

              try {

              xml = &lt;urn:livingSubjectName xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:value/&gt;
              &lt;urn:semanticsText&gt;LivingSubject.name&lt;/urn:semanticsText&gt;
              &lt;/urn:livingSubjectName&gt;;

              if (name.hasOwnProperty(&apos;family&apos;)) {
              var family = &lt;urn:family&gt;{name.family.toString()}&lt;/urn:family&gt;;
              xml.value.appendChild(family);
              }

              // TODO: Process multiple given names (requires XMLList)
              if (name.hasOwnProperty(&apos;given&apos;)) {
              var given = &lt;urn:given&gt;{name.given[0].toString()}&lt;/urn:given&gt;;
              xml.value.appendChild(given);
              /*
              name.given.forEach(entry =&gt; {
              var given = &lt;given&gt;{name.given.toString()}&lt;/given&gt;;
              xml.value.appendChild(given);
              });
              */
              }

              } catch(ex) {}


              return xml;

              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>3d28c319-9ade-4af5-8d2b-0de10ca70a07</id>
          <name>Get MothersMaidenName query entry</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822483</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              This query parameter is the maiden name of a focal person&apos;s mother.
              It is included as a parameter because it is a common attribute for confirming the
              identity of persons in some registries.
              In this case it may consist of only the given name part, the family name part, or
              both.

              @param {Object} name - a mother&apos;s maiden name
              @return {Object} return XML object representing LivingSubjectName query entry
              */
              function getMothersMaidenName(name) {

              // The FHIR http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName
              extension allows only a single string value
              var xml = &lt;urn:mothersMaidenName xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:value&gt;{name.toString()}&lt;/urn:value&gt;
              &lt;urn:semanticsText&gt;Person.MothersMaidenName&lt;/urn:semanticsText&gt;
              &lt;/urn:mothersMaidenName&gt;;

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>efbe4cdf-06dc-4182-8533-b5f74142ca8d</id>
          <name>Get PatientAddress query entry</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822849</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates PatientAddress query entry
              This query parameter is a postal address for corresponding with a living subject in
              the context of the target patient registry.
              There shall be only a single PatientAddress element.
              Multiple instances of the value element within a Patient Address may be specified and
              are combined with OR logic.

              @param {Object} address - Patient.address element
              @return {Object} return XML object representing PatientAddress query entry
              */
              function getPatientAddress(address) {

              var xml = null;
              var valueList = new XMLList();

              try {

              address.forEach(function(addr) {

              var value = &lt;urn:value/&gt;;

              addr.line.forEach(line =&gt; {
              var street =
              &lt;urn:streetAddressLine&gt;{line.toString()}&lt;/urn:streetAddressLine&gt;;
              value.appendChild(street);
              });
              if (addr.hasOwnProperty(&apos;city&apos;)) {
              var city = &lt;urn:city&gt;{addr.city.toString()}&lt;/urn:city&gt;;
              value.appendChild(city);
              }
              if (addr.hasOwnProperty(&apos;state&apos;)) {
              var state = &lt;urn:state&gt;{addr.state.toString()}&lt;/urn:state&gt;;
              value.appendChild(state);
              }
              if (addr.hasOwnProperty(&apos;postalCode&apos;)) {
              var postalCode =
              &lt;urn:postalCode&gt;{addr.postalCode.toString()}&lt;/urn:postalCode&gt;;
              value.appendChild(postalCode);
              }
              if (addr.hasOwnProperty(&apos;country&apos;)) {
              var country = &lt;urn:country&gt;{addr.country.toString()}&lt;/urn:country&gt;;
              value.appendChild(country);
              }

              valueList += value;
              });

              } catch(ex) {}

              if (valueList.length() &gt; 0) {
              xml = &lt;urn:patientAddress xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:semanticsText&gt;Patient.addr&lt;/urn:semanticsText&gt;
              &lt;/urn:patientAddress&gt;;
              xml.insertChildBefore(xml.semanticsText[0], valueList);
              }

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>5518590c-e3f7-4871-85fd-479e5d20bcb4</id>
          <name>Get PatientTelecom query entry</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822886</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates PatientTelecom query entry
              This query parameter is a telecommunications address for communicating with a living
              subject in the context of the target patient registry.
              It could be a telephone number, fax number or even an email address. There shall be
              only a single PatientTelecom element.
              A telecommunications address. The scheme attribute specifies whether this is a
              telephone number, fax number, email address, etc.
              Multiple instances of the value element within a PatientTelecom may be specified and
              are combined with OR logic.

              @param {Object} telecom - Patient.telecom element
              @return {Object} return XML object representing PatientTelecom query entry
              */
              function getPatientTelecom(telecom) {

              // TODO: The FHIR ContactPoint.use component is not being processed

              var xml = null;
              var valueList = new XMLList();

              try {
              telecom.forEach(function(tel) {

              var prefix = &apos;&apos;;

              if (tel.hasOwnProperty(&apos;system&apos;)) {
              // Map FHIR ContactPoint.system to HL7v3 syntax
              var prefix =
              [&apos;tel:&apos;,&apos;fax:&apos;,&apos;email:&apos;,&apos;&apos;,&apos;&apos;,&apos;sms:&apos;,&apos;&apos;][[&apos;phone&apos;,&apos;fax&apos;,&apos;email&apos;,&apos;pager&apos;,&apos;url&apos;,&apos;sms&apos;,&apos;other&apos;].indexOf(tel.system.toString())];
              prefix = (prefix) ? prefix : &apos;&apos;;
              }

              var value = &lt;urn:value value={prefix.toString() + tel.value.toString()}/&gt;;
              valueList += value;

              });

              } catch(ex) {}

              if (valueList.length() &gt; 0) {
              xml = &lt;urn:patientTelecom xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:semanticsText&gt;Patient.telecom&lt;/urn:semanticsText&gt;
              &lt;/urn:patientTelecom&gt;;
              xml.insertChildBefore(xml.semanticsText[0], valueList);
              }

              return xml;
              }</code>
          </properties>
        </codeTemplate>
        <codeTemplate version="4.4.2">
          <id>85bb0933-5012-43ae-993b-cc336daf8104</id>
          <name>Get PrincipalCareProviderId query entry</name>
          <revision>1</revision>
          <lastModified>
            <time>1700976822516</time>
            <timezone>GMT</timezone>
          </lastModified>
          <contextSet>
            <delegate>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            </delegate>
          </contextSet>
          <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
            <type>FUNCTION</type>
            <code>/**
              Generates
              This query parameter is the identifier of a health care provider who has explicitly
              accepted responsibility for some aspect of a patient&apos;s care.
              This identifies a health care provider role.

              @param {String} id - provider&apos;s NPI number
              @return {Object} return XML object representing PrincipalCareProviderId query entry
              */
              function getPrincipalCareProviderId(id) {

              // NOTE: Only provider&apos;s NPI numbers are expected

              var xml = null;

              try {
              // 2.16.840.1.113883.4.6 is US NPI OID
              xml = &lt;urn:principalCareProviderId xmlns:urn=&quot;urn:hl7-org:v3&quot;&gt;
              &lt;urn:value root=&quot;2.16.840.1.113883.4.6&quot; extension={id.toString()}/&gt;
              &lt;/urn:principalCareProviderId&gt;;
              } catch(ex) {}


              return xml;

              }</code>
          </properties>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
  </codeTemplateLibraries>
  <serverSettings>
    <clearGlobalMap>true</clearGlobalMap>
    <queueBufferSize>1000</queueBufferSize>
    <defaultMetaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </defaultMetaDataColumns>
    <defaultAdministratorBackgroundColor>
      <red>158</red>
      <green>177</green>
      <blue>201</blue>
      <alpha>255</alpha>
    </defaultAdministratorBackgroundColor>
    <smtpTimeout>5000</smtpTimeout>
    <smtpSecure>0</smtpSecure>
    <smtpAuth>false</smtpAuth>
    <loginNotificationEnabled>false</loginNotificationEnabled>
    <loginNotificationMessage></loginNotificationMessage>
    <administratorAutoLogoutIntervalEnabled>false</administratorAutoLogoutIntervalEnabled>
    <administratorAutoLogoutIntervalField>5</administratorAutoLogoutIntervalField>
  </serverSettings>
  <updateSettings version="4.4.2">
    <statsEnabled>true</statsEnabled>
    <lastStatsTime>1700976082239</lastStatsTime>
  </updateSettings>
  <globalScripts>
    <entry>
      <string>Undeploy</string>
      <string>// This script executes once for each deploy, undeploy, or redeploy task
        // if at least one channel was undeployed
        // You only have access to the globalMap here to persist data
        return;</string>
    </entry>
    <entry>
      <string>Postprocessor</string>
      <string>// This script executes once after a message has been processed
        // This script applies across all channels
        // Responses returned from here will be stored as &quot;Postprocessor&quot; in the response
        map
        // You have access to &quot;response&quot;, if returned from the channel postprocessor
        return;</string>
    </entry>
    <entry>
      <string>Deploy</string>
      <string>// This script executes once for each deploy or redeploy task
        // You only have access to the globalMap here to persist data
        return;</string>
    </entry>
    <entry>
      <string>Preprocessor</string>
      <string>// Modify the message variable below to pre process data
        // This script applies across all channels
        return message;</string>
    </entry>
  </globalScripts>
  <pluginProperties>
    <entry>
      <string>SSL Manager</string>
      <properties>
        <property name="KeyStore">/u3+7QAAAAIAAAABAAAAAQALY2FyZXF1YWxpdHkAAAGMDtO9zgAABQIwggT+MA4GCisGAQQBKgIR&#xd;
          AQEFAASCBOpA1xZjKuiBR+h7oSOduLHQWjoy0ytb0Sf84bY2GHYi2Axq9fXikfF7qzHh4iAAW2+2&#xd;
          R1N0jHRj9fkUpsBI94irxISptKJaGmHjECv5sWIQXUTrvZBs4nKDSKNv3Sz+7iiaDjZl8BEnC+JA&#xd;
          0cJZlCdp+wDy3ezDBf+7X8cTJ3hW6HKOu6gDjktSP+TdARs0+n8OC70u9JvolXpWv4LDFRHxb0L7&#xd;
          arRftiJekb2t46qtzMLTSGpV7KuxYGuqnwIcYiSoXz6cFRz5uWMJYH/yw7/nSbYMNphk7wJ1EYUW&#xd;
          iE30DG6IPjiJ/MEslXAppL4rCpyzIY3IR+t4VhHv7gfIqogcz8Wemihqni8HH2l9i41dO7vF0X1D&#xd;
          mCAgyg7nsZ+UvWqVUlGkBIiWlLTGgVrH1EmO0lVENmJ82YgfiBKUIUFS62oMy3G4e05HTPH+AyDe&#xd;
          UuAgSsrrN290R25Hho22DcklDGlu5tcI6cHz8uU64bPTyxf2mHTh5Tp+p0QRvBkfthiNbYq5xfc3&#xd;
          PEoTX26ErSfXia8lcmTrUCJvokXFdgW1lAf20ndjZqOwEhSv7DaAb34SfXtrszaEzN96+pfUnbLn&#xd;
          WXJOKUFAdhTRnI3zTfl6SX8p8dMnDeu3OVvrCCcBi7pBjh1usv1tKgIBqvnJP1seFN57XDT+sl6Y&#xd;
          mq92sSmxenAGEKqfg801CEy1jT7WXOiHXV6NpByeiQrPxTrefin5CTb+aDeGkL2lnNuYy/MwZhch&#xd;
          Z4obPYrPG7SiaY+OGcOT4uwY5mQrANJK+BBm7JJsgxSn9vZ3VRRulq2xX1qhc1RCzIQGUNDE7UND&#xd;
          nFO/Hr+sooYwoArAK9drdhNeIwjHcVXsvK8tjobnzr+5BkRxQaWVXoDQyw8t3VMghxIxvrXbZ171&#xd;
          FxcpusvcBhL+7EnY4E6EoPjxHMEfhaGMgEHAjdG9VZzoYhJZcSw0PcyhinRKcUUvkaD6qw+FN59X&#xd;
          b66vGvXUIfZMNjDP2tYtuHh/hPvi7d8ppEB9BPVgA57cQoFDL5ZFaLuqLRdfTFxEPCGjBTwacCOK&#xd;
          fzY/QBYYkj8OoUCcMNBIRxcs6qdLsgqK6iih7/nYRQXzqEZiOdH3/twPsHZB4VC2Uzky9itPBr9P&#xd;
          r7uCZBDrQJaJY69eSFCg4eZcsp1Hseyq9wS177VtuSKaLN67PdQ+hZyIRFUr3TPre6aFJcDLT3Ex&#xd;
          tgCzFhzGwM8j5XQ6LR4vf7ywDzf4G7mOhr1sUaLuZoX7yEcBqUFyDgBNYVlGM/9Mf0ZXnqifQj2v&#xd;
          dF7Hl37CO8uk/lJM5fVUDauJhSW0MiBNwZOpLL5Nhxv9qWvTH3VHbUHJ3JkVL/dnVhzAJ7AB8FcL&#xd;
          0xRKGTxnR9OuCLF5Z2f5WZqDARSX6k4dHRwBVU/2TdRX7SrZm2AXGQ95h88QHPU3XGYOIS5SLZC/&#xd;
          DRJO+r0heJ/uWZytm+xUD6eYDGilAUX/Wv7Z3pplaYFWqTJZslp9WuUPlqLnWBBiglI10XonbZ2+&#xd;
          DiBpIG1DXKHrkBUMyGnXdY/I01xee8OvtHx5j1mXTmkXpi8xXzct8p5vBBevTjXu7sUmCHDt8tj/&#xd;
          PcQGuUQ9OFq9wmfzKUBtiPF2R+GjhN1NAN+w2FIbKj9UfnlRY1zz2wnsGIqENJlcnYY+pW3KUyMM&#xd;
          nzO32GMXZZPNyUa5AAAAAwAFWC41MDkAAAUgMIIFHDCCBASgAwIBAgIIUbdr3gSmeh8wDQYJKoZI&#xd;
          hvcNAQELBQAwgasxCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRIwEAYDVQQHDAlT&#xd;
          YW4gRGllZ28xEzARBgNVBAoMCkVNUiBEaXJlY3QxNjA0BgNVBAsMLUNlcnRpZmljYXRpb24gQXV0&#xd;
          aG9yaXR5IChjZXJ0cy5lbXJkaXJlY3QuY29tKTEmMCQGA1UEAwwdRU1SIERpcmVjdCBUZXN0IERl&#xd;
          dmljZSBTdWJDQTIwHhcNMjMxMTAyMjEyNTQyWhcNMjQxMTAyMjEyNTQyWjB6MQswCQYDVQQGEwJV&#xd;
          UzETMBEGA1UECAwKQ2FsaWZvcm5pYTEXMBUGA1UECgwOTWV0cmlwb3J0IEluYy4xGTAXBgNVBAsM&#xd;
          EENBUkVRVUFMSVRZLVRFU1QxIjAgBgNVBAMMGWloZS5zdGFnaW5nLm1ldHJpcG9ydC5jb20wggEi&#xd;
          MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDi05ruWgI+Bed9eMonWT7Badv0R1nctXcnUJ87&#xd;
          sqDiv/VQMSzKDTM1b8PsqmBkiL1vhhZzZgLsvMM2eTV3iwHvrut0yTRwi/jKx+lc5XIYVcXhHOhl&#xd;
          wbEFTdmFuonJuO26cOua8Dw0fKYPgH9vPbywhVG0kNXQf+DgjuMM3IKXohR5AkpRMFr3RQN0mDEW&#xd;
          cwPQ+a7GMDjSKeONnvTsa4D5K2CADSQYIh+FARWfWDuIvc7zOj1inTLdCRa0GCvE5Ocj/VQ+PpKr&#xd;
          SoGUPULShuHfbs4k4xT2otGskuzowhTPLs95kvGCVBsIpfnNGG0QN7Ub8WpDD/nNzGJwGyBe16Ux&#xd;
          AgMBAAGjggFyMIIBbjBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly9jZXJ0cy5l&#xd;
          bXJkaXJlY3QuY29tL2NlcnRzL0VNUkRpcmVjdFRlc3REZXZpY2VTdWJDQTIuY3J0MB0GA1UdDgQW&#xd;
          BBTHhH0qkOSuubx9pjHaChsgjBffJTAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFLALWDvFk63G&#xd;
          b2VdEcASrVrch4Y1ME0GA1UdHwRGMEQwQqBAoD6GPGh0dHA6Ly9jZXJ0cy5lbXJkaXJlY3QuY29t&#xd;
          L2NybC9FTVJEaXJlY3RUZXN0RGV2aWNlU3ViQ0EyLmNybDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0l&#xd;
          BBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMEQGA1UdEQQ9MDuCGWloZS5zdGFnaW5nLm1ldHJpcG9y&#xd;
          dC5jb22GHkhUVFA6Ly9XV1cuQ0FSRVFVQUxJVFkuT1JHL1YwMTANBgkqhkiG9w0BAQsFAAOCAQEA&#xd;
          CASUTJh9KQhdiksve1sR8cT/bB5Rn12qvlo36kNf0FvK6qxUY+bei3F1xeZ2X+2ALi88EypPwXH9&#xd;
          N0CFsUNLG7twnjVtuIEPq/u6NU4dX55XdCIRQcTjj6ctSLGoN1aNo2jBD/FtPScuTR95c/Gza43R&#xd;
          TqJaPKrVnaWd9QA6TVSBimIodpYDz02ciM2v889iK8HqYeGgk3m6SmAyliRQNcM1CM0dnjm3Jwa2&#xd;
          dhHYtNNd0UUSd3mHAuqOTy9g9KBFp6pUVcVYaDY9m0g9hmEBJqAR4Ua3PYudVAn5ibiu45fxXvfg&#xd;
          8ewh9vviw/FPfjqIwEiNA53B24GPnkC9J/n2SwAFWC41MDkAAAXcMIIF2DCCA8CgAwIBAgIIP1YZ&#xd;
          EVyLzjMwDQYJKoZIhvcNAQELBQAwgZgxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTESMBAGA1UE&#xd;
          BxMJU2FuIERpZWdvMRMwEQYDVQQKEwpFTVIgRGlyZWN0MTYwNAYDVQQLEy1DZXJ0aWZpY2F0aW9u&#xd;
          IEF1dGhvcml0eSAoY2VydHMuZW1yZGlyZWN0LmNvbSkxGzAZBgNVBAMTEkVNUiBEaXJlY3QgVGVz&#xd;
          dCBDQTAeFw0yMzAzMDEyMTQ4NTJaFw0zMjA5MDYwNDMxMzZaMIGrMQswCQYDVQQGEwJVUzETMBEG&#xd;
          A1UECAwKQ2FsaWZvcm5pYTESMBAGA1UEBwwJU2FuIERpZWdvMRMwEQYDVQQKDApFTVIgRGlyZWN0&#xd;
          MTYwNAYDVQQLDC1DZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAoY2VydHMuZW1yZGlyZWN0LmNvbSkx&#xd;
          JjAkBgNVBAMMHUVNUiBEaXJlY3QgVGVzdCBEZXZpY2UgU3ViQ0EyMIIBIjANBgkqhkiG9w0BAQEF&#xd;
          AAOCAQ8AMIIBCgKCAQEA1oFvfVS2hgZXcNYTZdKCET2WAgxBRLTEuv0JKvYgV1/bvsxdQP652/Ca&#xd;
          dy+R8q2tTVf3eIUHtN3e28FLyJQUrTOPSiiVsiItOrziX3YQjTkyLqecmaz+5eRfHedmZ5Kery7x&#xd;
          r4FuEMc0YT/bWoiV9dp87g4lBACb4tf+LPfRyZYXw+0DSc/0R17Up/zeWjEik29+cVFatSfcoois&#xd;
          3DXY7XeuwmPpF+YkND1Udh6EUuvIvhB2x49TBurQMYWs+6S/URQnHV3AEuhSruA5xXHSqYDtOn71&#xd;
          8SNzs5zvxBlDY9iNK28LsGL8MtVFuzqb3HLQGUhj8fMErYTqgLtV4hrPHwIDAQABo4IBDzCCAQsw&#xd;
          UAYIKwYBBQUHAQEERDBCMEAGCCsGAQUFBzAChjRodHRwOi8vY2VydHMuZW1yZGlyZWN0LmNvbS9j&#xd;
          ZXJ0cy9FTVJEaXJlY3RUZXN0Q0EuY3J0MB0GA1UdDgQWBBSwC1g7xZOtxm9lXRHAEq1a3IeGNTAP&#xd;
          BgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFDHWhC9JmG4AAdBnofieHLBvp6KsMBEGA1UdIAQK&#xd;
          MAgwBgYEVR0gADBDBgNVHR8EPDA6MDigNqA0hjJodHRwOi8vY2VydHMuZW1yZGlyZWN0LmNvbS9j&#xd;
          cmwvRU1SRGlyZWN0VGVzdENBLmNybDAOBgNVHQ8BAf8EBAMCAYYwDQYJKoZIhvcNAQELBQADggIB&#xd;
          AC6MbwbY6/sJxWTjmqIGVMh4eUESP/kQiVAOK8IhICehdUD/UMr3JO1QO40nh/4ZndXYSqsZNj8l&#xd;
          Lw2BqlPUAklDB3jSpnzo/ejUZtFTwwwbjPT7uHl9SCGiek6+a5cbmMvit/Dj9zQpYI2WYMTJ8xVJ&#xd;
          5YjQlQr68p9BVxn1coyAkpZFeJ7xs4t948PHnsJp8OFP2X84SLscjzkSfrP73BywuIvKm4VJ83tA&#xd;
          NYhEqEZRf3gfcesSsoVYKITbV/gsXxtNKU3u7/1jk44GfHgs9U4yuZcMUVOukPIUH2tjzSo5ASVF&#xd;
          iu/Pl58Uw3/lAnMk2+1wufqoguKjkq+FM/abbGsmXLwzEOEHxmUNmOnLlwuui2gzi1DHCM2JD4nX&#xd;
          lFItwlWsq9sOTm9TsDzQxBZkPChsGgcEuyMGGlZJ9ro31gKkYGW/cHzMBJBIlm7GPnUKN4tCtPXy&#xd;
          8GcFsPp0OD78HOHGHLO4lcIKDQvaf9s46LsEPLJbaAAF207KD5rejs3FVMZxHr+4NPtPneu2QZFs&#xd;
          TN98tTxThcSa1lcf55AJCJyAgaDO/HqY2vSbl/7PTR2ttZJp7ZUYdXqlvrhmIm/3DErfgc9c/Ki/&#xd;
          4xQ9DUmmhXeih+5tg5hqEn7TN4NVjWQVz1VSOKOxGex/X7xglBrw3o//szZVfS8+m7XdtQfOqABh&#xd;
          AAVYLjUwOQAABmowggZmMIIETqADAgECAgEBMA0GCSqGSIb3DQEBCwUAMIGYMQswCQYDVQQGEwJV&#xd;
          UzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCVNhbiBEaWVnbzETMBEGA1UEChMKRU1SIERpcmVjdDE2&#xd;
          MDQGA1UECxMtQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKGNlcnRzLmVtcmRpcmVjdC5jb20pMRsw&#xd;
          GQYDVQQDExJFTVIgRGlyZWN0IFRlc3QgQ0EwHhcNMTIwOTA2MDQzMTM2WhcNMzIwOTA2MDQzMTM2&#xd;
          WjCBmDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlTYW4gRGllZ28xEzARBgNV&#xd;
          BAoTCkVNUiBEaXJlY3QxNjA0BgNVBAsTLUNlcnRpZmljYXRpb24gQXV0aG9yaXR5IChjZXJ0cy5l&#xd;
          bXJkaXJlY3QuY29tKTEbMBkGA1UEAxMSRU1SIERpcmVjdCBUZXN0IENBMIICIjANBgkqhkiG9w0B&#xd;
          AQEFAAOCAg8AMIICCgKCAgEAu6CTnoeii3rIQSiFtFB1A/qwxMLNc5KDEet5gjiHTQSExvzHxXMP&#xd;
          9kIR2CavBrrLVYTtZo91Nxf+MJ3QY1TCCo/Puws/Y15MD2SCf+bSRe/EiDNoSEme12p2/MeqWG0g&#xd;
          wBREC716sB8yfSCIrvPC1KDltjALT23K/h1EgBf1S686k6omdCT0NFF3rj70QqRf1mPWWpPT9aOv&#xd;
          TDeNwZg3TZ0HTdPhYBFkS6DOQHM9yZg8uGXT2BGuBCDyayBNCLry9H5Qo1ShCFEkCST8ICqQxPxT&#xd;
          O5p79bu61iTj++aIkQegLs5XvIZrtWsPQeGMPN+zneR2efOWjowH7qgYW0gpowXgPwZVKv4xj+lr&#xd;
          4LZ2Sp/jLc+veGoze3i+Cav96DR2HOH37PiWkRnP1yJZw5fCObF5zc4Vqe8w54bg6EpGIYiP+ZWQ&#xd;
          MRaULe1x0/bYO0aT9EcY4keR/qooXF40M4UdR1OmJeV0CXdxSD0E0CVSdYcXCKb5vLHFVjOZez/w&#xd;
          p8t86nrEgWMj95100Tv9q9BagSQ5qmBQN9qLFaIjV3jRAYomvR3Vij5blXHPO58mnmIL/gSaVjNo&#xd;
          r351U619AZ81ZpeZ9hrwfuStytZy+nRqd2jhF6Hdr6qnJu8FXJEmt57VY4NAeqzsnaXH2q7JV8jc&#xd;
          GjHe5z8fDbHF2PFXdxSy93kCAwEAAaOBuDCBtTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQE&#xd;
          AwIBBjAdBgNVHQ4EFgQUMdaEL0mYbgAB0Geh+J4csG+noqwwHwYDVR0jBBgwFoAUMdaEL0mYbgAB&#xd;
          0Geh+J4csG+noqwwPwYDVR0fBDgwNjA0oDKgMIYuaHR0cDovL2NlcnRzLmVtcmRpcmVjdC5jb20v&#xd;
          RU1SRGlyZWN0VGVzdENBLmNybDARBgNVHSAECjAIMAYGBFUdIAAwDQYJKoZIhvcNAQELBQADggIB&#xd;
          AGxdtjwHsVwiyTJ4H8IYQjvsZoMwN8pYax4kliUljPYV4gmA+2p0+HOfSOFBRVzCv/+ALmPVoBGW&#xd;
          6ywbeAyvw5qOlKk6qp9cSPO4hN6r4fGyn66uyIlc5kqG6tjk0kpnfS6UUPE5n3ttZVRg9N/LLWpS&#xd;
          uyqc2VbwslwKc3Nna4NImffYW6BS1Z7QQSBEzXT/xDYglcu4iERAtvCXqrs9wOI+RP/JWH/0vq6X&#xd;
          Zs79lensN5I945p9Y64KhM1srGAG6WNqObZU0Hn5fH+tK4+ehNGGxpeGR76dvdlsYcnZlG79Djn4&#xd;
          4HXCztV52cxyLbk5Wj7JWkfy2XYoX27UlU21/mZjf/8cTBHw5889Fl5AKqq4RJWtCNkgtro63uVU&#xd;
          iGg0jrORkCndNpZgGL3i6lWR4D26pUgLtwGmI7P7pddEN0kMy6HrGwDa2rYTkFjnUfml+yRcEEaA&#xd;
          fENDnpHdGyRnur81opKKoEAie54btNVb51H76tPaf3CTMkcqkD5hLTMeh28igHvUo2rU//1yGgIx&#xd;
          wGs2mHmffYLwOk6UX6GLeQ6TCPByF+TMLldL5mKjlVg7IJXUL4JgnuzDWmyTXJgBY+b2udSZ+uY7&#xd;
          bsde/qVbRn0Sl5S777nYJJiNmzHcTgnUVHRO6XOwPwFC0VEvpo9+5KDzmiQ6zHBv+nQB0hPFE7S9&#xd;
          VdnsUZp6BJafDaQQXEvO4QXZwss=&#xd;
</property>
        <property name="KeyStorePassword">6da5e743-0ce6-4ce6-bd98-7826e90a066c</property>
        <property name="TrustStore">/u3+7QAAAAIAAAAAkpaswKwSJn93N+dz8RVN6SRHN4Y=&#xd;
</property>
        <property name="settings">&lt;com.mirth.connect.plugins.ssl.model.SSLManagerSettings&gt;
          &lt;validationLoginWarning&gt;true&lt;/validationLoginWarning&gt;
          &lt;expirationTimeUntil&gt;30d&lt;/expirationTimeUntil&gt;
          &lt;/com.mirth.connect.plugins.ssl.model.SSLManagerSettings&gt;</property>
      </properties>
    </entry>
    <entry>
      <string>Data Pruner</string>
      <properties>
        <property name="archiveEnabled">&lt;boolean&gt;false&lt;/boolean&gt;</property>
        <property name="archiverBlockSize">50</property>
        <property name="archiverOptions">&lt;com.mirth.connect.util.messagewriter.MessageWriterOptions&gt;
          &lt;destinationContent&gt;false&lt;/destinationContent&gt;
          &lt;encrypt&gt;false&lt;/encrypt&gt;
          &lt;includeAttachments&gt;false&lt;/includeAttachments&gt;
          &lt;passwordEnabled&gt;false&lt;/passwordEnabled&gt;
          &lt;/com.mirth.connect.util.messagewriter.MessageWriterOptions&gt;</property>
        <property name="enabled">false</property>
        <property name="includeAttachments">&lt;boolean&gt;false&lt;/boolean&gt;</property>
        <property name="maxEventAge"></property>
        <property name="pollingProperties">&lt;com.mirth.connect.donkey.model.channel.PollConnectorProperties
          version=&quot;4.4.2&quot;&gt;
          &lt;pollingType&gt;INTERVAL&lt;/pollingType&gt;
          &lt;pollOnStart&gt;false&lt;/pollOnStart&gt;
          &lt;pollingFrequency&gt;3600000&lt;/pollingFrequency&gt;
          &lt;pollingHour&gt;0&lt;/pollingHour&gt;
          &lt;pollingMinute&gt;0&lt;/pollingMinute&gt;
          &lt;cronJobs/&gt;
          &lt;pollConnectorPropertiesAdvanced&gt;
          &lt;weekly&gt;true&lt;/weekly&gt;
          &lt;inactiveDays&gt;
          &lt;boolean&gt;false&lt;/boolean&gt;
          &lt;boolean&gt;false&lt;/boolean&gt;
          &lt;boolean&gt;false&lt;/boolean&gt;
          &lt;boolean&gt;false&lt;/boolean&gt;
          &lt;boolean&gt;false&lt;/boolean&gt;
          &lt;boolean&gt;false&lt;/boolean&gt;
          &lt;boolean&gt;false&lt;/boolean&gt;
          &lt;boolean&gt;false&lt;/boolean&gt;
          &lt;/inactiveDays&gt;
          &lt;dayOfMonth&gt;1&lt;/dayOfMonth&gt;
          &lt;allDay&gt;true&lt;/allDay&gt;
          &lt;startingHour&gt;8&lt;/startingHour&gt;
          &lt;startingMinute&gt;0&lt;/startingMinute&gt;
          &lt;endingHour&gt;17&lt;/endingHour&gt;
          &lt;endingMinute&gt;0&lt;/endingMinute&gt;
          &lt;/pollConnectorPropertiesAdvanced&gt;
          &lt;/com.mirth.connect.donkey.model.channel.PollConnectorProperties&gt;</property>
        <property name="pruneEvents">false</property>
        <property name="pruningBlockSize">1000</property>
      </properties>
    </entry>
  </pluginProperties>
  <resourceProperties>
    <list>
      <com.mirth.connect.plugins.directoryresource.DirectoryResourceProperties version="4.4.2">
        <pluginPointName>Directory Resource</pluginPointName>
        <type>Directory</type>
        <id>Default Resource</id>
        <name>[Default Resource]</name>
        <description>Loads libraries from the custom-lib folder in the Mirth Connect home directory.</description>
        <includeWithGlobalScripts>true</includeWithGlobalScripts>
        <loadParentFirst>false</loadParentFirst>
        <directory>custom-lib</directory>
        <directoryRecursion>true</directoryRecursion>
      </com.mirth.connect.plugins.directoryresource.DirectoryResourceProperties>
    </list>
  </resourceProperties>
  <channelDependencies />
  <configurationMap>
    <entry>
      <string>CDA.XSLT</string>
      <com.mirth.connect.util.ConfigurationProperty>
        <value>C:/Temp/CDA/XSLT/</value>
        <comment>C-CDA US Realm Header transformation file location (with a trailing slash)</comment>
      </com.mirth.connect.util.ConfigurationProperty>
    </entry>
    <entry>
      <string>HL7v3.Sender.Name</string>
      <com.mirth.connect.util.ConfigurationProperty>
        <value>Metriport</value>
        <comment>The name of the HL7v3 message sending organization (OPTIONAL)</comment>
      </com.mirth.connect.util.ConfigurationProperty>
    </entry>
    <entry>
      <string>HL7v3.Sender.OID</string>
      <com.mirth.connect.util.ConfigurationProperty>
        <value>2.16.840.1.113883.3.9621</value>
        <comment>The OID of the HL7v3 message sending organization (REQUIRED)</comment>
      </com.mirth.connect.util.ConfigurationProperty>
    </entry>
  </configurationMap>
</serverConfiguration>