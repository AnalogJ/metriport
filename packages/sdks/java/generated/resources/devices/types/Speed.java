/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Speed.Builder.class
)
public final class Speed {
  private final Optional<Double> maxKmH;

  private final Optional<Double> avgKmH;

  private final Map<String, Object> additionalProperties;

  private Speed(Optional<Double> maxKmH, Optional<Double> avgKmH,
      Map<String, Object> additionalProperties) {
    this.maxKmH = maxKmH;
    this.avgKmH = avgKmH;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("max_km_h")
  public Optional<Double> getMaxKmH() {
    return maxKmH;
  }

  @JsonProperty("avg_km_h")
  public Optional<Double> getAvgKmH() {
    return avgKmH;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Speed && equalTo((Speed) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Speed other) {
    return maxKmH.equals(other.maxKmH) && avgKmH.equals(other.avgKmH);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.maxKmH, this.avgKmH);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Double> maxKmH = Optional.empty();

    private Optional<Double> avgKmH = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(Speed other) {
      maxKmH(other.getMaxKmH());
      avgKmH(other.getAvgKmH());
      return this;
    }

    @JsonSetter(
        value = "max_km_h",
        nulls = Nulls.SKIP
    )
    public Builder maxKmH(Optional<Double> maxKmH) {
      this.maxKmH = maxKmH;
      return this;
    }

    public Builder maxKmH(Double maxKmH) {
      this.maxKmH = Optional.of(maxKmH);
      return this;
    }

    @JsonSetter(
        value = "avg_km_h",
        nulls = Nulls.SKIP
    )
    public Builder avgKmH(Optional<Double> avgKmH) {
      this.avgKmH = avgKmH;
      return this;
    }

    public Builder avgKmH(Double avgKmH) {
      this.avgKmH = Optional.of(avgKmH);
      return this;
    }

    public Speed build() {
      return new Speed(maxKmH, avgKmH, additionalProperties);
    }
  }
}
