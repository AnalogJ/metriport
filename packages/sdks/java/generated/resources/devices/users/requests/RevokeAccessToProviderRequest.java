/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.devices.users.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = RevokeAccessToProviderRequest.Builder.class
)
public final class RevokeAccessToProviderRequest {
  private final String provider;

  private final Map<String, Object> additionalProperties;

  private RevokeAccessToProviderRequest(String provider, Map<String, Object> additionalProperties) {
    this.provider = provider;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return The provider you would like to revoke access to.
   */
  @JsonProperty("provider")
  public String getProvider() {
    return provider;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof RevokeAccessToProviderRequest && equalTo((RevokeAccessToProviderRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(RevokeAccessToProviderRequest other) {
    return provider.equals(other.provider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.provider);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static ProviderStage builder() {
    return new Builder();
  }

  public interface ProviderStage {
    _FinalStage provider(String provider);

    Builder from(RevokeAccessToProviderRequest other);
  }

  public interface _FinalStage {
    RevokeAccessToProviderRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ProviderStage, _FinalStage {
    private String provider;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(RevokeAccessToProviderRequest other) {
      provider(other.getProvider());
      return this;
    }

    /**
     * <p>The provider you would like to revoke access to.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("provider")
    public _FinalStage provider(String provider) {
      this.provider = provider;
      return this;
    }

    @Override
    public RevokeAccessToProviderRequest build() {
      return new RevokeAccessToProviderRequest(provider, additionalProperties);
    }
  }
}
